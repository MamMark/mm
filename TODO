. fix Arbiter bug (fcfs) so it correctly cycles.
. make sure that BlockingAMReceiverImple still works.  What was the bug?


CmdHandler:

1) Write simple base side for sending/receiving commands.
2) Command processors.  Which ones first?


Duty Analysis:

. Verification of results.
. adaptation to profiling?
  a) Power profiling (Sensor Power System, MCU)
  b) Code profiling


1) Port John's code.
2) Sample run.
3) Flesh out effort.


Current Code:

. Turn on DMA for SD
. find out why GPS gets toobig and checksum fail


Serial Restructure:

*. What happens if USART (arb0) is requested while arb1 is cycling.

*1) Understand panics
2) Diagram usage of SerialDemux, SerialClientUart{Byte, Stream},
   SerialDefOwnerClient, SerialDemuxResource, SerialDemuxDefaultOwner,
   MuxControl
3) Flesh out changes to serial stack.



Failure Recovery

If we detect memory corruption,  PANIC and REBOOT.


How do we want the machine to degrade if there are failures?

- If Collect/StreamStorage/SD fails what to do?
- Could keep status of each subsystem and only allow the subsystem to work if the subsystem is up.

- What we want...  If something goes wrong we want to note it in some fashion so we can see it.

1st tier: log into SD.  Panic.warn
  (assume collect, Stream, and SD are all up)  If they aren't more is wrong than what we are
  warning about so we have other things to worry about.

2nd tier: log via comm.  But how does this work if we aren't communicating.  Try and if
   not connected than it gets dropped.

3rd tier: Panic code writes image into panic area (ram gets written to SD).  Need panic
manager to control where the image gets written.


*Need versioning.  So if we look at a ram image we can correlate it to a code version.




done . remove othersWaiting
