# to launch msp432-gdb
# M-x gdb
# arm-none-eabi-gdb-py -i=mi -iex "target extended-remote localhost:2331" -cd build/<target>/ main.exe
#
# previous mechanism:
# arm-none-eabi-gdb-py -i=mi -nx -ex "target extended-remote localhost:2431" -x .gdbinit -x .gdb_mm5a build/exp_msp432/main.exe

# (setq make-command "make dev6a")
# (setq gud-gdb-command-name "arm-none-eabi-gdb-py -i=mi -iex \\"target remote localhost:2331\\" -cd build/dev6a/ main.exe")
#
# 2331 is Jlink
# 55000 is TI's gdb-agent-console, gag

set remoteaddresssize 32
set remotetimeout 999999

set mem inaccessible-by-default off

#
# gdb_msp432:   cpu definitions
# gdb_target:   platform definitions, automatic
# gdb_gps:      definitions for the gps subsystem
# gdb_mm:       definitions for various mm subsystems

#
# down in the build/<target> directory one needs symbolic
# links to .gdbinit and .gdb_<target>:
#
#     pushd build/<target>
#     ln -nfs ../..              .gdb
#     ln -nfs .gdb/.gdbinit      .gdbinit
#     ln -nfs .gdb/.gdb_<target> .gdb_target
#     popd
#
# if in a golden or nib directory you will be one more level down and
# the symbolic links above will compensate accordingly.
#
# The build system automatically creates these links.  So generally you
# don't have to worry about it.
#
# the gdb source files may include python files.  Some of these python files
# may get sourced from within other source files and need to live in the
# application directory along with the other gdb files.
#

add-symbol-file symbols_hw 0
source .gdb/.gdb_msp432
source .gdb_target

source .gdb/.gdb_gps
source .gdb/.gdb_si446x.py

source .gdb/.gdb_mm
source .gdb/.gdb_tagmon.py
source .gdb/.gdb_dblk.py

source .gdb/.gdb_tasks.py
source .gdb/.gdb_timers.py

set disassemble-next-line on

x/i $pc

define npc
disassem/r $pc,+0d32
end
document npc
display next (n) instructions from $pc
end

define new
load
mon reset
end
document new
load new image, same executable
then reset
end

define pc
# arg0 increment to increase PC by
set $pc=$pc+$arg0
end
document pc
adjust current PC by the passed in argument.
ie. pc 2   yields new pc of pc+2
end

define tq
taskQueue
end
document tq
display task queue
end

define tt
taskTrace
end
document tt
display task trace
end

define timers
printf "\n"
hwTMilli
printf "\n"
dispTimers
printf "\n"
end

define tasks
taskTrace
printf "\n"
taskQueue
printf "\n"
end

define dblk
printf "\n"
dblkManager
printf "\n"
dblkMap
printf "\n"
resyncCtl
printf "\n"
end
document dblk
display dblk information
end

define gg
set gg_wait=0
c
end
document gg
go, set gg_wait to 0 and continue
end

#b RealMainP.nc:100
#b RealMainP.nc:105
#b SchedulerBasicP.nc:221
#b SchedulerBasicP.nc:227
#b VirtualizeTimerImplP.nc:172
#dis

b SchedulerBasicP.nc:227
b VirtualizeTimerImplP.nc:172
dis 1 2

b PanicP.nc:925
comm
printf "\n\n*** Panic: %d(d), w: %d(d), a: %04x %04x %04x %04x\n", \
        pcode, where, arg0, arg1, arg2, arg3
end

b main
