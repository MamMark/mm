The dev7 platform is a development board for the mm7 tag.  It is based
on the MSP-EXP432P401R Launch Pad Evaluation Board.  This uses the 100
pin msp432p401r QZ package.

It has custom wiring.  See <tos_root>/tos/platforms/dev7 for more
details.

see GPS section for SparkFun ublox ZOE-M8Q breakout board wiring.


*** common files shared with the dev7/mm7 are in tos/platforms/mm


Exceptions:
-------------

All exceptions go through the exception/interrupt table that starts by
default at the beginning of Flash at 0x0000_0000.  This table can be moved
by changing the contents of SCB->VTOR (Vector Table Offset Register).

All handlers take the form <exception>_Handler and the initial set of these
handlers are aliased to __default_handler.  All initial handlers are given
the "weak" attribute so may be overridden by TinyOs code.

For example, if TinyOS code wants to use a pin interrupt, say P1.4, it
would define PORT1_Handler and would then be able to capture the P1.4
interrupt when it fires.

Once an Exception handler has been taken, the taking code is responsible
for catching any unhandled exceptions coming through that vector.


Startup:
------------

The processor can be reset in various ways and when it does it starts
executing as follows:

The very first entry in the vector table is __StackTop__ (0x2001_0000).
The initial MSP (main stack pointer) is set from this address.

The processor then starts to execute at the address in the Reset vector
slot.  This will be the routine that handles Reset (__Reset).

__Reset is also aliased to start().  The linker uses various mechanisms to
set the initial entry point for the built object.  Setting start()
establishes a default if none of the other mechanisms are used.  This won't
effect actual program execution but does tell GDB where to put the initial
view when starting up.

__Reset() is responsible for bring up enough of the system for TinyOS to
start.  In addition, we also initilize pieces of the h/w that is easier to
do directly rather then letting TinyOS modules do it.  Your mileage may
vary.

When __Reset() first starts to execute, one should set any controlling
I/Os to a state that won't cause problems for the h/w.  This should be
done as soon as possible after resetting.  When reset the msp432 sets
all of its I/Os to input.

At a minimum, __Reset() must make sure that BSS has been zeroed and any
pre-initilized data has been copies from flash down to where it actually
lives in RAM.


Initial Processor State:
--------------------------

When the cpu first comes up it will have the following state:

o all Port I/O pins are set to input.
o cpu core is in AM_LDO_VCORE0.


Floating Point:
-----------------

The Cortex-M4F includes an IEEE 754 single precision floating point unit.
We build with -mfloat-abi=hard -mfpu=fpv4-sp-d16 but leave the fpu off.
When the fpu is turned on it increases the exception stack from 8 words to
25 words.

When floating point is needed, one must turn on the fpu, do what one needs,
and then turn the fpu back off.  If an exception occurs while working with
the fpu, the right thing will happen and state will be preserved.



GPS Ublox ZOE-M8Q breakout wiring:

dev7 pins               breakout board      Analyzer
7.0     gps_sclk        CLK     purple      chn 1
7.1     gps_tm          PPS     blue        chn 2
7.2     gps_somi        MISO    green       chn 3
7.3     gps_simo        MOSI    yellow      chn 4
6.2     gps_txrdy       INTn    red         chn 6
9.3     gps_csn         CS      grey        chn 7
9.4     gps_resetn      RSTn    orange      chn 0
3V3     3V3             3V3     white
GND     gnd             GND     black       gnd


TLV from rev 2 EXP-MSP432P401R launch pad



Issues with the msp432p401r and Segger Jlink:

* Can not halt processor

  Not sure how to duplicate this problem.  Seems to has something to do
  with SWD, erase, and quitting.  Intermittent.  Doesn't do it everytime.

** One way is with JLinkExe, swd, erase, quit
zot (24): JLinkExe
si swd
device msp432p401r
speed 1000
erase
q

zot(25): JLinkExe
si swd
device msp432p401r
speed 1000
halt

<most times this will fail>


To recover, use swd and loadbin

zot(26): JLinkExe -device msp432p401r -if swd
speed 1000
loadbin main.bin 0   <sometimes this fails too>
r
g
halt
q
