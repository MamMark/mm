
printf "\n***\n*** MM6A gdb\n***\n\n"
source .gdb/.gdb_hwMm.py

define hw_pwr
printf "gm_1v8:  %d    3v3:    %d    radio_pwr: %d    vel_pwr:   %d\n", \
    (($p5->OUT >> 0) & 1), (($p4->OUT >> 4) & 1), (($p4->OUT >> 5) & 1),  \
    (($p5->OUT >> 1) & 1)
printf "tmp_pwr: %d    sd_pwr: %d    radio_3V3: %d    press_pwr: %d\n", \
    (($p4->OUT >> 3) & 1), (($p7->OUT >> 6) & 1), (($p4->OUT >> 0) & 1),  \
    (($p5->OUT >> 2) & 1)
printf "scl:     %d\n", (($p6->IN >> 7) & 1)
end

define hw_radio
printf "\nradio(ub2): pwr: %d  sw: %d  cts: %d  irqN: %d  sdn: %d  csN: %d   siok\n", \
    (($p4->OUT >> 5) & 1), ($p4->OUT & 1), (($p4->IN >> 1) & 1),  \
    (($p6->IN >> 1) & 1), (($p3->OUT >> 3) & 1), (($p3->OUT >> 4) & 1)
printf "                 %c      %c       %c        %c       %c       %c    %c%c%c\n", \
    ($p4->DIR & (1<<5))?'O':'I', ($p4->DIR & (1<<0))?'O':'I', \
    ($p4->DIR & (1<<1))?'O':'I', ($p6->DIR & (1<<1))?'O':'I', \
    ($p3->DIR & (1<<3))?'O':'I', ($p3->DIR & (1<<4))?'O':'I', \
    ($p3->SEL0 & (1 << 5)) ? 'M' : 'p', ($p3->SEL0 & (1 << 7)) ? 'M' : 'p', \
    ($p3->SEL0 & (1 << 6)) ? 'M' : 'p'
__p_usci $ucb2 2 1 0d22
end
document hw_radio
display radio hardware state
end

define cts
printf "cts: %d  irqN: %d  sdn: %d  csN: %d\n",  \
    (($p4->IN  >> 1) & 1), (($p6->IN  >> 1) & 1), \
    (($p3->OUT >> 3) & 1), (($p3->OUT >> 4) & 1)
end
document cts
current status of various Si446x radio pins
end

define sd0
printf "\nuSD0(ua2): pwr: %d  csN: %d    siok\n", \
    (($p7->OUT >> 6) & 1), (($p3->OUT >> 1) & 1)
printf "                %c       %c     %c%c%c\n", \
    ($p7->DIR & (1 << 6))  ? 'O' : 'I', ($p3->DIR & (1 << 1)) ?'O':'I', \
    ($p3->SEL0 & (1 << 0)) ? 'M' : 'p', ($p2->SEL0 & (1 << 4)) ? 'M' : 'p', \
    ($p7->SEL0 & (1 << 7)) ? 'M' : 'p'
__p_usci $uca2 2 0 0d18
output SDspP__0__sdc
printf "\n"
printf "Delta times:\n"
printf "  last_full_reset_time_us:  0d%d\n", \
       SDspP__0__last_full_reset_time_us
printf "  last_reset_delta_ms: 0d%d/%d  _us: 0d%d/%d\n", \
          SDspP__0__last_reset_delta_ms, SDspP__0__max_reset_time_ms, \
          SDspP__0__last_reset_delta_us, SDspP__0__max_reset_time_us
printf "  last_read_delta_ms: 0d%d/%d  _us: 0d%d/%d\n", \
          SDspP__0__last_read_delta_ms, SDspP__0__max_read_time_ms,   \
          SDspP__0__last_read_delta_us, SDspP__0__max_read_time_us
printf "  last_write_delta_ms: 0d%d/%d  _us: 0d%d/%d\n", \
          SDspP__0__last_write_delta_ms, SDspP__0__max_write_time_ms, \
          SDspP__0__last_write_delta_us, SDspP__0__max_write_time_us
printf "  last_erase_delta_ms: 0d%d/%d  _us: 0d%d/%d\n", \
          SDspP__0__last_erase_delta_ms, SDspP__0__max_erase_time_ms, \
          SDspP__0__last_erase_delta_us, SDspP__0__max_erase_time_us
printf "DMA stats:\n"
output/d SD0HardwareP__dma_stats
printf "\n"
end
document sd0
display sd0 state
end

define sd1
printf "\nuSD1(ua1): pwr: %d  csN: %d    siok\n", \
    1, (($p1->OUT >> 3) & 1)
printf "                %c       %c     %c%c%c\n", \
    'O', ($p1->DIR & (1 << 3)) ?'O':'I', \
    ($p2->SEL0 & (1 << 3)) ? 'M' : 'p', ($p3->SEL0 & (1 << 2)) ? 'M' : 'p', \
    ($p2->SEL0 & (1 << 0)) ? 'M' : 'p'
__p_usci $uca1 1 0 0d17
output SDspP__1__sdc
printf "\n"
end
document sd1
display sd1 state
end

define hw_gps
printf "\ngps(ua0): pwr (g/m): %d  on_off: %d  nRst: %d  awake: %d    grt\n", \
    (($p5->OUT >> 0) & 1), (($p5->OUT >> 5) & 1), (($pj->OUT >> 2) & 1), (($p6->IN >> 2) & 1)
printf "                     %c          %c        %c         %c     %c%c\n", \
    ($p5->DIR & (1<<0))?'O':'I', ($p5->DIR & (1<<5))?'O':'I', ($pj->DIR & (1<<2))?'O':'I', \
    ($p6->DIR & (1<<2))?'O':'I', ($p7->SEL0 & (1 << 3)) ? 'M' : 'p', ($p7->SEL0 & (1 << 2)) ? 'M' : 'p'
__p_usci $uca0 0 0 0d16
end
document hw_gps
display gps hardware state
end

#
# Port J.2, gps_resetn
#
# FIXME  address is wrong.
#
# set PJ.2 to 1pO       BITBAND_PERI(P6->DIR, 0) = 1;  *420988a0 = 1
# set PJ.2 to 0pO       BITBAND_PERI(P6->OUT, 0) = 0;  *42098860 = 0
# set PJ.2 to 1pO       BITBAND_PERI(P6->OUT, 0) = 1;  *42098860 = 1
#   leave at 1pO
# set PJ.2 to 1pI       BITBAND_PERI(P6->DIR, 0) = 0;  *420988a0 = 0
#
set $_gps_resetn     = (uint8_t *) 0x42098860
set $_gps_resetn_dir = (uint8_t *) 0x420988a0

define rg
set *$_gps_resetn_dir = 1
set *$_gps_resetn     = 0
set *$_gps_resetn     = 1
end
document rg
reset gps h/w
end

define rg0
set *$_gps_resetn_dir = 1
set *$_gps_resetn     = 0
end

define rg1
set *$_gps_resetn     = 1
end

#
# tmp i2c bus
# tmp(ub3): pwr: 1    sdk
#                O     MM
#
define hw_tmp
printf "\ntmp(ub3): pwr: %d    scl: %d    sdk\n", \
    (($p4->OUT >> 3) & 1), (($p6->IN >> 7) & 1)
printf "               %c         %c     %c%c\n\n", \
    ($p4->DIR & (1<<3))?'O':'I', ($p6->DIR & (1<<7))?'O':'I', \
    ($p6->SEL1 & (1 << 6)) ? 'M' : 'p', ($p6->SEL1 & (1 << 7)) ? 'M' : 'p'
__p_usci $ucb3 3 1 0d23
end
document hw_tmp
display tmp i2c bus hardware state
end

#
# gps/mems pwr: p5.1, pwr_gps_mems_1V8_en
# mems bus (USCI B1) simo: p6.4 somi: p6.5 sclk: p6.3
# mems chips:
#   accel: csn p1.6, int1 p2.2, int2 p1.7
#   mag:   csn p1.5, drdy p1.0, int  p1.1
#   gyro:  csn p5.7, int1 p5.6, int2 p5.4
#
# mems(ub1):    g/sm pwr 1      P1         P2     siok
#                        O  n[35]:Epa  n[36]:Epa   MMM
#     accel: csn 1  int1 0/Iep  int2 0/Iep
#       mag: csn 1  drdy 0/Iep   int 0/Iep
#      gyro: csn 1  int1 0/Iep  int2 0/Iep
#
define hw_mems
printf "\nmems(ub1):    g/m  pwr %d      P1         P2     siok\n", \
    (($p5->OUT >> 1) & 1)
printf "                       %c", \
    ($p5->DIR & (1<<1))?'O':'I'
_set_nvic_index 0d35
printf "  n[%02d]:%c%c%c",                                     \
    0d35,                                                      \
    ($nvic->ISER[$_nvic_index]&(1 << $_nvic_bit)) ? 'E' : 'e', \
    ($nvic->ISPR[$_nvic_index]&(1 << $_nvic_bit)) ? 'P' : 'p', \
    ($nvic->IABR[$_nvic_index]&(1 << $_nvic_bit)) ? 'A' : 'a'
_set_nvic_index 0d36
printf "  n[%02d]:%c%c%c",                                     \
    0d36,                                                      \
    ($nvic->ISER[$_nvic_index]&(1 << $_nvic_bit)) ? 'E' : 'e', \
    ($nvic->ISPR[$_nvic_index]&(1 << $_nvic_bit)) ? 'P' : 'p', \
    ($nvic->IABR[$_nvic_index]&(1 << $_nvic_bit)) ? 'A' : 'a'
printf "   %c%c%c\n",                   \
    ($p6->SEL0 & (1 << 4)) ? 'M' : 'p', \
    ($p6->SEL0 & (1 << 5)) ? 'M' : 'p', \
    ($p6->SEL0 & (1 << 3)) ? 'M' : 'p'
printf "    accel: csn %d  int1 %d/%c%c%c  int2 %d/%c%c%c\n", \
    (($p1->OUT >> 6) & 1),                                    \
    (($p2->IN  >> 2) & 1),       ($p2->DIR & (1<<2))?'O':'I', \
     ($p2->IE & (1<<2))?'E':'e', ($p2->IFG & (1<<2))?'P':'p', \
    (($p1->IN  >> 7) & 1),       ($p1->DIR & (1<<7))?'O':'I', \
     ($p1->IE & (1<<7))?'E':'e', ($p1->IFG & (1<<7))?'P':'p'
printf "      mag: csn %d  drdy %d/%c%c%c   int %d/%c%c%c\n", \
    (($p1->OUT >> 5) & 1),                                    \
    (($p1->IN  >> 0) & 1),       ($p1->DIR & (1<<0))?'O':'I', \
     ($p1->IE & (1<<0))?'E':'e', ($p1->IFG & (1<<0))?'P':'p', \
    (($p1->IN  >> 7) & 1),       ($p1->DIR & (1<<7))?'O':'I', \
     ($p1->IE & (1<<7))?'E':'e', ($p1->IFG & (1<<7))?'P':'p'
printf "     gyro: csn %d  int1 %d/%c%c%c  int2 %d/%c%c%c\n", \
    (($p5->OUT >> 7) & 1),                                     \
    (($p5->IN  >> 6) & 1),       ($p5->DIR & (1<<6))?'O':'I', \
     ($p5->IE & (1<<6))?'E':'e', ($p5->IFG & (1<<6))?'P':'p', \
    (($p5->IN  >> 4) & 1),       ($p5->DIR & (1<<4))?'O':'I', \
     ($p5->IE & (1<<4))?'E':'e', ($p5->IFG & (1<<4))?'P':'p'
printf "\n"
__p_usci $ucb1 1 1 0d21
end
document hw_mems
display mems hw parameters
end
