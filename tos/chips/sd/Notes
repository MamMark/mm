Notes on resetting the SD.

Resetting the SD into SPI mode consists of powering up and asserting CS while
sending CMD0 (FORCE_IDLE, SD_RESET).  Prior to talking to the card for the 
first time there is a power up window and the SD card needs to be clocked for
74 clocks, 1ms, and supply ramp up time.  We've tested different chips under
various conditions and wing how much time we spend.

We have two kinds of resets.  The first is the normal reset utilized by the
normal system.  It uses tinyos constructs and is friendly to other tasks and
pieces of code running.  The mechanism uses task polls and timer polls for
seeing if the sd card has reached certian states.  40 bytes are clocked out
for the initial delay.

The other reset is a stand alone reset.  No tinyos services are used and
tight loops are used.  xxx bytes are clocked out for the initial delay.


		<--- t_pwr_on
    pwr on
    configure
    csn = 1
    n byte clocking (delay bytes)  <--- modify # of clocks
		<--- t_to_first_cmd
    send FORCE_IDLE (CMD_0)
		<---  dt = TAR - t_pwr_on


request SD (turn on), normal reset, release (turn off), then SDsa.reset.
The SDsa.reset will not take as long because we haven't bleed off pwr.


SanDisk 2G
		1st cmd		full
Normal reset:	200 uis		53 mis	 (40 delay)
SDsa.reset:	596 uis		2.3 mis  (256 delay)

SDsa.reset:	596 uis		50 mis   (256 delay)


uSD SanDisk 2G
		1st cmd		full
Normal reset:	200 uis		157 mis	 (40 delay)
SDsa.reset:	596 uis		8 mis    (256 delay)

SDsa.reset:	596 uis		154 mis   (256 delay)


Power up sequence:  (command sequence and responses)
Note: After sending any SPI command, the SD needs 8 more clocks to finish
processing and to go back to sleep.  That is why the one extra sd_get().

clocked at 8MHz.  1 byte time is 1 uS.
clocked at 4MHz.  1 byte time is 2 uS.
clocked at 1MHz.  1 byte time is 8 uS.

... pwr on
  (task)
SDS_RESET
CSN = 1
send 0xff (x 40)  (takes about 112us)

send_command
  set CS, CSN = 0
  raw_cmd()
    sd_chk_clean
    sd_cmd_crc, sets to 95 for CMD0 (GO_IDLE, FORCE_IDLE)
    dma send sd_cmd, 6
    sd_wait_dma
    returns R1 response.
    [param addr  erase crc  ill  erase  idle]  R1
    [error error seq   err  cmd  reset      ]
  sd_get(), clock 8 more bits to close transaction
  clear CS, CSN = 1


send_acmd
  set CS, CSN = 0
  sd_send_cmd55();
    rsp = sd_raw_cmd();
    tmp = sd_get();
    call HW.sd_clr_cs();
    return rsp;
  send_command
  sd_get(), clock 8 more bits to close transaction
  clear CS, CSN = 1

cmd: SD_FORCE_IDLE  (CMD0), arg: 0
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00
    <- 0xff, 0x01       (R1)

acmd: SD_GO_OP       (ACMD41), arg: 0
  SD_APP_CMD, 0, 0, 0, 0, 0xff
  55 | 0x40 (0x77), 0, 0, 0, 0, 0xff
    <- 0xff, 0x01       (R1)

  0x69, 0, 0, 0, 0, ox95    (SD_GO_OP)
    <- 0xff, 0x01       (R1)    1st iteration, still idle
    ++sd_go_op_count, repeat
    delay, 4ms

    repeats 3 times.

intermediate breakpoints
$1 = 132
$2 = 11530
$3 = 11497
$4 = 12
p SDspP__sd_go_op_count
$5 = 0x3

free run:
$6 = 132
$7 = 30954
$8 = 30921
$9 = 32
p SDspP__sd_go_op_count
$10 = 0x8

Takes about 20-32mS POR


SDsa.reset...
  start up clocks...  256 ... 561us
  SD_FORCE_IDLE (CMD0), send_command
  SD_GO_OP (ACMD41)
    129 immediate loops (~18ms)

SDsa.read(0, xxx)

  set CS
  raw_cmd, READ_BLOCK
  poll for start token, time out (was 512, bumped to 4096)
  saw 988 iterations

  read times:
           0:       4668 us     12707
           0:       3452 us
  0x00008000:       1642 us     2737
  0x00008000:       2715
  0x00010000:       1955
  0x00020000:       1955
  0x00040000:       1932
  0x00005000: w
  0x00005000:       1561 us
