
Notes on SDs:

This driver implements two mechanisms for accessing the SD.  The first
mechanism uses tinyos constructs and is friendly to other tasks and pieces
of code running.  The mechanism uses task polls and timer polls for seeing
if the sd card has reached certian states.  These interfaces are
implemented in the driver by SDread, SDwrite, and SDerase.

The 2nd access mechanism does not use any TinyOS services to do its job.
It is called StandAlone and runs to completion.  No TinyOS services are
used and tight loops are used.  We use the underlying 1usec ticker for
timing.  It is intended for special cases, when one can not count on TinyOS
services working.  In particular it is used to write out crash dumps
following a panic.  StandAlone is implemented via the interfaces SDsa and
SDraw.


* SDSC/SDHC/SDXC support:

This driver supports both SDSC and SDHC cards.  SDXC isn't supported at this
time because it uses the exFAT filesystem.  exFAT is significantly
different from the FAT32 file system used on the 2G SDSC and SDHC cards.
Further, exFAT is covered via several patents and that is problematic for
us.


* Differences:

The CCS (card capacity status) is defined for SDHC/SDXC cards and enabled
via sending CMD8 (SD_SEND_IF_CONDITION).  The Host then sets the HCS bit in
ACMD41 and the SD card will return the CCS bit in the response if HC/XC
is supported.

1) Command Argument:
   SDHC/SDXC use a 32 bit block address.
   SDSC uses the 32 bit address as a byte address.

   we always address using block addresses and shift appropriately

2) Block Length:
   SDHC/SDXC has a fixed 512 byte block length.
   SDSC can have a variable block length.  It should be set to 512 bytes
   via CMD16 to insure proper behaviour.  Doesn't currently seem to make
   a difference so we don't bother.

   Note: Block Length set in CMD16 is used by CMD42 (Lock) on the SDHC.

3) Partial Access and Misaligned Access:
   SDHC/SDXC does not support either partial or misaligned acceses.
   SDSC support both but neither is used.

4) Set Block Length
   SDHC/SDXC uses fixed 512 byte blocks.
   SDSC should set the block length to 512 bytes via CMD16 just to be sure.

5) Write Protected Group
   SDHC/SDX C do not support write-protected groups.  CMD28/29/30 fail.
   SDSC supports these groups but we don't use them.


* Resetting/Power On/Configuration:

Resetting the SD into SPI mode consists of powering up and asserting CS while
sending CMD0 (FORCE_IDLE, SD_RESET).  Prior to talking to the card for the
first time there is a power up window and the SD card needs to be clocked for
74 clocks, 1ms, and supply ramp up time (max of those).  We adhere to the 1ms
turn on time, then send 10 bytes (80 clocks).

		<--- t_pwr_on
    pwr on                      initial clock train
    configure pins.
    pwr on delay
    csn = 1
    send 10 bytes (80 clocks)

    [attempt 10 times
      send FORCE_IDLE (CMD_0)
      look for response 0x01, make sure in idle
    ]

    /* 1 says 2.7-3.6V, AA is check pattern */
    send CMD8(0x000001AA)
    rsp

    if (rsp == 0x01) {
      /* SD ver 2+, need to query to see if HC */
      read OCR[0-3], 0 is MSB
      if (OCR[2] != 1 || OCR[3] != 0xAA) continue;
    }

     [repeat with max 1 sec
       send ACMD41(1UL << 30)      /* set HCS in ACMD41 args */
     until ACMD41 returns 0 ]
     if (timeout) bail
