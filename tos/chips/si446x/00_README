This is the driver for the Silcon Labs si446x family of chips.  In
particular the si4468.  Should also work with the si4463.

The h/w interface consists of a SPI port and the following signals
CTS (clear to send, GPIO1 default configuration), IRQN (radio interrupts),
SDN (shutdown), and CSN (chip select, aka NSEL).

We use h/w CTS instead of using bus cycles.  This allows monitoring CTS
on power up as well as when sending commands to the radio chip.  Using
a h/w CTS for the handshake is just cleaner.

    si446x_irqn                 si446x_sclk
    si446x_cts                  si446x_miso
    si446x_csn  (aka nsel)      si446x_mosi
    si446x_sdn


States:

  (hw states:)
                TX      RX
    Shutdown    15ms    15ms            Full powerdown 30nA, no registers
    Standby     440us   440us           40 nA, good regs, no WUT
    Sleep       440us   440us           740 nA, good regs, WUT, 32kHz
    SPI_Active  340us   340us           1.35 mA
    Ready       100us   100us           1.8 mA
    TX          -       100us           18 mA @ +10dBm
    RX          100us   75us            10.9 mA or 13.7 mA

    TX Tune     58us    -               7.8 mA
    RX Tune     -       60us            7.6 mA

  (sw states:)

    SDN:        h/w is in shutdown state
    POR_WAIT:   h/w taken out of shutdown, waiting for the POR to complete.
    PWR_UP_WAIT:POR has completed, POWER_UP has been issued.  Waiting for
                h/w to finish.
    LOAD:       Loading configuration.


API notes:

- documentation implies that one can use either the h/w (gp1) cts or the
  s/w CTS (via CMD_READ_CMD_BUF) to obtain the value of CTS.  But they
  don't actually appear to be exactly the same.  (See notes on POWER_UP
  for at least one incongruence).

  CTS = h/w CTS pin,  CTS(sw) = s/w CTS via CMD_READ_CMD_BUF.


- POWER_UP:

  CTS 1, bring NSEL down (cs)
  CTS 1, write POWER_UP
  CTS 0, write parameters
  CTS 0, write last parameter, NSEL up (no cs)
  CTS 0, wait....   16mS

  check cts .should be 1.  (no?  panic)

Prior to Power_Up, no NIRQ (high):

  int_status:
    int_pend = 0x00, chip_pend = 0x00
  chip_status:
    chip_pend = 0x0x8

  we clear it, then read again...  Doesn't clear.  Strange.
  We then power_up and look again.

On Power_Up, we see NIRQ go low.  We see the following:

  int_status:
    int_pend = 0x4, int_status = 0x4,
        (says chip_pend interrupt)
    ph_pend = 0x0, ph_status = 0x2,
    modem_pend = 0x0, modem_status = 0x0,
    chip_pend = 0x14, chip_status = 0x14,
        (14 says State_change, chip_rdy)
    info_flags = 0x0

  chip_status:
    chip_pend = 0x14, chip_status = 0x14,
    cmd_err_status = 0x00, cmd_err_cmd_id = 0x0,
    info_flags = 0x0

- PART_INFO

  (rsp[1] << 8) | rsp[2] is part number, ie. 4468.  from RadioHead
  RH_RF24.cpp code.



Packet format:

TinyOS breaks packet buffers up into:

   Header (union of low level headers that are being used)
   Data   (application payload, defaults to 28)
   Footer (can be FCS, typically empty)
   Metadata used for various things in the stack.

A typical si446x packet buffer looks like:  (rfxlink/tinyos 154ish packet)
(both TFRAMES_ENABLED and IEEE154FRAMES_ENABLED undefined)

          len (base 10)       offset                    addr
   header:  1 len               0x00                    32d2
   ieee154  2 fcf

            1 dsn
            2 dpan
                                      2 dest    0x5
            2 dest
                                      2 src
            2 src
                                      1 length
            1 network (0x3f)            group
            1 am_type                   type
   data    28                   0x0c                    32de

   meta     1 serial.ack        0x28                    32fa

              si446x_meta
            2   rxInterval      0x28                    32fa
            1   rssi            0x2a
            1   lqi             0x2b
            1   tx_power        0x2c
            1   crc             0x2d
            1   ack             0x2e
            1   timesync        0x2f

              lpl_meta
            2   sleep_int       0x30                    3302

              ts_meta
            4   timestamp       0x32                    3304

              link_meta
            2   maxRetries      0x36                    3308
            2   retryDelay      0x38

              flags_meta
            1   flags           0x3a                    330c

The si446x chips has many configuration options that determine what the
actual packet format looks like.  These fields must be programmed properly
on both ends of the communications channel for communications to occur.


The SI443X radio driver has the following configuration options. Some of
these are set in the platforms/xxx/chips/si443x/RadioConfig.h header file,
others can be set in your Makefile.

SI443X_DEF_RFPOWER:

This is the default value of the TX POWER register. This can be changed via the
PacketTransmitPower interface provided by the SI443XActiveMessageC.

SI443X_BASE_FREQ_10MHZ:
SI443X_BASE_FREQ_KHZ:
SI443X_BASE_FREQ_MILLIHZ:

The base carrier frequency is set according to these two values. The carrier frequency is
set to (SI443X_BASE_FREQ_10MHZ * 10^7 + SI443X_BASE_FREQ_KHZ * 10^3 + SI443X_BASE_FREQ_MILLIHZ * 10^(-2) ) Hz.
Any values between 240000 kHz (240.000 MHz) and 959999 kHz (959.999 Mhz) can be given. For details, see the RadioConfig.h file.

SI443X_CHANNEL_STEP_KHZ:

This is the spacing between channels over the frequency band. The 0th channel starts
from the preset base carrier frequency, the k'th channel starts from (base carrier frequency) +
k * SI443X_CHANNEL_STEP_KHZ. The channel spacing is defined in kHz precision, minimum
value is 1 (1 kHz), maximum value is 2550 (2,55 Mhz).

SI443X_MODEM_CONFIG:

The modem is configured based on precomputed register values. These values can be found in RadioConfig.h, new config values should be
inserted there. If multiple modem configuration exist, there is a possibility to choose from them using this constant.

SI443X_DEF_CHANNEL:

This is the default value of the Frequency Hopping Channel Select register
This can be changed via the RadioChannel interface provided by the
SI443XActiveMessageC.

SI443X_BACKOFF_MIN
SI443X_BACKOFF_INIT
SI443X_BACKOFF_CONG

The minimum backoff time, the initial backoff time, and the cognestion backoff
time in microseconds for the random CSMA/CA algorithm. See the SI443XRadioP.nc.



*** getting properties

  If you ask for more than 16 consecutive, it will return zeros.  Also for the
  ones below 0x10.


*** Radio Dump Notes:

  takes about 5ms.


*** Anomalies

*** Various Command completion times:

    Time in uS after command has been issued and we start looking for CTS back up.

    In general it looks like most commands take between 24 and 25us for CTS to come
    back up.

    Commands that we've looked at include part_info, func_info, gpio_cfg_nc, fifo_info_nc,
    ph_status_nc, modem_status_nc, chip_status_nc, int_status_nc.

    Device_State and Packet_Info_Nc appear to take 0uS.  At end of the sequence in
    Dump_Radio_Full (drf).


*** Interrupts

    get_int_status:

    get_modem_status:

    get_ph_status:

    get_chip_status:




s/w vs h/w cts: h/w cts is the way to go, here is why.  s/w cts accesses the SPI bus via READ_CMD_BUFF
to get CTS.  This takes around 24 uS.  h/w cts read the status of cts on gpio1 (as programmed).  This
takes 1 uS.  Command timings get reduced approximately 20%.  h/w cts is simpler, more straight forward,
faster for commands, and probably more reliable.


command timings (drf):  (h/w cts)
{cmd = 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0},
{cmd = 1, t_cts0 = 1, t_cmd0 = 17, d_len0 = 1, t_cts_r = 6, t_reply = 110, d_reply_len = 10, t_elapsed = 147},
{cmd = 2, t_cts0 = 1, t_cmd0 = 82, d_len0 = 7, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0},
{cmd = 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0}<repeats 13 times>,
{cmd = 16, t_cts0 = 1, t_cmd0 = 17, d_len0 = 1, t_cts_r = 8, t_reply = 89, d_reply_len = 8, t_elapsed = 127},
{cmd = 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0},
{cmd = 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0},
{cmd = 19, t_cts0 = 1, t_cmd0 = 93, d_len0 = 8, t_cts_r = 24, t_reply = 99, d_reply_len = 9, t_elapsed = 230},
{cmd = 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0},
{cmd = 21, t_cts0 = 1, t_cmd0 = 28, d_len0 = 2, t_cts_r = 8, t_reply = 46, d_reply_len = 4, t_elapsed = 96},
{cmd = 22, t_cts0 = 1, t_cmd0 = 17, d_len0 = 1, t_cts_r = 6, t_reply = 47, d_reply_len = 4, t_elapsed = 84},
{cmd = 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0},
{cmd = 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0},
{cmd = 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0},
{cmd = 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0},
{cmd = 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0},
{cmd = 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0},
{cmd = 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0},
{cmd = 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0},
{cmd = 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0},
{cmd = 32, t_cts0 = 1, t_cmd0 = 50, d_len0 = 4, t_cts_r = 28, t_reply = 120, d_reply_len = 11, t_elapsed = 211},
{cmd = 33, t_cts0 = 1, t_cmd0 = 28, d_len0 = 2, t_cts_r = 21, t_reply = 47, d_reply_len = 4, t_elapsed = 108},
{cmd = 34, t_cts0 = 1, t_cmd0 = 28, d_len0 = 2, t_cts_r = 26, t_reply = 120, d_reply_len = 11, t_elapsed = 187},
{cmd = 35, t_cts0 = 2, t_cmd0 = 27, d_len0 = 2, t_cts_r = 21, t_reply = 78, d_reply_len = 7, t_elapsed = 140},
{cmd = 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0} <repeats 15 times>,
{cmd = 51, t_cts0 = 1, t_cmd0 = 17, d_len0 = 1, t_cts_r = 3, t_reply = 47, d_reply_len = 4, t_elapsed = 80},
{cmd = 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0}<repeats 203 times>,
{cmd = 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 38, t_reply = 78, d_reply_len = 7, t_elapsed = 0}

property timings (drf):
{grp: 0, t_cts0 = 1, t_cmd0 = 40, d_len0 = 4, t_cts_r = 26, t_reply = 141, d_reply_len = 13, t_elapsed = 236},
{grp: 1, t_cts0 = 1, t_cmd0 = 40, d_len0 = 4, t_cts_r = 16, t_reply = 67, d_reply_len = 6, t_elapsed = 152},
{grp: 2, t_cts0 = 1, t_cmd0 = 40, d_len0 = 4, t_cts_r = 13, t_reply = 68, d_reply_len = 6, t_elapsed = 150},
{grp: 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0}<repeats 13 times>,
{grp: 16, t_cts0 = 1, t_cmd0 = 40, d_len0 = 4, t_cts_r = 22, t_reply = 173, d_reply_len = 16, t_elapsed = 264},
{grp: 17, t_cts0 = 1, t_cmd0 = 40, d_len0 = 4, t_cts_r = 29, t_reply = 130, d_reply_len = 12, t_elapsed = 229},
{grp: 18, t_cts0 = 2, t_cmd0 = 80, d_len0 = 8, t_cts_r = 42, t_reply = 231, d_reply_len = 21, t_elapsed = 395},
{grp: 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0} <repeats 13 times>,
{grp: 32, t_cts0 = 6, t_cmd0 = 240, d_len0 = 24, t_cts_r = 160, t_reply = 1161, d_reply_len = 108, t_elapsed = 1660},
{grp: 33, t_cts0 = 3, t_cmd0 = 120, d_len0 = 12, t_cts_r = 75, t_reply = 455, d_reply_len = 42, t_elapsed = 707},
{grp: 34, t_cts0 = 1, t_cmd0 = 40, d_len0 = 4, t_cts_r = 24, t_reply = 99, d_reply_len = 9, t_elapsed = 192},
{grp: 35, t_cts0 = 1, t_cmd0 = 40, d_len0 = 4, t_cts_r = 24, t_reply = 110, d_reply_len = 10, t_elapsed = 203},
{grp: 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0}<repeats 12 times>,
{grp: 48, t_cts0 = 1, t_cmd0 = 40, d_len0 = 4, t_cts_r = 27, t_reply = 152, d_reply_len = 14, t_elapsed = 248},
{grp: 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0} <repeats 15 times>,
{grp: 64, t_cts0 = 1, t_cmd0 = 40, d_len0 = 4, t_cts_r = 27, t_reply = 110, d_reply_len = 10, t_elapsed = 206},
{grp: 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0} <repeats 15 times>,
{grp: 80, t_cts0 = 1, t_cmd0 = 40, d_len0 = 4, t_cts_r = 27, t_reply = 68, d_reply_len = 6, t_elapsed = 164},
{grp: 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0} <repeats 159 times>,
{grp: 240, t_cts0 = 1, t_cmd0 = 40, d_len0 = 4, t_cts_r = 38, t_reply = 78, d_reply_len = 7, t_elapsed = 185},
{grp: 0, t_cts0 = 0, t_cmd0 = 0, d_len0 = 0, t_cts_r = 0, t_reply = 0, d_reply_len = 0, t_elapsed = 0} <repeats 15 times>


*** Initial state after power up:  (before frr mod)

p_dump_start = 0x5cf6,
l_dump_start = 0x5cf9,
l_dump_end = 0x7d1b,
l_delta = 0x2022,
CTS_pin = 0x4,
IRQN_pin = 0x0,
SDN_pin = 0x0,
CSN_pin = 0x80,
ta0ccr3 = 0x0,
ta0cctl3 = 0x0,
part_info = {chiprev = 0x11, part_15 = 0x44, part_7 = 0x63, pbuild = 0x0, id_15 = 0x0, id_7 = 0xf, customer = 0x0, romid = 0x3},
func_info = {revext = 0x3, revbranch = 0x0, revint = 0xf, reserved0 = 0x0, reserved1 = 0x0, func = 0x1},
gpio_cfg = {gpio0 = 0xc, gpio1 = 0x8, gpio2 = 0xc, gpio3 = 0xc, nirq = 0x27, sdo = 0xb, gen_config = 0x0},
rxfifocnt = 0x0,
txfifofree = 0x40,
ph_status = {ph_pend = 0x0, ph_status = 0x2},
modem_status = {modem_pend = 0x0, modem_status = 0x0, curr_rssi = 0x0, latch_rssi = 0x0, ant1_rssi = 0x0, ant2_rssi = 0x0, afc_freq_offset15 = 0x82, afc_freq_offset7 = 0x15, info_flags = 0x0},
chip_status = {chip_pend = 0x14, chip_status = 0x14, cmd_err_status = 0x0, cmd_err_cmd_id = 0x0, info_flags = 0x0},
int_status = {int_pend = 0x4, int_status = 0x4, ph_pend = 0x0, ph_status = 0x2, modem_pend = 0x0, modem_status = 0x0, chip_pend = 0x14, chip_status = 0x14, info_flags = 0x0},
device_state = 0x3,
channel = 0x0,
frr_a = 0x4,
frr_b = 0x4,
frr_c = 0x3,
frr_d = 0x0,
packet_info_len = {0x0, 0x0},
gr00_global = {0x40, 0x0, 0x18, 0x20, 0x0, 0x0, 0x1, 0x60, 0x0, 0x0},
gr01_int = {0x4, 0x0, 0x0, 0x4},
gr02_frr = {0x1, 0x2, 0x9, 0x0},
gr10_preamble = {0x8, 0x14, 0x0, 0xf, 0x21, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
gr11_sync = {0x1, 0x2d, 0xd4, 0x2d, 0xd4},
gr12_pkt = {0x0, 0x1, 0x8, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x30, 0x0 <repeats 28 times>},
gr20_modem = {0x2, 0x80, 0x7, 0xf, 0x42, 0x40, 0x1, 0xc9, 0xc3, 0x80, 0x0, 0x6, 0xd3, 0x0, 0x0, 0x67, 0x60, 0x4d, 0x36, 0x21, 0x11, 0x8, 0x3, 0x1, 0x1, 0x0, 0x8, 0x3, 0xc0, 0x0, 0x10, 0x20, 0x0, 0x0, 0x0, 0x4b, 0x6, 0xd3, 0xa0, 0x6, 0xd3, 0x2, 0xc0, 0x0, 0x0, 0x23, 0x83, 0x69, 0x0, 0x40, 0xa0, 0x0, 0x0, 0xe0, 0x0, 0x0, 0x11, 0x10, 0x10, 0xb, 0x1c, 0x40, 0x0, 0x0, 0x2b, 0xc, 0xa4, 0x3, 0x56, 0x2, 0x0, 0xa3, 0x2, 0x80, 0xff, 0xc, 0x1, 0x0, 0x32, 0x3, 0x0, 0x8},
gr21_modem = {0xff, 0xba, 0xf, 0x51, 0xcf, 0xa9, 0xc9, 0xfc, 0x1b, 0x1e, 0xf, 0x1, 0xfc, 0xfd, 0x15, 0xff, 0x0, 0xf, 0xff, 0xc4, 0x30, 0x7f, 0xf5, 0xb5, 0xb8, 0xde, 0x5, 0x17, 0x16, 0xc, 0x3, 0x0, 0x15, 0xff, 0x0, 0x0},
gr22_pa = {0x8, 0x7f, 0x0, 0x5d, 0x0, 0x23},
gr23_synth = {0x2c, 0xe, 0xb, 0x4, 0xc, 0x73, 0x3, 0x5},
gr30_match = 0x33ac,
gr40_freq_ctl = {0x3c, 0x8, 0x0, 0x0, 0x0, 0x0, 0x20, 0xff},
gr50_hop = 0x33ac,
grF0_pti = 0x33ac}


*** State after Load_Config:

p_dump_start = 0x96eb,
l_dump_start = 0x96ee,
l_dump_end = 0xb70a,
l_delta = 0x201c,
CTS_pin = 0x4,
IRQN_pin = 0x10,
SDN_pin = 0x0,
CSN_pin = 0x80,
ta0ccr3 = 0x0,
ta0cctl3 = 0x0,
part_info = {chiprev = 0x11, part_15 = 0x44, part_7 = 0x63, pbuild = 0x0, id_15 = 0x0, id_7 = 0xf, customer = 0x0, romid = 0x3},
func_info = {revext = 0x3, revbranch = 0x0, revint = 0xf, reserved0 = 0x0, reserved1 = 0x0, func = 0x1},
gpio_cfg = {gpio0 = 0x8, gpio1 = 0x8, gpio2 = 0x8, gpio3 = 0x8, nirq = 0xa7, sdo = 0xb, gen_config = 0x0},
rxfifocnt = 0x0,
txfifofree = 0x40,
ph_status = {ph_pend = 0x0, ph_status = 0x2},
modem_status = {modem_pend = 0x0, modem_status = 0x0, curr_rssi = 0x4, latch_rssi = 0x0, ant1_rssi = 0x0, ant2_rssi = 0x0, afc_freq_offset15 = 0x82, afc_freq_offset7 = 0x15, info_flags = 0x0},
chip_status = {chip_pend = 0x0, chip_status = 0x14, cmd_err_status = 0x0, cmd_err_cmd_id = 0x0, info_flags = 0x0},
int_status = {int_pend = 0x0, int_status = 0x0, ph_pend = 0x0, ph_status = 0x2, modem_pend = 0x0, modem_status = 0x0, chip_pend = 0x0, chip_status = 0x14, info_flags = 0x0},
device_state = 0x3,
channel = 0x0,
frr = {0x3, 0x0, 0x0, 0x0},
packet_info_len = {0x0, 0x0},

gr00_global = {0x52, 0x0, 0x18, 0x60, 0x0, 0x0, 0x1, 0x60, 0x0, 0x0},
  global_xo_tune,       0x52 (0x40)
  global_clk_cfg,       0x00, (0x00)
  global_low_batt_thresh 0x18 (0x18)
  global_config,        0x60 (0x60), SEQUENCER_MODE 1 (FAST), FIFO_MODE 0 (SPLIT), PROTOCOL 0 (0), POWER_MODE 0 (HIGH_PERF)
  global_wut_config,    0x00 (0x00)
  global_wut_m,         0x0001 (0x0001)
  global_wut_r,         0x60 (0x60)
  global_wut_ldc,       0x00 (0x00)
  global_wut_cal,       0x00 (0x00)

gr01_int = {0x0, 0x0, 0x0, 0x4},
  int_ctl_enable,       0x00 (0x04), CHIP_INT_STATUS_EN 0, MODEM_INT_STATUS_EN 0, PH_INT_STATUS_EN 0
  int_ctl_ph_enable,    0x00 (0x00)
  int_ctl_modem_enable, 0x00 (0x00)
  int_ctl_chip_enable,  0x04 (0x04)

gr02_frr = {0x9, 0x4, 0x6, 0x8},
  frr_ctl (a, b, c, d), 0x9, 0x4, 0x6, 0x8, (0x1, 0x2, 0x9, 0x00)  STATE, PH, MODEM, CHIP pending

                 tx_len
                      config_std_1
                            config_nstd
                                 std_2
                                       config
                                             pattern          |  postamble_config
                                                                      pattern          |
gr10_preamble = {0x8, 0x14, 0x0, 0xff, 0x31, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
                (0x8, 0x14, 0x0, 0x0f, 0x21, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)

  preamble_config,      0x31 (0x21), PREAM_FIRST_1_OR_0 (1), LENGTH_CONFIG 1 (BYTES), MAN_CONST 0, MAN_ENABLE 0, STANDARD_PREAM 1 (PRE_1010)
  postamble_config,     0x00

gr11_sync = {0x1, 0xb4, 0x2b, 0x0, 0x0},
            (0x1,

  sync_config,  0x01, SKIP_TX 0, RX_ERRORS 0, 4FSK 0, MANCH 0, LENGTH 1 (2 byte sync)
  sync_bits,    0xb4, 0x2b, 0x00, 0x00

gr12_pkt = {0x85, 0x1, 0x8, 0xff, 0xff, 0x0, 0x82, 0x0, 0x2a, 0x1, 0x0, 0x30, 0x30, 0x0, 0x1, 0x4, 0xa2, 0x0, 0x0},
gr12a_pkt = {0x0, 0x1, 0x4, 0x82, 0x0, 0x81, 0x0, 0xa, 0x0, 0x0},

  (needs update)

  pkt_crc_config 0x1200, 0x85 (0x00), CRC_SEED all ones, CRC_POLY CRC_CCITT_16
  pkt_wht_poly   0x1201, 0x0108 (0x0108)
  pkt_wht_seed   0x1203, 0xffff (0xffff)
  pkt_wht_bitnum 0x1205, 0x00   (0x00)
  pkt_config1    0x1206, 0x02 (0x00), CRC_ENDIAN (MSB), BIT_ORDER (MSB)
                               has PH_RX_DISABLE, 4FSK_EN, MANCH_POL, CRC_INVERT
                 0x1207, 0x00, reserved
  pkt_len        0x1208, 0x2a, (0x00) BIG_ENDIAN, LEN (1 byte), IN_FIFO (LEAVE_IN), DST (Field 2)
                                      ENDIAN, SIZE, IN_FIFO, DST_FIELD

  pkt_len_field_source
                 0x1209, 0x01, field 1 is the length.
  pkt_len_adjust 0x120a, 0x00
  pkt_tx_thres   0x120b, 0x30
  pkt_rx_thres   0x120c, 0x30

  pkt_f_1_len    0x120d, 0x0001
  pkt_f_1_config 0x120f, 0x04, no 4FSK, PN_START, no WHITEN, no MANCH
  pkt_f_1_crc    0x1210, 0x82, CRC_START, no SEND_CRC, no CHECK_CRC, CRC_ENABLE

  pkt_f_2_len    0x1211, 0x003f
  pkt_f_2_config 0x1213, 0x00, no 4FSK, no PN_START, no WHITEN, no MANCH
  pkt_f_2_crc    0x1214, 0x2a, SEND_CRC, CHECK_CRC, CRC_ENABLE

  pkt_f_3_len    0x1215, 0x0000 (disabled)


gr20_modem = {0x3, 0x0, 0x7, 0xf, 0x42, 0x40, 0x9, 0xc9, 0xc3, 0x80, 0x0, 0x1b, 0x4f, 0x0, 0x0, 0x67, 0x60, 0x4d, 0x36, 0x21, 0x11, 0x8, 0x3, 0x1, 0x1, 0x80, 0x8, 0x3, 0x80, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0xc8, 0x2, 0x8f, 0x5c, 0x1, 0x48, 0x2, 0xc2, 0x0, 0x4, 0x36, 0x80, 0x92, 0xa, 0x46, 0x80, 0x0, 0x0, 0xe2, 0x0, 0x0, 0x11, 0x2c, 0x2c, 0x0, 0x1a, 0xff, 0xff, 0x0, 0x29, 0xc, 0xa4, 0x2, 0xd6, 0x83, 0x1, 0x7f, 0x1, 0x80, 0xff, 0xc, 0x1, 0x0, 0x40, 0x3, 0x0, 0xa},

gr20_modem = {
  modem_mod_type        0x3 (0x2), SYNC, GPIO0, PACKET (FIFO), MOD_TYPE 2GFSK
  modem_map_control     0x0 (0x80),
  modem_dsm_ctrl        0x7 (0x07),
  modem_data_rate       0xf, 0x42, 0x40, (0x0f4240 = 0d1,000,000)
  modem_tx_nco_mode     0x9, 0xc9, 0xc3, 0x80,  TXOSR = 2 (/40? /20), NCOMOD = 0x1c9c380 = 0d 30,000,000
  modem_freq_dev        0x0, 0x1b, 0x4f, (0x0006d3)
  modem_freq_offset     0x0, 0x0, (0x0000)
  modem_tx_filter_coeff 0x67, 0x60, 0x4d, 0x36, 0x21, 0x11, 0x8, 0x3, 0x1, (0x67, 0x60, 0x4d, 0x36, 0x21, 0x11, 0x8, 0x3, 0x1)
  modem_tx_ramp_delay   0x1, (0x01)
  modem_mdm_ctrl        0x80 (0x00), PH_SRC_SEL (input from detector's output)
  modem_if_control      0x08 (0x08), FIXIF
  modem_if_freq         0x3, 0x80, 0x0, (0x03c000)
  modem_deci_cfg1       0x0 (0x10),
  modem_deci_cfg0       0x10 (0x20),
    (20, 21)            0x00, 0x00
22modem_bcr_ocr         0x00, 0xc8,
  modem_bcr_nco_offset  0x02, 0x8f, 0x5c, (0x06d3a0)
  modem_bcr_gain        0x01, 0x48, (0x06d3)
  modem_bcr_gear        0x02 (0x02),
  modem_bcr_misc1       0xc2 (0xc0),
  modem_bcr_misc0       0x00 (0x00),
  modem_afc_gear        0x04 (0x00),
  modem_afc_wait        0x36 (0x23),
  modem_afc_gain        0x80, 0x92, (0x8369)

?????
30modem_afc_limiter     0x0a, 0x46, (0x0040)
  modem_afc_misc        0x80, (a0)
  modem_afc_zifoff      0x00, (00)
  modem_adc_ctrl        0x00, (00)
  modem_agc_control     0xe2, (e0)
  modem_agc_window_sz   0x0, 0x0, 0x11, 0x2c, 0x2c, 0x0, 0x1a, 0xff, 0xff, 0x0, 0x29, 0xc, 0xa4, 0x2, 0xd6, 0x83, 0x1, 0x7f, 0x1, 0x80,

4amodem_rssi_thres      0xff (0xff),
  modem_rssi_jump_thres 0x0c (0x0c)
  modem_rssi_control    0x01 (0x01), no CHECK, no AVERAGE, LATCH
  modem_rssi_control2   0x00 (0x00),
  modem_rssi_comp       0x40 (0x32),

 0x3, 0x0, 0xa},


gr21_modem = {0xff, 0xc4, 0x30, 0x7f, 0xf5, 0xb5, 0xb8, 0xde, 0x5, 0x17, 0x16, 0xc, 0x3, 0x0, 0x15, 0xff, 0x0, 0x0, 0xff, 0xc4, 0x30, 0x7f, 0xf5, 0xb5, 0xb8, 0xde, 0x5, 0x17, 0x16, 0xc, 0x3, 0x0, 0x15, 0xff, 0x0, 0x0},

gr22_pa = {0x8, 0x7f, 0x0, 0x3d, 0x0, 0x23},
gr22_pa = {
  pa_mode       0x08 (0x08), EXT_PA_RAMP 0, PA_SEL 2 (HP_COARSE), PA_MODE 0 (class E or sq wave match)
  pa_pwr_lvl    0x7f (0x7f), max
  pa_bias_clkduty 0x00 (0x00),
  pa_tc         0x3d (0x5d), FSK_MOD_DLY 6us, TC 0x1d
  pa_ramp_ex    0x00 (0x80),
  pa_ram_down_delay
                0x23 (0x23)
},

gr23_synth = {0x2c, 0xe, 0xb, 0x4, 0xc, 0x73, 0x3, 0x5},

gr30_match = 0x33ae,

gr40_freq_ctl = {0x38, 0xd, 0xdd, 0xdd, 0x44, 0x44, 0x20, 0xfe},

gr50_hop = 0x33ae,

grF0_pti = 0x33ae}




*** RadioHead RH_RF24 initialization
    grabed from git version 1.49

        0x07, RF_POWER_UP,
        0x08, RF_GPIO_PIN_CFG,
        0x05, RF_GLOBAL_XO_TUNE_1,
        0x05, RF_GLOBAL_CONFIG_1,
        0x06, RF_INT_CTL_ENABLE_2,
        0x08, RF_FRR_CTL_A_MODE_4,
        0x0D, RF_PREAMBLE_TX_LENGTH_9,
        0x09, RF_SYNC_CONFIG_5,
        0x05, RF_PKT_CRC_CONFIG_1,

        0x08, RF_PKT_WHT_SEED_15_8_4,
                ff ff 00 02
                         pkt_config1, CRC_ENDIAN MSB

        0x10, RF_PKT_LEN_12,
        0x10, RF_PKT_FIELD_2_CRC_CONFIG_12,
        0x05, RF_PKT_FIELD_5_CRC_CONFIG_1,
        0x10, RF_MODEM_MOD_TYPE_12,
        0x05, RF_MODEM_FREQ_DEV_0_1,
        0x0C, RF_MODEM_TX_RAMP_DELAY_8,
        0x0D, RF_MODEM_BCR_OSR_1_9,
        0x0B, RF_MODEM_AFC_GEAR_7,
        0x05, RF_MODEM_AGC_CONTROL_1,
        0x0D, RF_MODEM_AGC_WINDOW_SIZE_9,
        0x0F, RF_MODEM_OOK_CNT1_11,
        0x05, RF_MODEM_RSSI_COMP_1,
        0x05, RF_MODEM_CLKGEN_BAND_1,
        0x10, RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12,
        0x10, RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12,
        0x10, RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12,
        0x08, RF_PA_MODE_4,
        0x0B, RF_SYNTH_PFDCP_CPFF_7,
        0x10, RF_MATCH_VALUE_1_12,
        0x0C, RF_FREQ_CONTROL_INTE_8,
        0x00

    uint8_t int_ctl[] = {RH_RF24_MODEM_INT_STATUS_EN | RH_RF24_PH_INT_STATUS_EN, 0xff, 0xff, 0x00 };
    set_properties(RH_RF24_PROPERTY_INT_CTL_ENABLE, int_ctl, sizeof(int_ctl));

    uint8_t pkt_config1[] = { 0x00 };
    set_properties(RH_RF24_PROPERTY_PKT_CONFIG1, pkt_config1, sizeof(pkt_config1));
       switch CRC_ENDIAN to LSB (note BIT_ORDER is MSB).

    uint8_t pkt_len[] = { 0x02, 0x01, 0x00 };
    set_properties(RH_RF24_PROPERTY_PKT_LEN, pkt_len, sizeof(pkt_len));
       02       PKT_LEN, little endian len, byte, cut_out, dst field 2
          01    PKT_LEN_FIELD_SRC, 1
             00 PKT_LEN_ADJUST

    uint8_t pkt_field1[] = { 0x00, 0x01, 0x00, RH_RF24_FIELD_CONFIG_CRC_START |
                RH_RF24_FIELD_CONFIG_SEND_CRC | RH_RF24_FIELD_CONFIG_CHECK_CRC |
                RH_RF24_FIELD_CONFIG_CRC_ENABLE };
    set_properties(RH_RF24_PROPERTY_PKT_FIELD_1_LENGTH_12_8, pkt_field1, sizeof(pkt_field1));
       00 01    field 1, length 1
             00 PKT_FIELD_1_CONFIG, no 4FSK, no PN_START, no WHITEN, no MANCH
                AA, crc_start, send_crc, check_crc, crc_enable

    uint8_t pkt_field2[] = { 0x00, sizeof(_buf), 0x00, RH_RF24_FIELD_CONFIG_CRC_START | RH_RF24_FIELD_CONFIG_SEND_CRC | RH_RF24_FIELD_CONFIG_CHECK_CRC | RH_RF24_FIELD_CONFIG_CRC_ENABLE };
    set_properties(RH_RF24_PROPERTY_PKT_FIELD_2_LENGTH_12_8, pkt_field2, sizeof(pkt_field2));

    // Clear all other fields so they are never used, irrespective of the radio_config
    uint8_t pkt_fieldn[] = { 0x00, 0x00, 0x00, 0x00 };
    set_properties(RH_RF24_PROPERTY_PKT_FIELD_3_LENGTH_12_8, pkt_fieldn, sizeof(pkt_fieldn));
    set_properties(RH_RF24_PROPERTY_PKT_FIELD_4_LENGTH_12_8, pkt_fieldn, sizeof(pkt_fieldn));
    set_properties(RH_RF24_PROPERTY_PKT_FIELD_5_LENGTH_12_8, pkt_fieldn, sizeof(pkt_fieldn));

    // The following can be changed later by the user if necessary.
    // Set up default configuration
    setCRCPolynomial(CRC_16_IBM);
    uint8_t syncwords[] = { 0x2d, 0xd4 };
    setSyncWords(syncwords, sizeof(syncwords)); // Same as RF22's
    // Reasonably fast and reliable default speed and modulation
    setModemConfig(GFSK_Rb5Fd10);
    // 3 would be sufficient, but this is the same as RF22's
    // actualy, 4 seems to work much better for some modulations
    setPreambleLength(4);
    // An innocuous ISM frequency, same as RF22's
    setFrequency(434.0);
    // About 2.4dBm on RFM24:
    setTxPower(0x10);


    set_properties(RH_RF24_PROPERTY_PKT_FIELD_2_LENGTH_7_0, l, sizeof(l));
    set_properties(RH_RF24_PROPERTY_PREAMBLE_TX_LENGTH, config, sizeof(config));
	return set_properties(RH_RF24_PROPERTY_PKT_CRC_CONFIG, config, sizeof(config));
    set_properties(RH_RF24_PROPERTY_SYNC_CONFIG, config, sizeof(config));
    if (!set_properties(RH_RF24_PROPERTY_MODEM_CLKGEN_BAND, modem_clkgen, sizeof(modem_clkgen)))
    return set_properties(RH_RF24_PROPERTY_FREQ_CONTROL_INTE, freq_control, sizeof(freq_control));
	set_properties(RH_RF24_PROPERTY_PKT_FIELD_2_LENGTH_7_0, l, sizeof(l));
    set_properties(RH_RF24_PROPERTY_PA_MODE, power_properties, sizeof(power_properties));
    _spi.transfer(RH_RF24_PROPERTY_FRR_CTL_A_MODE + reg);


*** Configuration from Si446x_Examples/Si4463:
    Dorji DRF4463F, R5f211B4 MCU, SI4463
    425MHz, 1.2K bps,  3K Deviation,  enable AFC , CRC and PH + FiFo mode., fixed data


As defined:  (some defined then not used, bastards)

RF_POWER_UP_data[] = 			   	{ RF_POWER_UP};
                0x02, 0x01, 0x00, 0x01, 0xC9, 0xC3, 0x80
RF_FRR_CTL_A_MODE_4_data[] = 		   	{ RF_FRR_CTL_A_MODE_4};
                0x11, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00
RF_MODEM_AGC_CONTROL_1_data[] = 		{ RF_MODEM_AGC_CONTROL_1};
                0x11, 0x20, 0x01, 0x35, 0xE2
RF_MODEM_MOD_TYPE_12_data[16]                   = {0x11, 0x20, 0x0C, 0x00,0x03, 0x00, 0x07, 0x00, 0x12, 0xC0, 0x04, 0x2D, 0xC6, 0xC0, 0x00, 0x00};
RF_MODEM_TX_RAMP_DELAY_8_data[12]               = {0x11, 0x20, 0x08, 0x18,0x01, 0x80, 0x08, 0x03, 0x80, 0x00, 0x70, 0x20};
RF_MODEM_BCR_OSR_1_9_data[13]                   = {0x11, 0x20, 0x09, 0x22,0x03, 0x0D, 0x00, 0xA7, 0xC6, 0x00, 0x54, 0x02, 0xC2};
RF_MODEM_AFC_GEAR_7_data[13]                    = {0x11, 0x20, 0x07, 0x2C,0x04, 0x36, 0x80, 0x03, 0x30, 0xAF, 0x80};
RF_MODEM_AGC_WINDOW_SIZE_9_data[13]             = {0x11, 0x20, 0x09, 0x38,0x11, 0xAB, 0xAB, 0x00, 0x1A, 0x14, 0x00, 0x00, 0x2B};
RF_MODEM_OOK_CNT1_11_data[15]                   = {0x11, 0x20, 0x0B, 0x42,0xA4, 0x02, 0xD6, 0x83, 0x00, 0xAD, 0x01, 0x80, 0xFF, 0x0C, 0x00};
RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data[16]  = {0x11, 0x21, 0x0C, 0x00,0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5, 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C};
RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data[16]   = {0x11, 0x21, 0x0C, 0x0C,0x03, 0x00, 0x15, 0xFF, 0x00, 0x00, 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5};
RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data[16]   = {0x11, 0x21, 0x0C, 0x18,0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C, 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00};
RF_SYNTH_PFDCP_CPFF_7_data[11]                  = {0x11, 0x23, 0x07, 0x00,0x2C, 0x0E, 0x0B, 0x04, 0x0C, 0x73, 0x03};


RF_POWER_UP     0x02, 0x01, 0x00, 0x01, 0xC9, 0xC3, 0x80
                EZRadioPro mode (b1 0x01), 30MHz

gpio            0x13 0x14 0x02 0x21 0x20 0x27 0x0b
                       |    |    |    |    |    |---- SDO (default)
                       |    |    |    |    |--------- NIRQ (default)
                       |    |    |    |-------------- TX_STATE
                       |    |    |------------------- RX_STATE
                       |    |------------------------ Drive0
                       |----------------------------- Rx_Data

freq_adjust     0x11 0x00 0x01 0x00 98                          prop 0000
                tune_value = 98 (base 10), default 64

rf_global       0x11 0x00 0x01 0x03 0x40                        prop 0003
                global_config: 0x40 sequencer fast

frr             0x11 0x02 0x04 0x00 0x00 0x00 0x00 0x00         prop 0200
                A, B, C, D: all disabled.

preamble        0x11 0x10 0x09 0x00 0x08 0x14 0x00 0x0f 0x31 0x0 0x00 0x00 0x00  prop 1000
                preamble_tx_length: 0x08
                preamble_config_std_1: rx_thresh 0x14, no skip_sync_timeout

sync            0x11 0x11 0x05 0x00 0x01 0x2d 0xd4 0x00 0x00    prop 1100
                sync_config: 0x01, sync word tx, 0 rx_errors, no 4GSK, no Manchester, Len 2 bytes
                sync: 0x2d 0xd4

crc             0x11 0x12 0x01 0x00 0x81                        prop 1200
                pkt_crc_config: 0x81, crc_seed 1s, ITU_T_CRC8

pkt_config1     0x11 0x12 0x01 0x06 0x02                        prop 1206
                pkt_config1: 0x02 fields shard, rx_enabled, no 4FSK, CRC msb first, bit_order: msb first

pkt_len         0x11 0x12 0x03 0x08 0x00 0x00 0x00              prop 1208
                pkt_len: 0x00 disabled.
                pkt_len_field_src: 0
                pkt_len_adjust:    0

f_len_1         0x11 0x12 0x0c 0x0d 0x00 0x0e 0x04 0xaa 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
                f1_len: 0x000e (14)  (fixed length)
                f1_config: 0x04
                f1_crc_config: 0xaa, crc_start,send_crc, check_crc,crc_enable
                f2_len: 0 disabled
                f3_len: 0 disabled

f_len_4         0x11 0x12 0x08 0x19 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
                f4_len: 0 disabled
                f5_len: 0 disabled

RF_MODEM_MOD_TYPE_12_data
                0x11, 0x20, 0x0C, 0x00,
    mod_type:    0x03, packet (fifo), 2GFSK (mode 3)
    map_control: 0x00, default (0)
    dsm_control: 0x07, default (7)
    data_rate:   0x00, 0x12, 0xC0,              (4800)
    tx_nco_mode: 0x04, 0x2D, 0xC6, 0xC0,
        txosr:   1, 40x    ncomod: 002dc6c0 (3x10^6)
    freq_div:    0x00, 0x00, 0x5e       (94)

RF_MODEM_TX_RAMP_DELAY_8_data
                0x11, 0x20, 0x08, 0x18,0x01, 0x80, 0x08, 0x03, 0x80, 0x00, 0x70, 0x20
    tx_ramp_dly 0x01, (default)
    mdm_control 0x80, pr_src_sel (detector output)
    if_control  0x08, zero-if mode, scaled if
    if_freq     03 80 00, (229376)
    decimation_cfg1: 0x70 (ndec2 1, ndec1 3, ndec0 0)
                        NDEC0 should be set to 0 when not in OOK mode.
    decimation_cfg0: 0x20 (default),
                        dwn3byp: Bypass the decimate-by-3 polyphase filter

RF_MODEM_BCR_OSR_1_9_data
                0x11 0x20 0x09 0x22 0x03 0x0D 0x00 0xA7 0xC6 0x00 0x54 0x02 0xC2
    bcr_osr:        rxosr 0x030d  (781)
    bcr_nco_offset: 00 a7 c6   (42950)
    bcr_gain:       00 54
    bcr_gear:       02          crfast: 0, crslow: 2 (default)
    bcr_misc1:      c2          BCRFBBYP (1 disabled), SLICEFBBYP (1, disabled)
                                RXNCOCOMP (0, disabled), RXCOMP_LAT (SAMP_PREAMBLE_END)
                                CRGAINX2, (0, NORMAL), DIS_MIDPT (1, DISABLED)
                                ESC_MIDPT (0, ESC_1CLK)

RF_MODEM_AFC_GEAR_7_data
                0x11 0x20 0x07 0x2C,0x04 0x36 0x80 0x03 0x30 0xAF 0x80

RF_MODEM_AGC_CONTROL_1_data
                0x11 0x20 0x01 0x35 0xE2

RF_MODEM_AGC_WINDOW_SIZE_9_data
                0x11 0x20 0x09 0x38 0x11 0xAB 0xAB 0x00 0x1A 0x14 0x00 0x00 0x2B

RF_MODEM_OOK_CNT1_11_data
                11 20 0B 42 A4 02 D6 83 00 AD 01 80 FF 0C 00
                11 20 01 4e 40

RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data
                11 21 0C 00 FF C4 30 7F F5 B5 B8 DE 05 17 16 0C

RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data
                11 21 0C 0C 03 00 15 FF 00 00 FF C4 30 7F F5 B5

RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data
                11 21 0C 18 B8 DE 05 17 16 0C 03 00 15 FF 00 00
                11 22 04 00 08 7e 00 3d

RF_SYNTH_PFDCP_CPFF_7_data
                11 23 07 00 2C 0E 0B 04 0C 73 03

RF_MATCH_VALUE_1_12
                11 30 0c 00 's' ff 40 'w' ff 01 'w' ff 02 'x' ff 03
    value1: 's'                        value2: 'w'
    mask1:  ff                         mask2:  ff
    ctrl1:  40 match_en, offset: 0     ctrl2:  01, offset 1

    value3: 'w'                        value4: 'x'
    mask3:  ff                         mask4:  ff
    ctrl3:  03, offset 2               ctrl4:  offset: 3

rf_init_freq:

0x11 0x20 0x01 0x51 0x0a
0x11 0x40 0x08 0x00 0x38 0x0e 0x66 0x66 step_500K_step1 step_500K_step0 0x20 0xfe
                                        0x88            0x89


*** Configuration from Si446x_Examples/Si446x_StandardPacketRX
 * @n WDS GUI Version: 3.2.9.0
 * @n Device: Si4463 Rev.: B1                                 

// Crys_freq(Hz): 30000000    Crys_tol(ppm): 10    IF_mode: 2    High_perf_Ch_Fil: 1    OSRtune: 0    Ch_Fil_Bw_AFC: 0    ANT_DIV: 0    PM_pattern: 0    
// MOD_type: 2    Rsymb(sps): 10000    Fdev(Hz): 20000    RXBW(Hz): 150000    Manchester: 0    AFC_en: 0    Rsymb_error: 0.0    Chip-Version: 2    
// RF Freq.(MHz): 433    API_TC: 29    fhst: 250000    inputBW: 0    BERT: 0    RAW_dout: 0    D_source: 0    Hi_pfm_div: 1    
// 
// # RX IF frequency is  -468750 Hz
// # WB filter 2 (BW =  68.71 kHz);  NB-filter 2 (BW = 68.71 kHz)
// 
// Modulation index: 4


        0x07, RF_POWER_UP, \
#define RF_POWER_UP 0x02, 0x01, 0x00, 0x01, 0xC9, 0xC3, 0x80

        0x08, RF_GPIO_PIN_CFG, \
#define RF_GPIO_PIN_CFG 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

        0x06, RF_GLOBAL_XO_TUNE_2, \
#define RF_GLOBAL_XO_TUNE_2 0x11, 0x00, 0x02, 0x00, 0x52, 0x01

        0x05, RF_GLOBAL_CONFIG_1, \
#define RF_GLOBAL_CONFIG_1 0x11, 0x00, 0x01, 0x03, 0x60
        global_config: 0x60, reserved, fast, generic, high perf

        0x06, RF_INT_CTL_ENABLE_2, \
#define RF_INT_CTL_ENABLE_2 0x11, 0x01, 0x02, 0x00, 0x01, 0x18
        int_ctl_enable: 01, ph_int
        int_ctl_ph_enable: 0x18, packet_rx, crc_error

        0x08, RF_FRR_CTL_A_MODE_4, \
#define RF_FRR_CTL_A_MODE_4 0x11, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00
        frr_a: disabled
        frr_b: disabled
        frr_c: disabled
        frr_d: disabled

        0x05, RF_PREAMBLE_CONFIG_1, \
#define RF_PREAMBLE_CONFIG_1 0x11, 0x10, 0x01, 0x04, 0x31
        preamble_config: 0x31, first_1, byte, standard preamble
        (default preamble_tx_len 0x8, rx_thres: 0x14 bits)

        0x07, RF_SYNC_CONFIG_3, \
#define RF_SYNC_CONFIG_3 0x11, 0x11, 0x03, 0x00, 0x01, 0xB4, 0x2B
        sync_config: 0x01, 2 bytes
        sync_bits: 0xb4, 0x2b

[pkt_crc_config default (1200) 0x00, 0 seed, no_crc]

        0x05, RF_PKT_CONFIG1_1, \
#define RF_PKT_CONFIG1_1 0x11, 0x12, 0x01, 0x06, 0x02
        pkt_config1: 0x02, crc bigendian, bit_order bigendian

[pkt_len, (1208) default 0x00 no variable length, dst_field 0
 pkt_len_field_src, (1209) default 0x00
 pkt_len_adjust,    (120a) default 0x00
 pkt_f1_length,     (120d) default 0x0000

        0x05, RF_PKT_FIELD_1_CONFIG_1, \
#define RF_PKT_FIELD_1_CONFIG_1 0x11, 0x12, 0x01, 0x0F, 0x04
        f1_config: 0x04, pn_start

[pkt_f1_crc_config, (1210) default 0x00,  crc disabled.

        0x10, RF_MODEM_MOD_TYPE_12, \
#define RF_MODEM_MOD_TYPE_12 0x11, 0x20, 0x0C, 0x00, 0x02, 0x00, 0x07, 0x01, 0x86, 0xA0, 0x01, 0xC9, 0xC3, 0x80, 0x00, 0x05

        0x05, RF_MODEM_FREQ_DEV_0_1, \
#define RF_MODEM_FREQ_DEV_0_1 0x11, 0x20, 0x01, 0x0C, 0x76

        0x0C, RF_MODEM_TX_RAMP_DELAY_8, \
#define RF_MODEM_TX_RAMP_DELAY_8 0x11, 0x20, 0x08, 0x18, 0x01, 0x80, 0x08, 0x03, 0x80, 0x00, 0x20, 0x10

        0x0D, RF_MODEM_BCR_OSR_1_9, \
#define RF_MODEM_BCR_OSR_1_9 0x11, 0x20, 0x09, 0x22, 0x00, 0xFA, 0x02, 0x0C, 0x4A, 0x01, 0x06, 0x02, 0xC2

        0x0B, RF_MODEM_AFC_GEAR_7, \
#define RF_MODEM_AFC_GEAR_7 0x11, 0x20, 0x07, 0x2C, 0x04, 0x36, 0x80, 0x1D, 0x0D, 0x58, 0x80

        0x05, RF_MODEM_AGC_CONTROL_1, \
#define RF_MODEM_AGC_CONTROL_1 0x11, 0x20, 0x01, 0x35, 0xE2

        0x0D, RF_MODEM_AGC_WINDOW_SIZE_9, \
#define RF_MODEM_AGC_WINDOW_SIZE_9 0x11, 0x20, 0x09, 0x38, 0x11, 0x37, 0x37, 0x00, 0x02, 0xFF, 0xFF, 0x00, 0x29

        0x0D, RF_MODEM_OOK_CNT1_9, \
#define RF_MODEM_OOK_CNT1_9 0x11, 0x20, 0x09, 0x42, 0xA4, 0x02, 0xD6, 0x83, 0x01, 0xFF, 0x01, 0x80, 0xFF

        0x05, RF_MODEM_RSSI_CONTROL_1, \
#define RF_MODEM_RSSI_CONTROL_1 0x11, 0x20, 0x01, 0x4C, 0x00

        0x05, RF_MODEM_RSSI_COMP_1, \
#define RF_MODEM_RSSI_COMP_1 0x11, 0x20, 0x01, 0x4E, 0x40

        0x05, RF_MODEM_CLKGEN_BAND_1, \
#define RF_MODEM_CLKGEN_BAND_1 0x11, 0x20, 0x01, 0x51, 0x0A

        0x10, RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12, \
#define RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12 0x11, 0x21, 0x0C, 0x00, 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5, 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C

        0x10, RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12, \
#define RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12 0x11, 0x21, 0x0C, 0x0C, 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00, 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5

        0x10, RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12, \
#define RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12 0x11, 0x21, 0x0C, 0x18, 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C, 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00

        0x05, RF_PA_TC_1, \
#define RF_PA_TC_1 0x11, 0x22, 0x01, 0x03, 0x3D

        0x0B, RF_SYNTH_PFDCP_CPFF_7, \
#define RF_SYNTH_PFDCP_CPFF_7 0x11, 0x23, 0x07, 0x00, 0x2C, 0x0E, 0x0B, 0x04, 0x0C, 0x73, 0x03

        0x0C, RF_FREQ_CONTROL_INTE_8, \
#define RF_FREQ_CONTROL_INTE_8 0x11, 0x40, 0x08, 0x00, 0x38, 0x0D, 0xDD, 0xDD, 0x44, 0x44, 0x20, 0xFE


  si446x_start_rx(channel, 0u, RadioConfiguration.Radio_PacketLength,
                  SI446X_CMD_START_RX_ARG_NEXT_STATE1_RXTIMEOUT_STATE_ENUM_NOCHANGE,
                  SI446X_CMD_START_RX_ARG_NEXT_STATE2_RXVALID_STATE_ENUM_RX,
                  SI446X_CMD_START_RX_ARG_NEXT_STATE3_RXINVALID_STATE_ENUM_RX );


*** Configuration from Si446x_Examples/Si4468_802_15_4g_BidirectionalPacket
 * @n WDS GUI Version: 3.2.9.0
 * @n Device: Si4468 Rev.: A2                                 
// Crys_freq(Hz): 30000000    Crys_tol(ppm): 20    IF_mode: 2    High_perf_Ch_Fil: 1    OSRtune: 0    Ch_Fil_Bw_AFC: 0    ANT_DIV: 0    PM_pattern: 0    
// MOD_type: 3    Rsymb(sps): 4800    Fdev(Hz): 2400    RXBW(Hz): 150000    Manchester: 0    AFC_en: 0    Rsymb_error: 0.0    Chip-Version: 2    
// RF Freq.(MHz): 450    API_TC: 29    fhst: 250000    inputBW: 0    BERT: 0    RAW_dout: 0    D_source: 0    Hi_pfm_div: 1    
// API_ARR_Det_en: 0    Fdev_error: 0    API_ETSI: 0    
// 
// # RX IF frequency is  -468750 Hz
// # WB filter 4 (BW =  41.32 kHz);  NB-filter 4 (BW = 41.32 kHz)
// 
// Modulation index: 1

        0x07, RF_POWER_UP, \
#define RF_POWER_UP 0x02, 0x01, 0x00, 0x01, 0xC9, 0xC3, 0x80

        0x08, RF_GPIO_PIN_CFG, \
#define RF_GPIO_PIN_CFG 0x13, 0x1B, 0x08, 0x20, 0x21, 0x27, 0x0B, 0x00

        0x06, RF_GLOBAL_XO_TUNE_2, \
#define RF_GLOBAL_XO_TUNE_2 0x11, 0x00, 0x02, 0x00, 0x52, 0x00

        0x05, RF_GLOBAL_CONFIG_1, \
#define RF_GLOBAL_CONFIG_1 0x11, 0x00, 0x01, 0x03, 0x22
        global_config: 0x22, sequencer fast, protocol 1 (802.15.4)

        0x08, RF_INT_CTL_ENABLE_4, \
#define RF_INT_CTL_ENABLE_4 0x11, 0x01, 0x04, 0x00, 0x07, 0x3C, 0x01, 0x08
        int_ctl_enable: 7 (chip, modem, ph enabled)
        int_ctl_ph_enable: 0x3c, Packet_sent, packet_rx, crc_err, unknown
        int_ctl_modem_enable: 0x01, sync_detect
        int_ctl_chip_enable: 0x08, cmd_error
        

        0x08, RF_FRR_CTL_A_MODE_4, \
#define RF_FRR_CTL_A_MODE_4 0x11, 0x02, 0x04, 0x00, 0x01, 0x07, 0x02, 0x0A
        frr_a: 0x01 int_status
        frr_b: 0x07 chip_status
        frr_c: 0x02 int_pend
        frr_d: 0x0a latched_rssi

        0x0D, RF_PREAMBLE_TX_LENGTH_9, \
#define RF_PREAMBLE_TX_LENGTH_9 0x11, 0x10, 0x09, 0x00, 0x08, 0x14, 0x00, 0x0F, 0x12, 0x00, 0x00, 0x00, 0x00

        0x0E, RF_SYNC_CONFIG_10, \
#define RF_SYNC_CONFIG_10 0x11, 0x11, 0x0A, 0x00, 0x01, 0x09, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

        0x06, RF_PKT_CRC_CONFIG_2, \
#define RF_PKT_CRC_CONFIG_2 0x11, 0x12, 0x02, 0x00, 0x57, 0x01

        0x06, RF_PKT_WHT_POLY_15_8_2, \
#define RF_PKT_WHT_POLY_15_8_2 0x11, 0x12, 0x02, 0x01, 0x01, 0x08

        0x10, RF_PKT_WHT_POLY_7_0_12, \
#define RF_PKT_WHT_POLY_7_0_12 0x11, 0x12, 0x0C, 0x02, 0x08, 0x01, 0x0F, 0x07, 0x83, 0x40, 0x3A, 0x01, 0x00, 0x30, 0x30, 0x00

        0x10, RF_PKT_FIELD_1_LENGTH_7_0_12, \
#define RF_PKT_FIELD_1_LENGTH_7_0_12 0x11, 0x12, 0x0C, 0x0E, 0x02, 0x04, 0xC0, 0x00, 0x03, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00

        0x10, RF_PKT_FIELD_4_LENGTH_7_0_12, \
#define RF_PKT_FIELD_4_LENGTH_7_0_12 0x11, 0x12, 0x0C, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0xC0, 0x07

        0x10, RF_PKT_RX_FIELD_2_LENGTH_7_0_12, \
#define RF_PKT_RX_FIELD_2_LENGTH_7_0_12 0x11, 0x12, 0x0C, 0x26, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

        0x07, RF_PKT_RX_FIELD_5_LENGTH_7_0_3, \
#define RF_PKT_RX_FIELD_5_LENGTH_7_0_3 0x11, 0x12, 0x03, 0x32, 0x00, 0x00, 0x00

        0x08, RF_PKT_CRC_SEED_31_24_4, \
#define RF_PKT_CRC_SEED_31_24_4 0x11, 0x12, 0x04, 0x36, 0x00, 0x00, 0x00, 0x00

        0x10, RF_MODEM_MOD_TYPE_12, \
#define RF_MODEM_MOD_TYPE_12 0x11, 0x20, 0x0C, 0x00, 0x03, 0x00, 0x07, 0x02, 0xEE, 0x00, 0x05, 0xC9, 0xC3, 0x80, 0x00, 0x00

        0x05, RF_MODEM_FREQ_DEV_0_1, \
#define RF_MODEM_FREQ_DEV_0_1 0x11, 0x20, 0x01, 0x0C, 0xA8

        0x10, RF_MODEM_TX_RAMP_DELAY_12, \
#define RF_MODEM_TX_RAMP_DELAY_12 0x11, 0x20, 0x0C, 0x18, 0x01, 0x00, 0x08, 0x03, 0x80, 0x00, 0x30, 0x20, 0x0C, 0xE8, 0x01, 0x87

        0x10, RF_MODEM_BCR_NCO_OFFSET_2_12, \
#define RF_MODEM_BCR_NCO_OFFSET_2_12 0x11, 0x20, 0x0C, 0x24, 0x01, 0x4F, 0x8B, 0x01, 0x4F, 0x02, 0x00, 0x00, 0x00, 0x12, 0x80, 0x2A

        0x07, RF_MODEM_AFC_LIMITER_1_3, \
#define RF_MODEM_AFC_LIMITER_1_3 0x11, 0x20, 0x03, 0x30, 0x07, 0x88, 0xA0

        0x05, RF_MODEM_AGC_CONTROL_1, \
#define RF_MODEM_AGC_CONTROL_1 0x11, 0x20, 0x01, 0x35, 0xE0

        0x10, RF_MODEM_AGC_WINDOW_SIZE_12, \
#define RF_MODEM_AGC_WINDOW_SIZE_12 0x11, 0x20, 0x0C, 0x38, 0x11, 0x56, 0x56, 0x80, 0x1A, 0x40, 0x00, 0x00, 0x2A, 0x0C, 0xA4, 0x23

        0x0C, RF_MODEM_RAW_CONTROL_8, \
#define RF_MODEM_RAW_CONTROL_8 0x11, 0x20, 0x08, 0x45, 0x03, 0x00, 0x35, 0x02, 0x00, 0x20, 0x06, 0x22

        0x07, RF_MODEM_RSSI_CONTROL_3, \
#define RF_MODEM_RSSI_CONTROL_3 0x11, 0x20, 0x03, 0x4C, 0x09, 0x1C, 0x40

        0x06, RF_MODEM_RAW_SEARCH2_2, \
#define RF_MODEM_RAW_SEARCH2_2 0x11, 0x20, 0x02, 0x50, 0x84, 0x0A

        0x06, RF_MODEM_SPIKE_DET_2, \
#define RF_MODEM_SPIKE_DET_2 0x11, 0x20, 0x02, 0x54, 0x03, 0x07

        0x05, RF_MODEM_RSSI_MUTE_1, \
#define RF_MODEM_RSSI_MUTE_1 0x11, 0x20, 0x01, 0x57, 0x00

        0x09, RF_MODEM_DSA_CTRL1_5, \
#define RF_MODEM_DSA_CTRL1_5 0x11, 0x20, 0x05, 0x5B, 0x42, 0x04, 0x05, 0x78, 0x20

        0x10, RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12, \
#define RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12 0x11, 0x21, 0x0C, 0x00, 0xA2, 0x81, 0x26, 0xAF, 0x3F, 0xEE, 0xC8, 0xC7, 0xDB, 0xF2, 0x02, 0x08

        0x10, RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12, \
#define RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12 0x11, 0x21, 0x0C, 0x0C, 0x07, 0x03, 0x15, 0xFC, 0x0F, 0x00, 0xA2, 0x81, 0x26, 0xAF, 0x3F, 0xEE

        0x10, RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12, \
#define RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12 0x11, 0x21, 0x0C, 0x18, 0xC8, 0xC7, 0xDB, 0xF2, 0x02, 0x08, 0x07, 0x03, 0x15, 0xFC, 0x0F, 0x00

        0x08, RF_PA_MODE_4, \
#define RF_PA_MODE_4 0x11, 0x22, 0x04, 0x00, 0x08, 0x7F, 0x00, 0x1D

        0x0B, RF_SYNTH_PFDCP_CPFF_7, \
#define RF_SYNTH_PFDCP_CPFF_7 0x11, 0x23, 0x07, 0x00, 0x2C, 0x0E, 0x0B, 0x04, 0x0C, 0x73, 0x03

        0x10, RF_MATCH_VALUE_1_12, \
#define RF_MATCH_VALUE_1_12 0x11, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

        0x0C, RF_FREQ_CONTROL_INTE_8, \
#define RF_FREQ_CONTROL_INTE_8 0x11, 0x40, 0x08, 0x00, 0x3B, 0x08, 0x00, 0x00, 0x44, 0x44, 0x20, 0xFE

  

*** Configuration from Si446x_Examples/Si446x_CustomPacketRX
 * @n WDS GUI Version: 3.2.9.0
 * @n Device: Si4463 Rev.: B1                                 
// Crys_freq(Hz): 30000000    Crys_tol(ppm): 10    IF_mode: 2    High_perf_Ch_Fil: 1    OSRtune: 0    Ch_Fil_Bw_AFC: 0    ANT_DIV: 0    PM_pattern: 0    
// MOD_type: 2    Rsymb(sps): 10000    Fdev(Hz): 20000    RXBW(Hz): 150000    Manchester: 0    AFC_en: 0    Rsymb_error: 0.0    Chip-Version: 2    
// RF Freq.(MHz): 433    API_TC: 29    fhst: 250000    inputBW: 0    BERT: 0    RAW_dout: 0    D_source: 0    Hi_pfm_div: 1    
// 
// # RX IF frequency is  -468750 Hz
// # WB filter 2 (BW =  68.71 kHz);  NB-filter 2 (BW = 68.71 kHz)
// 
// Modulation index: 4

        0x07, RF_POWER_UP, \
#define RF_POWER_UP 0x02, 0x01, 0x00, 0x01, 0xC9, 0xC3, 0x80

        0x08, RF_GPIO_PIN_CFG, \
#define RF_GPIO_PIN_CFG 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

        0x06, RF_GLOBAL_XO_TUNE_2, \
#define RF_GLOBAL_XO_TUNE_2 0x11, 0x00, 0x02, 0x00, 0x52, 0x01

        0x05, RF_GLOBAL_CONFIG_1, \
#define RF_GLOBAL_CONFIG_1 0x11, 0x00, 0x01, 0x03, 0x60

        0x08, RF_INT_CTL_ENABLE_4, \
#define RF_INT_CTL_ENABLE_4 0x11, 0x01, 0x04, 0x00, 0x07, 0x18, 0x01, 0x08
        int_ctl_enable: 0x07, chip, modem, ph
        ph_enable:      0x18, packet_rx, crc_err
        modem_enable:   0x01, sync_detect
        chip_enable:    0x08, cmd_error

        0x08, RF_FRR_CTL_A_MODE_4, \
#define RF_FRR_CTL_A_MODE_4 0x11, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00
        no frrs, all disabled

        0x0D, RF_PREAMBLE_TX_LENGTH_9, \
#define RF_PREAMBLE_TX_LENGTH_9 0x11, 0x10, 0x09, 0x00, 0x08, 0x14, 0x00, 0x0F, 0x31, 0x00, 0x00, 0x00, 0x00
        tx_length: 8
        config_std: 0x14
        config_nstd: 0
        config_std2: 0x0f, preamble timeout 0xf bytes
        config: 0x31, first 1, bytes, standard

        0x09, RF_SYNC_CONFIG_5, \
#define RF_SYNC_CONFIG_5 0x11, 0x11, 0x05, 0x00, 0x01, 0xB4, 0x2B, 0x00, 0x00
        config: 0x01 length 2 bytes
        sync_bits: 0xb4 0x2b

        0x0B, RF_PKT_CRC_CONFIG_7, \
#define RF_PKT_CRC_CONFIG_7 0x11, 0x12, 0x07, 0x00, 0x84, 0x01, 0x08, 0xFF, 0xFF, 0x00, 0x02
        crc_config: 0x84, crc_seed 1, CRC_16_IBM
        wht_poly: 0x0108
        wht_seed: 0xffff
        wht_bit_num: 0x00
        pkt_config1: 0x02, crc bigendian, bitorder bigendian

        0x10, RF_PKT_LEN_12, \
#define RF_PKT_LEN_12 0x11, 0x12, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x07, 0x04, 0x80, 0x00, 0x00, 0x00
        pkt_len: 0x00 dst_field 0, disabled
        pkt_len_field_src: 0x00
        pkt_len_adjust: 0x00
        tx_thres: 0x30
        rx_thres: 0x30
        f1_len: 0x0007
        f1_config: 0x04 pn_start
        f1_crc_config: 80 src_start
        f2_len: 0x0000
        f2_config: 0x00 

        0x10, RF_PKT_FIELD_2_CRC_CONFIG_12, \
#define RF_PKT_FIELD_2_CRC_CONFIG_12 0x11, 0x12, 0x0C, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        f2_crc_config: 00
        f3_len: 0000
        f3_config: 00
        f3_crc_config: 00
        f4_len: 0000
        f4_config: 00
        f4_crc_config: 00
        f5_len: 0000
        f5_config: 00

        0x10, RF_PKT_FIELD_5_CRC_CONFIG_12, \
#define RF_PKT_FIELD_5_CRC_CONFIG_12 0x11, 0x12, 0x0C, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

        0x0D, RF_PKT_RX_FIELD_3_CRC_CONFIG_9, \
#define RF_PKT_RX_FIELD_3_CRC_CONFIG_9 0x11, 0x12, 0x09, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

        0x10, RF_MODEM_MOD_TYPE_12, \
#define RF_MODEM_MOD_TYPE_12 0x11, 0x20, 0x0C, 0x00, 0x02, 0x00, 0x07, 0x01, 0x86, 0xA0, 0x01, 0xC9, 0xC3, 0x80, 0x00, 0x05

        0x05, RF_MODEM_FREQ_DEV_0_1, \
#define RF_MODEM_FREQ_DEV_0_1 0x11, 0x20, 0x01, 0x0C, 0x76

        0x0C, RF_MODEM_TX_RAMP_DELAY_8, \
#define RF_MODEM_TX_RAMP_DELAY_8 0x11, 0x20, 0x08, 0x18, 0x01, 0x80, 0x08, 0x03, 0x80, 0x00, 0x20, 0x10

        0x0D, RF_MODEM_BCR_OSR_1_9, \
#define RF_MODEM_BCR_OSR_1_9 0x11, 0x20, 0x09, 0x22, 0x00, 0xFA, 0x02, 0x0C, 0x4A, 0x01, 0x06, 0x02, 0xC2

        0x0B, RF_MODEM_AFC_GEAR_7, \
#define RF_MODEM_AFC_GEAR_7 0x11, 0x20, 0x07, 0x2C, 0x04, 0x36, 0x80, 0x1D, 0x0D, 0x58, 0x80

        0x05, RF_MODEM_AGC_CONTROL_1, \
#define RF_MODEM_AGC_CONTROL_1 0x11, 0x20, 0x01, 0x35, 0xE2

        0x0D, RF_MODEM_AGC_WINDOW_SIZE_9, \
#define RF_MODEM_AGC_WINDOW_SIZE_9 0x11, 0x20, 0x09, 0x38, 0x11, 0x37, 0x37, 0x00, 0x02, 0xFF, 0xFF, 0x00, 0x29

        0x0D, RF_MODEM_OOK_CNT1_9, \
#define RF_MODEM_OOK_CNT1_9 0x11, 0x20, 0x09, 0x42, 0xA4, 0x02, 0xD6, 0x83, 0x01, 0xFF, 0x01, 0x80, 0xFF

        0x05, RF_MODEM_RSSI_CONTROL_1, \
#define RF_MODEM_RSSI_CONTROL_1 0x11, 0x20, 0x01, 0x4C, 0x00

        0x05, RF_MODEM_RSSI_COMP_1, \
#define RF_MODEM_RSSI_COMP_1 0x11, 0x20, 0x01, 0x4E, 0x40

        0x05, RF_MODEM_CLKGEN_BAND_1, \
#define RF_MODEM_CLKGEN_BAND_1 0x11, 0x20, 0x01, 0x51, 0x0A

        0x10, RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12, \
#define RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12 0x11, 0x21, 0x0C, 0x00, 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5, 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C

        0x10, RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12, \
#define RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12 0x11, 0x21, 0x0C, 0x0C, 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00, 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5

        0x10, RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12, \
#define RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12 0x11, 0x21, 0x0C, 0x18, 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C, 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00

        0x05, RF_PA_TC_1, \
#define RF_PA_TC_1 0x11, 0x22, 0x01, 0x03, 0x3D

        0x0B, RF_SYNTH_PFDCP_CPFF_7, \
#define RF_SYNTH_PFDCP_CPFF_7 0x11, 0x23, 0x07, 0x00, 0x2C, 0x0E, 0x0B, 0x04, 0x0C, 0x73, 0x03

        0x10, RF_MATCH_VALUE_1_12, \
#define RF_MATCH_VALUE_1_12 0x11, 0x30, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

        0x0C, RF_FREQ_CONTROL_INTE_8, \
#define RF_FREQ_CONTROL_INTE_8 0x11, 0x40, 0x08, 0x00, 0x38, 0x0D, 0xDD, 0xDD, 0x44, 0x44, 0x20, 0xFE





*** Testing.
    TX set up

p_dump_start = 0x9c89,
l_dump_start = 0x9c8c,
l_dump_end = 0xbf06,
l_delta = 0x227a,
CTS_pin = 0x4,
IRQN_pin = 0x10,
SDN_pin = 0x0,
CSN_pin = 0x80,
ta0ccr3 = 0x0,
ta0cctl3 = 0x0,
part_info = {chiprev = 0x11, part_15 = 0x44, part_7 = 0x63, pbuild = 0x0, id_15 = 0x0, id_7 = 0xf, customer = 0x0, romid = 0x3},
func_info = {revext = 0x3, revbranch = 0x0, revint = 0xf, reserved0 = 0x0, reserved1 = 0x0, func = 0x1},
gpio_cfg = {gpio0 = 0x8, gpio1 = 0x8, gpio2 = 0x8, gpio3 = 0x8, nirq = 0xa7, sdo = 0xb, gen_config = 0x0},
rxfifocnt = 0x0,
txfifofree = 0x40,
ph_status = {ph_pend = 0x0, ph_status = 0x2},
modem_status = {modem_pend = 0x0, modem_status = 0x0, curr_rssi = 0x4, latch_rssi = 0x0, ant1_rssi = 0x0, ant2_rssi = 0x0, afc_freq_offset15 = 0x82, afc_freq_offset7 = 0x1, info_flags = 0x0},
chip_status = {chip_pend = 0x0, chip_status = 0x14, cmd_err_status = 0x0, cmd_err_cmd_id = 0x0, info_flags = 0x0},
int_status = {int_pend = 0x0, int_status = 0x0, ph_pend = 0x0, ph_status = 0x2, modem_pend = 0x0, modem_status = 0x0, chip_pend = 0x0, chip_status = 0x14, info_flags = 0x0},
device_state = 0x3,
channel = 0x0,
frr = {0x3, 0x0, 0x0, 0x0},
packet_info_len = {0x0, 0x0},
gr00_global = {0x52, 0x0, 0x18, 0x60, 0x0, 0x0, 0x1, 0x60, 0x0, 0x0},
gr01_int = {0x0, 0x0, 0x0, 0x4},
gr02_frr = {0x9, 0x4, 0x6, 0x8},
gr10_preamble = {0x8, 0x14, 0x0, 0xff, 0x31, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
gr11_sync = {0x1, 0xb4, 0x2b, 0x0, 0x0},
gr12_pkt = {0x84, 0x1, 0x8, 0xff, 0xff, 0x0, 0x2, 0x0, 0x2a, 0x1, 0x0, 0x30, 0x30, 0x0, 0x1, 0x4, 0x82, 0x0, 0x3f, 0x0, 0x2a, 0x0 <repeats 20 times>},
  crc_config 0x84, seed 1, crc_16_ibm
  pkt_config1: (1206), 0x02, crc bigendian, bit_order bigendian
  pkt_len: (1208) 0x2a, len bigendian, size 1 byte, leave in fifo, dst 2
  pkt_len_field_src: (1209) 0x1
  pkt_len_adjust: (120a) 00
  tx_thres: 0x30
  rx_thres: 0x30
  f1_len: 0001
  f1_config: 0x04
  f1_crc_config: 0x82
  f2_len: 0x003f
  f2_config: 0x00
  f2_crc_config: 0x2a
  f3_len: 0000
  f3_config: 00
  f3_crc_config: 00
  f4_len: 0000
  f4_config: 00
  f4_crc_config: 00
  f5_len: 0000
  f5_config: 00
  f5_crc_config: 00

gr20_modem = {0x3, 0x0, 0x7, 0xf, 0x42, 0x40, 0x9, 0xc9, 0xc3, 0x80, 0x0, 0x1b, 0x4f, 0x0, 0x0, 0x67, 0x60, 0x4d, 0x36, 0x21, 0x11, 0x8, 0x3, 0x1, 0x1, 0x80, 0x8, 0x3, 0x80, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0xc8, 0x2, 0x8f, 0x5c, 0x1, 0x48, 0x2, 0xc2, 0x0, 0x4, 0x36, 0x80, 0x92, 0xa, 0x46, 0x80, 0x0, 0x0, 0xe2, 0x0, 0x0, 0x11, 0x2c, 0x2c, 0x0, 0x1a, 0xff, 0xff, 0x0, 0x29, 0xc, 0xa4, 0x2, 0xd6, 0x83, 0x1, 0x7f, 0x1, 0x80, 0xff, 0xc, 0x1, 0x0, 0x40, 0x3, 0x0, 0xa},
gr21_modem = {0xff, 0xc4, 0x30, 0x7f, 0xf5, 0xb5, 0xb8, 0xde, 0x5, 0x17, 0x16, 0xc, 0x3, 0x0, 0x15, 0xff, 0x0, 0x0, 0xff, 0xc4, 0x30, 0x7f, 0xf5, 0xb5, 0xb8, 0xde, 0x5, 0x17, 0x16, 0xc, 0x3, 0x0, 0x15, 0xff, 0x0, 0x0},
gr22_pa = {0x8, 0x7f, 0x0, 0x3d, 0x0, 0x23},
gr23_synth = {0x2c, 0xe, 0xb, 0x4, 0xc, 0x73, 0x3, 0x5},
gr30_match = 0x33aa,
gr40_freq_ctl = {0x38, 0xd, 0xdd, 0xdd, 0x44, 0x44, 0x20, 0xfe},
gr50_hop = 0x33aa,
grF0_pti = 0x33aa}



just before transmit:

txfifofree = 0x1a,
ph_status = {ph_pend = 0x0, ph_status = 0x0},
gr12_pkt = {0x84, 0x1, 0x8, 0xff, 0xff, 0x0, 0x2, 0x0, 0x2a, 0x1, 0x0, 0x30, 0x30, 0x0, 0x1, 0x4, 0x82, 0x0, 0x25, 0x0, 0x2a, 0x0 <repeats 20 times>},
f2_len: 0x25

start_tx cmd: {0x31, 0x0, 0x30, 0x0, 0x26}



CCA approach:

Defs:   LR:  Latched_RSSI
        CR:  Current_RSSI
        MRT: Modem_RSSI_Threshold (p204a)

* Start_RX:RXTIMEOUT_STATE <- 8.  Back to RX_STATE but rearm.

* MODEM_RSSI_CONTROL:CHECK_THRESH_AT_LATCH <- 1, checks LR vs MRT, < goes to START_RX:RxTOState and
  Invalid_Preamble Int asserted.

gp0 can be configured to output CCA, if CR is > MRT, CCA will output 1
RSSI interrupt (Modem), if CR > MRT (crosses), generate RSSI_int

* MRT needs to be set to a threshold.  (0x90 to start).

Then we can either look at gp0 (configured for CCA) or read RSSI bit in Modem_Status.  One can read Modem_Status and only read 3 bytes (cts, pend, status).  We want RSSI in status not pend.


* change rx_preamble_timeout to 0x0f  60 bit timeout.  In PREAMBLE_CONFIG_STD_2 (p1003)
