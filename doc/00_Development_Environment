
Installing a development environment for the MamMark tag.


State:

2018-04-08
    Doc update.  Update ARM toolchain notes.

2017-09-12
    add binary loading (JLinkExe, loadbin)

2017-08-01
    Ubuntu 16.04, T2 (TinyProd) github:tp-freeforall/prod(tp-master),
    MM github:MamMark/mm(master)
    ARM toolchain, gcc 4.9.3, gdb 7.8.0 (32 bit), python support
    J-link (Segger), V6.16j (6.16.10)
    TI ARM tools (msp432)
      simplelink_msp432_sdk_1_40_01_00

    VM support.

2014-09-14
    Ubuntu 14.04, T2 (TinyProd) github:tp-freeforall/prod(tp-master),
    MM github:MamMark/mm(master)
    mspdebug JTAG debugging.  (v2)
    mspgcc-LTS20120406 toolchain, tinyprod.net/repos/debian

2011-10-20 (obsolete)
    Ubuntu 10.04, T2 (TinyProd) github:tp-freeforall/prod(mm-core-next),
    (based on tp-freeforall/prod(msp430-int-next)),
    MM github:MamMark/mm(master)
    mspdebug JTAG debugging.
    mspgcc-LTS20110716+patches toolchain, tinyprod.net/debian-dev


This brief is written assuming that there is a common root directory,
we'll call it mm and it is usually at the top level of a working
directory.  ie.  ~/tag.

Most commands are entered from a terminal window.


**************************************************************************************

0) Overview.

MamMark code is built using two trees.

    I)  Modified TinyOS trunk.  Adds support for advanced processors.  MM core changes.
    II) Main MM trunk.  Main body of MamMark code.

The following parts are essential to building MM images:

a) Set up a development environment.  (Ubuntu or Debian based)
   o Stand alone, manual install
   o Vagrant box, VM based install
b) appropriate toolchain
   mspgcc (LTS-20110716) toolchain (gcc 4.6.3) for msp430 based motes
   arm toolchain for msp432 based motes
c) two trees are used and environment is set to include both trees.
d) Jtag pod

**************************************************************************************

1a) Development Environment Installation.   Manual Installation
    see 00a_Development_Quick_Start and ...

    https://github.com/tp-freeforall/prod/blob/tp-master/00b_Development_Environment


1b) Vagrant Installation.

https://github.com/tp-freeforall/prod/blob/tp-master/00g_Development_Environment_VM


**************************************************************************************

2) Pull main tinyos tree, gh:tp-freeforall/prod(tp-master)

Starting from the home directory of where ever you are.  ie. On a Manual Installation
in your top directory.  On a VM installation, you need to be in your top directory
within the VM.

cd ~/tag
git clone git://github.com/tp-freeforall/prod
cd prod
git checkout tp-master


**************************************************************************************

3) Pull the MM tree.

The main body of MM code is held in the git repository gh:MamMark/mm(master).
You pull a read only copy from git://github.com/MamMark/mm.git.

If you will be contributing code to the project you should follow the
instruction found in gh:tp-freeforall/prod(tp-master)/00d_Contribution_Process.
You will get a github login in and fork your own copy of the MamMark/mm repo.
Work is done on local working branches, moved to your local master branch
and then a pull request is forwarded to MamMark/master.


Normal user (not enabled).  Assumes top level is ~/tag.

cd ~/tag
git clone git://github.com/MamMark/mm.git t2_mm
cd mm

# you should be on the master branch by default.


**************************************************************************************

4) Set environment variables.

MM_ROOT="$HOME/tag/mm"
TINYOS_ROOT_DIR=$HOME/tag/prod
TINYOS_ROOT_DIR_ADDITIONAL="$MM_ROOT:$TINYOS_ROOT_DIR_ADDITIONAL"

PYTHONPATH=$TINYOS_ROOT_DIR/support/sdk/python:$PYTHONPATH
# PYTHONPATH="/usr/local/lib/python3.1/dist-packages:$PYTHONPATH"

export TINYOS_ROOT_DIR TINYOS_ROOT_DIR_ADDITIONAL CLASSPATH PYTHONPATH
export LD_LIBRARY_PATH MOTECOM MM_ROOT


**************************************************************************************


5) Do a test compile and gdb run.

   5a details use for msp432 based ARM Cortex-M4f based platforms
      with JLink Jtag probes.

   5b details older msp430 based platforms with mspdebug jtag probes.

   telosb: msp430f1611 based 16 bit platform

     make debugopt telosb

   mm5a: msp430f5438 based 16 bit processor tag

     make debugopt mm5a

   mm6a: msp432p401r based ARM Cortex-M4F tag

     make debugopt mm6a


5a) msp432 base ARM Cortex-M4F with Segger JLink JTAG probes.

    For mm6a hardware:

    cd ~/tag/prod/apps/Blink

    make debugopt mm6a
    loadbin mm6a        # see below for alternative

    When the download completes use a different window and run:

      JLinkGDBServer -device msp432p401r -if swd


    To set up your application directory for gdb debugging follow the
    instructions in

      $TINYOS_ROOT_DIR/tos/chips/msp430/99_gdb/00_README

    to set up the gdb control files in their proper places (.gdbinit, .gdb_mm6a,
    etc).

    To actually run gdb on your msp432 code:  (from the application directory)

      arm-none-eabi-gdb-py -i=mi -iex "target extended-remote localhost:2331" \
          -cd build/mm6a/ main.exe

    This will connect to the server started above and allow you to debug your
    code remotely using GDB.

    To load code from within GDB you can use:

      load

    or

      load "main.exe"

    To let the device run use 'c', continue.  Do not use 'run'.


5b) Older msp430 based/mspdebug Jtag debugging probes.  This assumes that
    the JTAG pod is connected to /dev/ttyUSB0.

   For mm5 hardware:

   cd ~/tag/prod/apps/Blink
   make debugopt mm5a
   mspdebug uif -qjd /dev/ttyUSB0 "prog build/mm5a/main.exe"


   When the download completes use a different window and run:

   mspdebug uif -qjd /dev/ttyUSB0 "opt gdb_loop true" gdb


   Follow the instructions in

      $TINYOS_ROOT_DIR/tos/chips/msp430/99_gdb/00_README

   to set up the gdb control files in their proper places (.gdbinit, .gdb_x5,
   etc).

   now if you run msp430-gdb build/mm5a/main.exe gdb should connect to the
   proxy and start to debug your code in the device.  To let the device run
   use 'c', continue.  Do not use 'run'.


**************************************************************************************

6) Do a test compile and gdb run from the main tree.

   If you have telosb hardware:

   cd ~/mm/prod/apps/Blink
   make debugopt telosb install


**************************************************************************************

The main tracking repo is at:

    https://github.com/tinyprod/prod.git
        read-only, production orientated tracking repo.   Tracks the main TinyOS
        development repository, gh:tinyos/tinyos-main.	MM modifications to the
        T2 core are on the tp-master branch.

    https://github.com/tp-freeforall/prod.git
        read-only, development version of the tinyprod/prod repository.
        Typically used for integrating working development code.

        there is an experimental branch mm-expr that gets rebased to tp-master
        when tp-master moves.



**************************************************************************************

7) About the T2_MM tree.

The t2_mm tree is a seperate t2 based repo that has mammark unique
code.  It is used to build firmware for the mm6a (msp432, ARM Cortex-M4F based)
tag devices.

    https://github.com/MamMark/mm.git   (read only)

    The main branch is "master".  "integration" is also interesting.


**************************************************************************************

8) Repos:

See $(TINYOS_ROOT_DIR)/00a_Repo_Notes for details about how the TinyProd/prod
repo is organized.  gh:tinyprod/prod and gh:tp-freeforall/prod holds the main
t2 repository.   Working branch for the MM platform is tp-master.  Some
additional modifications are on the mm-expr branch.

Note: The mm-expr branch is currently being rebased when the mainline
(tp-master) is moved forward (upstream tracking).  If you are using mm-expr
you currently have to do the following to update to a new version.  Assumes
that you have both mm-expr and tp-master branches.  Make sure you have no
pending changes on mm-expr (you shouldn't, currently read-only).

    git checkout tp-master              # switch to mainline
    git pull ffa                        # update to new mainline
    git b -D mm-expr                    # nuke mm-expr
    git checkout -t ffa/mm-expr         # get new mm-expr


T2_MM git repositories:

    gh:MamMark/mm.git    (read-only: git://github.com/MamMark/mm.git).


9) Dealing with SD media for use by the tag.

  When you insert the media it will be mounted as a device (not file system).
  You need to figure out where the device got mounted, ie. /dev/sdc (which
  is what we assume in the examples below).

  To see how a SD is partitioned:

      gdisk -l /dev/sdc
      fdisk -l /dev/sdc

  fdisk is used to MBR partitions and we need a MBR partition with a FAT32 file system.

  fdisk -l /dev/sdc

  fdisk -l /dev/sdc

Disk /dev/sdc: 1977 MB, 1977614336 bytes
64 heads, 63 sectors/track, 957 cylinders, total 3862528 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x00000000

   Device Boot      Start         End      Blocks   Id  System
/dev/sdc1             135     3858623     1929244+   6  FAT16


  format
	mkdosfs -F 32 -I -n"TagTest" -v /dev/sdc

  check
	fsck /dev/sdc

  build
	tagfmtsd -w /dev/sdc

  check
	fsck /dev/sdc

  correct
	fsck -a /dev/sdc
	fsck    /dev/sdc
	eject   /dev/sdc


10) Loading binary images.

using the extra files, golden.extra nd nib.extra, we can build files that have
been prepared for the golden and nib banks.  These will be put into
build/<target>/golden and build/<target>/nib.

The utility, loadbin, (tools/utils/loadbin, typically installed in /usr/local/bin)
can then be used to download the main.bin from the appropriate directory to
the target chip via a Segger JLink JTAG pod.

ie.

    loadbin dev6a
    loadbin -t golden dev6a
    loadbin -t nib dev6a


11) Additional Tag Development tools

- tagdump (tools/utils/tagdump)
  sudo ./setup.py install

- factspp (tools/tagnet/factspp)
  sudo ./setup.py install

- qfsm

- fsmc

**************************************************************************************

12) Misc.

- Grip, used to render MD (markdown) files

  git clone https://github.com/joeyespo/grip.git
  cd grip
  sudo python setup.py install


- to use grip

  grip <markdownfile>
  * Running on http://localhost:6419/ (Press CTRL+C to quit)

  point a browser at http://localhost:6419/ to see your rendered doc.

