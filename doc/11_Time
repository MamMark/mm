
* LocalTime
  localtime is only used for timing in the Timer system.

** 32 bit ms internal time since last reboot.

   binary time: 1024 ticks/sec.  (mis ticks)
   2^32 = 4294967296 mis/(88473600) = ~ 48.5 days

      s         m       hr        d
   -------- * ----- * ------ * -------
   1024 mis    60s     60 m     24 hr

   decimal time: 1000 ticks/sec  (ms ticks)
   2^32 = 4294967296 mis/(86400000) = ~ 49.7 days


* sysTime (lt64)
  systime is deprecated.  Was used for record timestamping.
  superseeded by RtcTime.

** 64 bit ms internal time since last reboot.  LocalTime (32 bit) wraps
   after ~48.5 days.  To fix this issue we need 64 bits (next natural
   boundary).  64 bit sysTime will wrap every ~571 million years.

** 8 bytes long.
** simple extension to LocalTime, LocalTime64 (lt64).
** tweak low level LocalTime/Timers to provide LocalTime64 (cycle).
** used by OverWatch when crashing, uptime, elapsed.


* RtcTime
  RtcTime is used for all timestamping.  Anything external.

** 10 bytes
*** two subfields.  the year (2 bytes) and the low 8 bytes.
    the low 8 bytes is organized as a 2quad aligned (structure
    alignment) collection of sub_sec, sec, min, hr, dow, day, mon.

** RTC format
*** h/w format, TI RTC format.

  __IO uint16_t PS;             PS1 << 8 | PS0
  __I  uint16_t IV;             interrupt vector
  __IO uint16_t TIM0;           MIN << 8 | SEC
  __IO uint16_t TIM1;           DOW << 8 | HR
  __IO uint16_t DATE;           MON << 8 | DAY
  __IO uint16_t YEAR;


*** RtcTime Memory format
**** see rtctime.h (main prod tree)

  uint16_t	sub_sec;                /* 16 bit jiffies (32KiHz) */
  uint8_t	sec;                    /* 0-59 */
  uint8_t	min;                    /* 0-59 */
  uint8_t	hr;                     /* 0-23 */
  uint8_t       dow;                    /* day of week, 0-6, 0 sunday */
  uint8_t	day;                    /* 1-31 */
  uint8_t	mon;                    /* 1-12 */
  uint16_t	yr;


Originally, we were using a 32bit systime for timestamping.  This is the
number of ms since reboot, which wraps in ~45 days.  Need something bigger.
The next natural boundary is 64 bits.

But we want something that human's understand and is easy to process.  The
closer we make this to the real time clock the better.

sysTime is 64 bits which is 8 bytes.  RtcTime is 10 bytes.  Including 2
bytes for year.  We reduce RtcTime to 8 bytes (ie. 64 bits), by dropping
the year, yielding a rt64 timestamp.  The time will wrap once a year on the
transition from 12/31-23:59:59:0x7fff to 01/01-00:00:00:0x0000.

But this has the problem of not having the year, this is a problem waiting
to bite us when we just happen to get the year wrong.

The rt64 structure however has the nice property of being easy to copy, so
we bury both the year and a rt64 structure inside of the RtcTime structure.
We then use RtcTime for timestamping and always make sure the year is
included.

The has the downside of having 2 additional bytes in every record.  We can
mitigate this later by going to a temporanc encoding with yields a full
timestamp in 8 bytes.

Data Blocks (typed_data, records) are time stamped using RtcTime stamps.

Overwatch uses sysTime (LocalTime64) for uptime (time since last boot) and
the accumulation of elapsedTime.  Both are in sysTime units, 64 bit ms since
last reboot.


Time Skew.

When the system boots, we need to determine a good RtcTime for the system
to use.  On first power on (h/w loss of power, RTC loss), we need to have
a reasonable value to first use.

A fall back value is provided by the Dblk directory inceptDate.  This
RtcTime value is written when the tag SD is originally formatted.  This
is the value that is used to initialize the RTC h/w if no other reasonable
RtcTime is found.

In addition, the DblkManager, as part of its initialization, will scan
the Dblk area for the last SYNC/REBOOT and last records that have been
written to the Dblk area.  Once found, the combination of last SYNC/REBOOT
and last records are used to determine a reasonable starting RtcTime
to use for initializing the RTC h/w.

Once running, two other sources can provide better time, Network Time (via
the network stack) or the GPS subsystem.  GPS synchronized time is the
best.

This presents the issue of some appreciable time skew when we change RtcTime
to match what we've just picked up.  Anytime the time is forced, we will
reboot the system using a TIME_SKEW reboot reason.


Behaviour of rt64 timestamps.

rt64 (and RtcTime) is composed of component fields and the rt64 stamp
can skip values.  All times are UTC.

2018/01/01-(M)-00:00:00:0x0000, start of 2018, Monday.
  memory: 00 00 00 00 00 01 01 01 e2 07
          ss    s  m  h  dw d  mn year
  rt64:   00 00 00 00 00 01 01 01

32767 ticks ... 2018/01/01-(M)-00:00:00:0x7fff (M) and one tick later...
                2018/01/01-(M)-00:00:01:0x0000 (M)
  rt64:   ff 7f 00 00 00 01 01 01
          00 00 01 00 00 01 01 01
          ss    s  m  h  dw d  mn

  ff 7f 38 38 17 01 01 01 ... 2018/01/01-(M)-23:59:59:0x7fff (M)
  00 00 00 00 00 02 02 01 ... 2018/01/02-(T)-00:00:00:0x0000 (T)
  jiff  s  m  h  dw d  mn

  ff 7f 38 38 17 06 06 01 ... 2018/01/06-(S)-23:59:59:0x7fff (S) (sat)
  00 00 00 00 00 00 07 01 ... 2018/01/07-(S)-00:00:00:0x0000 (S) (sun)
  ff 7f 38 38 17 03 1f 01 ... 2018/01/31-(W)-23:59:59:0x7fff (W) (wed)
  00 00 00 00 00 04 01 02 ... 2018/02/01-(T)-00:00:00:0x0000 (T) (thu)

  00 00 00 00 00 04 01 02
  ff 7f 38 38 17 04 01 02
  00 00 00 00 00 05 02 02
  ff 7f 38 38 17 05 02 02
  00 00 00 00 00 06 03 02 ... 2018/02/03-(S)-00:00:00:0x0000 (S) (sat)
  ff 7f 38 38 17 06 03 02 ... 2018/02/03-(S)-23:59:59:0x7fff (S) (sat)
  00 00 00 00 00 00 04 02 ... 2018/02/04-(S)-00:00:00:0x0000 (S) (sun)

  ff 7f 38 38 17 05 1f 08 ... 2018/08/31-(F)-23:59:59:0x7fff (F) (fri)
  00 00 00 00 00 06 01 09 ... 2018/09/01-(S)-00:00:00:0x0000 (S) (sat)

  ff 7f 38 38 17 06 1d 0c ... 2018/12/29-(S)-23:59:59:0x7fff (S) (sat)
  00 00 00 00 00 00 1e 0c ... 2018/12/30-(S)-00:00:00:0x0000 (S) (sun)
  ff 7f 38 38 17 00 1e 0c ... 2018/12/30-(S)-23:59:59:0x7fff (S) (sun)
  00 00 00 00 00 01 1f 0c ... 2018/12/31-(M)-00:00:00:0x0000 (M) (mon)

  ff 7f 38 38 17 01 1f 0c ... 2018/12/31-(M)-23:59:59:0x7fff (M) (mon)

  00 00 00 00 00 02 01 01 ... 2019/01/01-(T)-00:00:00:0x0000 (T) (tue)

RtcTime:
  00 00 00 00 00 02 01 01 e3 07


Do we really need day of week?  Does that buy us anything?  It matches
the h/w and can also be used for alarms.
