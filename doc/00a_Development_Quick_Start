
Debian/Ubuntu

2019-05-22
    switch to stretch, 4096 bit signing key.
    Ubuntu 18.04, Debian Buster/Squeeze
    Doc update.  Add pip.  grip.

2018-04-08
    Doc update.  Update ARM toolchain notes.

2017-09-11
    Ubuntu 16.04, T2 (TinyProd) github:tp-freeforall/prod(tp-master),
    ARM toolchain, gcc 4.9.3, gdb 7.8.0 (32 bit), python support
    J-link (Segger), V6.16j (6.16.10)

    T2 (TinyProd) github:tp-freeforall/prod(tp-master),
    mspdebug JTAG debugging.   4.6.3 based msp430 toolchain
    Toolchain from http://tinyprod.net/repos/debian (msp430)

**************************************************************************************

1) Host OS Install.

We assume that Ubuntu/Debian has been installed.

sudo -s
apt install build-essential stow automake autoconf libtool libc6-dev
apt install git-core git-daemon-sysvinit git-doc git-email git-gui gitk gitmagic
apt install openssh-client openssh-server curl
apt install python3 python3-serial python python-serial
exit

# Ubuntu 14.04 uses git-daemon-run.  Doesn't work for 16.04 which uses
# git-daemon-sysvinit.  Ubuntu 16.04/18.04 uses git-daemon-sysvinit.

** Python tools:

Install PIP.
  Python2.7:
      sudo apt install python-pip python-dbus-dbg python-dbus-doc python-enum34-doc python-setuptools-doc
      pip --version

  Python 3:
      sudo apt install python3-pip
      pip3 --version

   grip, python-serial


2) add the TinyProd signing key

wget -O - http://tinyprod.net/repos/debian/tinyprod.key | sudo apt-key add -


3) update repositories

sudo -s
#
# teach dpkg/apt-get/aptitude about where to find the tinyprod tools repository
#
echo "deb http://tinyprod.net/repos/debian stretch main" >> /etc/apt/sources.list.d/tinyprod-debian.list
apt-get update
exit


4) MSP432 toolset: Install the TinyOS toolset (msp432)

4a) Install nesc and tinyos-tools-devel

    sudo apt install nesc tinyos-tools-devel

4b) Install 32 bit libraries for the ARM toolchain
    We assume we are executing on an amd64 machine but isn't really a dependancy
    except for an assumed execution of the arm toolchain which is i386 (subset
    of amd64).

    dpkg --print-foreign-architectures
    <should return i386, if not you will have to enable multi-arch support>

    sudo apt install -qy -V libc6:i386 libx11-6:i386 libasound2:i386        \
        libatk1.0-0:i386 libcairo2:i386 libcups2:i386 libdbus-glib-1-2:i386 \
        libgconf-2-4:i386 libgdk-pixbuf2.0-0:i386 libgtk-3-0:i386           \
        libice6:i386 libncurses5:i386 libsm6:i386 liborbit2:i386            \
        libudev1:i386 libusb-0.1-4:i386 libstdc++6:i386 libxt6:i386         \
        libxtst6:i386 libgnomeui-0:i386 libusb-1.0-0-dev:i386               \
        libcanberra-gtk-module:i386 gtk2-engines-murrine:i386 unzip         \
        libpython2.7:i386

    To enable multi-arch support:

        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get dist-upgrade


4c) Install ARM toolchain.  TinyOS for the msp432 requires the
    gcc-arm-none-eabi-4_9-2015q3 toolchain.  Later toolchains require nesc > 1.3.6.  (verify)

    cd ~
    mkdir installs
    cd installs
    ARM_TOOLS_BASE=https://launchpad.net/gcc-arm-embedded/4.9/4.9-2015-q3-update/+download
    ARM_TOOLS_TAR=gcc-arm-none-eabi-4_9-2015q3-20150921-linux.tar.bz2
    wget -nv -O gcc-arm-none-eabi.tar.bz2 $ARM_TOOLS_BASE/$ARM_TOOLS_TAR

    echo "*** Installing ARM toolchain"
    sudo tar xf ~/installs/gcc-arm-none-eabi.tar.bz2 -C /usr

    this will install the arm toolchain into /usr/gcc-arm-none-eabi-4_9-2015q3.  Your path
    should include /usr/gcc-arm-none-eabi-4_9-2015q3/bin


**************************************************************************************

5) Tree checkout

   TinyOS 2.x tree checkout  (tp-freeforall/prod)
   MamMark tree

    mkdir tag ; cd ~/tag
    git clone -v https://github.com/tp-freeforall/prod.git
    git clone -v https://github.com/MamMark/mm.git

  You might also want the project dot files:

    cd ~/tag
    git clone -v https://github.com/MamMark/dot-files.git


**************************************************************************************

6) Set up build environment settings

   export TINYOS_ROOT_DIR=${HOME}/tag/prod
   export TINYOS_ROOT_DIR_ADDITIONAL=${HOME}/tag/mm

7) Do a test compile.

   cd ~/tag/prod/apps/Blink
   make exp_msp432

8) Install Segger Jlink

   SUPPORT_ARCHIVE=http://tinyprod.net/dev-archive
   JLINK_DEB=${SUPPORT_ARCHIVE}/JLink_Linux_V616j_x86_64.deb
   wget -nv -O jlink.deb ${JLINK_DEB}
   dpkg -i jlink.deb

   The JLink software installs into /opt/SEGGER, however the deb package will install
   symbolic links in /usr/bin to the appropriate location in /opt/SEGGER.

9) Connect via JTag to MSP432a

   JLinkGDBServer -device msp432p401r -if swd

   This will fire up a gdbserver that listens by default on port 2331.

10) Connect via gdb to above JLinkGDBServer

    arm-none-eabi-gdb-py -i=mi -iex "target extended-remote localhost:2331" -cd build/<target>/ <binary>

    where <target> is the platform you have built for and <binary> is the elf output from the toolchain,
    typically main.exe (for tinyos builds)
