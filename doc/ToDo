Bugs:

mkdblk:

  mkdosfs -F32 -I -n"TagTest" -v /dev/sdb
  fsck -v /dev/sdb
  mkdblk -v -w /dev/sdb
  fsck -v /dev/sdb

(root) zot (7)# fsck -v /dev/sdb
fsck from util-linux 2.19.1
dosfsck 3.0.9 (31 Jan 2010)
dosfsck 3.0.9, 31 Jan 2010, FAT32, LFN
Checking we can access the last sector of the filesystem
Boot sector contents:
System ID "mkdosfs"
Media byte 0xf8 (hard disk)
       512 bytes per logical sector
      4096 bytes per cluster
        32 reserved sectors
First FAT starts at byte 16384 (sector 32)
         2 FATs, 32 bit entries
   1945600 bytes per FAT (= 3800 sectors)
Root directory start at cluster 2 (arbitrary size)
Data area starts at byte 3907584 (sector 7632)
    486214 data clusters (1991532544 bytes)
62 sectors/track, 62 heads
         0 hidden sectors
   3897344 sectors total
FATs differ but appear to be intact. Use which FAT ?
1) Use first FAT
2) Use second FAT
? 1

Selected 1st FAT.

Cluster 486213 out of range (486216 > 486215). Setting to EOF.
/DBLK0001
  File size is 1991913472 bytes, cluster chain length is 1991389184 bytes.
  Truncating file to 1991389184 bytes.
Checking for unused clusters.
Checking free cluster summary.
Leaving file system unchanged.
/dev/sdb: 4 files, 486214/486214 clusters


(root) zot (9)# fsck -v /dev/sdb
fsck from util-linux 2.19.1
dosfsck 3.0.9 (31 Jan 2010)
dosfsck 3.0.9, 31 Jan 2010, FAT32, LFN
Checking we can access the last sector of the filesystem
Boot sector contents:
System ID "mkdosfs"
Media byte 0xf8 (hard disk)
       512 bytes per logical sector
      4096 bytes per cluster
        32 reserved sectors
First FAT starts at byte 16384 (sector 32)
         2 FATs, 32 bit entries
   1945600 bytes per FAT (= 3800 sectors)
Root directory start at cluster 2 (arbitrary size)
Data area starts at byte 3907584 (sector 7632)
    486214 data clusters (1991532544 bytes)
62 sectors/track, 62 heads
         0 hidden sectors
   3897344 sectors total
FATs differ but appear to be intact. Use which FAT ?
1) Use first FAT
2) Use second FAT
? 2

2nd FAT all messed up.

Cluster 486213 out of range (486216 > 486215). Setting to EOF.
/DBLK0001
  Circular cluster chain. Truncating to 0 clusters.
/DBLK0001
  File size is 1991913472 bytes, cluster chain length is 0 bytes.
  Truncating file to 0 bytes.
Checking for unused clusters.
Reclaimed 179138 unused clusters (733749248 bytes).
Checking free cluster summary.
Free cluster summary wrong (0 vs. really 179138)
1) Correct
2) Don't correct
? 2
Leaving file system unchanged.
/dev/sdb: 4 files, 307076/486214 clusters
(root) zot (10)# 


*** after a clean mkdblk and format, running for a little bit (not starting in middle of dblk (unerased),
  we then fsck and get...

zot (22): fsck /dev/sdb
fsck from util-linux 2.19.1
dosfsck 3.0.9, 31 Jan 2010, FAT32, LFN
Cluster 486213 out of range (486216 > 486215). Setting to EOF.
/DBLK0001
  File size is 1991913472 bytes, cluster chain length is 1991389184 bytes.
  Truncating file to 1991389184 bytes.
Free cluster summary uninitialized (should be 0)
Leaving file system unchanged.
/dev/sdb: 4 files, 486214/486214 clusters

should be clean.


- at 115200, SiRFBin with recv_only turned on we see the stream no problem.
- at 115200, SiRFBin, recv_only == 0, we seem to lose some of the bytes.
  (check path length, this seems to have to do with setting timers which
  makes the path length too long.  We have since rewritten to avoid messing
  with timers at interrupt level (that was a bad thing anyway.  This needs
  to be tested.)
- try 57600.

1) Debug timed start up structure for GPS boot.

In no particular order:

- check 115200 for losing characters.

- if we switch to 57600 does it lose?

5) GPS SirfIII binary mode.

6) GPS SirfIII different baud rate

7) interrupts being turned off when gps releases and requests and something
   else needs it.  (SD?)

7a) try uwaiting for the gps bounce.  how long do we need to tweak
    the gps to get the power on reset.

7b) Do we need to power bounce at all?  Can't we just get the data stream
    to switch over?  Should be able to and it has shorter duration (but we
    only do this on boot and then only if 115200 doesn't work).

------------------------------------------------------------------------

1) Look at Power

2) SD to DMA (use DMA, need DMA interrupt vector)
2.1) figure out SpiPacket  problem, non-dma  (see 0 above)
2.2) figure out SpiPacket (dma) not getting completion interrupt.

3) SD kernel for when things go wrong.  Panic write to SD.

4) ADC timing  verify.

8) Different failure modes.
   . basic fall back. how many times to retry the SD before giving up.
   . basic comm mode.  Nothing else running?

9) check GPS power off, SD power off, tri-state stuff?  Are the pins valid.
   not worth doing on current prototype.  need to do once we turn.

12) Verify milli timer behaviour far into the future.  How do wraps work?

13) watchdog design.  How to detect when things stop?  Sensing.  If sensing is
    supposed to happen who watches.  Regime Control knows what is supposed to
    run.  It can wake up every now and then and check to see if the sensors
    have done their thing during the interval.

14) Timeouts on SD behaviour.

15) With a scope verify
    a) DCO timing
    b) TMilli
    c) T32KHz
    d) TMicro

16) GPS own configure/unconfigure.

------------------------------------------------------------------------

*0) look at SpiPacket at 2MHz not working vs. 500KHz.  look at email t2-devel folder.
   non-dma.  (email from Jan Hauer)  Done.  But Jan's fix doesn't keep the h/w
   busy (I think).  Solution,..  punt use dma.
*7) GPS p1.3 s/w uart. (abandoned)
*10) Investigate GPS power up.  What state does it come up in?  How to
    put into binary mode.  How to change baud rate.
*11) check out s/w uart interrupt.  (didn't pan out.  too much interrupt overhead)
    check out timer assisted s/w/ uart.
