
Panic and CrashDumps

The Tag implements a Panic/CrashDump facility.  This allows the s/w to
detect inconsistencies in the execution.  Unhandled exceptions also
makes use of this facility.

When a Panic or Crash occurs, the Tag s/w will write machine state and
any other information needed to describe the crash to a special area
on the Tag's uSD.

We make use of the work done by Adam Green on CrashCatcher/CrashDebug.
(see https://github.com/adamgreen/Crash{Catcher,Debug}).  We use a modified
format that includes Panic information, image_info, crash state, ram dump,
i/o state, and Flash crumbs.


sector = 512 bytes

* Work Items (*** done)

o eval what gdb needs
o extractor to go from PanicBlock to <name>.dbg
  CrashInfo, Ram, I/O
o eval breakpad     (https://chromium.googlesource.com/breakpad/breakpad)

o *** modify copy_region to conform to CrashDebug
o *** eval CrashCatcher (https://github.com/adamgreen/CrashCatcher)
o *** eval CrashDebug   (https://github.com/adamgreen/CrashDebug)
o *** define Panic Manager


* Preservation of State:

When a Panic or Exception occurs we want to preserve the state at the
time of the fault.  This is diagramed below.  On entry to the panic
subsystem (panic_main) there are two pointers passed in, old_stack and
crash_stack.

A minimal amount of information is saved on the old_stack and then we
switch to a new crash_stack that we know we can rely on.

** Panic entry:

    r0        0x15                  <-- panic code (subsystem)
    r1        0x5                   <-- where
    r2        0x5                   <-- panic arg0
    r3        0x0                   <-- panic arg1
    r4        0xf000
    r5        0x0
    r6        0x0
    r7        0x2000fed8
    r8        0x0
    r9        0x0
    r10       0x0
    r11       0x0
    r12       0x20002538
    sp        0x2000fed0            <- SP from fail (same as MSP)
    lr        0x533f                <- caller of Panic, bxLR
    pc        0x7c4                 <- save as bxPC in Panic
    xpsr      0x21000000            <- bxPSR
    msp       0x2000fed0            <- bxSP
    psp       0x0
    primask   0x0
    basepri   0x0
    faultmask 0x0
    control   0x0

                panic_arg2      panic_arg3
  0x2000fed0:	0x00000000	0x00000000	0x2000fee0	0x00000000
  0x2000fee0:	0x00000005	0x15050005	0x2000fef8	0x0000530d
  0x2000fef0:	0x00000000	0x00000000	0x00000000	0x00000000
  0x2000ff00:	0x00000005	0x050084bb	0x2000ff10	0x000084bb


** Entry to panic_main:

  old_stack (old_sp)
                primask         basepri         faultmask       control
  0x2000fea0:	0x00000000	0x00000000	0x00000000	0x00000000
                r0 - pcode      r1 - where      r2 - arg0       r3 - arg1
  0x2000feb0:	0x00000015	0x00000005	0x00000005	0x00000000
                r12             bxLR            bxPC            bxPSR
  0x2000fec0:	0x20002538	0x0000533f	0x000007c4	0x20000000
                panic_arg2      panic_arg3
  0x2000fed0:	0x00000000	0x00000000	0x2000fee0	0x00000000


  crash_stack:
                axPSR           PSP             MSP             r4
  0x20003a70	0x20000000	0x00000000	0x20003aa0	0x0000f000
                r5              r6              r7              r8
  0x20003a80	0x00000000	0x00000000	0x2000fed8	0x00000000
                r9              r10             r11             axLR
  0x20003a90	0x00000000	0x00000000	0x00000000	0x00000011
  0x20003aa0:	0x91919191	0x7a7a5115	0x7a7a5115	0x7a7a5115



** Exception/Fault entry:

   @ sdiv/0  -> will generate div0 fault (usage)
    r0        0x5
    r1        0x0
    r2        0x0
    r3        0x200026c0
    r4        0x0
    r5        0x20002509
    r6        0x20003154
    r7        0x0
    r8        0x0
    r9        0x0
    r10       0x0
    r11       0x0
    r12       0x20002534
    sp        0x2000ff60
    lr        0x593
    pc        0x3122
    xpsr      0x21000000
    msp       0x2000ff60
    psp       0x0
    primask   0x0
    basepri   0x0
    faultmask 0x0
    control   0x0

  0x2000ff60:	0x7a7a5115	0x7a7a5115	0x7a7a5115	0x7a7a5115
  0x2000ff70:	0x7a7a5115	0x7a7a5115	0x7a7a5115	0x7a7a5115
  0x2000ff80:	0x7a7a5115	0x7a7a5115	0x7a7a5115	0x7a7a5115
  0x2000ff90:	0x00000007	0x22062a1c	0x00000001	0x000046a9


** Entry to panic_main:

  old_stack:
                primask         basepri         faultmask       control
  0x2000ff30:	0x00000000	0x00000000	0x00000000	0x00000000
                r0              r1              r2              r3
  0x2000ff40:	0x00000005	0x00000000	0x00000000	0x200026c0
                r12             bxLR            bxPC            bxPSR
  0x2000ff50:	0x20002534	0x00000593	0x00003122	0x21000000
  0x2000ff60:	0x7a7a5115	0x7a7a5115	0x7a7a5115	0x7a7a5115


  crash_stack:
                axPSR           PSP             MSP             r4
  0x20003a80	0x20000006	0x00000000	0x20003ab0	0x00000000
                r5              r6              r7              r8
  0x20003a90	0x20002509	0x20003154	0x00000000	0x00000000
                r9              r10             r11             axLR
  0x20003aa0	0x00000000	0x00000000	0x00000000	0xfffffff9
  0x20003ab0:	0x91919191	0x7a7a5115	0x7a7a5115	0x7a7a5115


there is a control cell (panic_args) that holds the actual Panic argument
information.  In the case of an Exception/Fault, panic_args.pcode is set
to PANIC_EXC and where is set to the exception number.


* Panic Blocks

A Panic block is a single collection of all the information collected
about the machine state for a single crash.

A block includes the following information:

Block 0 (initial sector of a panic block)
1) Panic information, Subsystem, Where, a0-3.  and time stamp
2) image_info for image running.
3) AdditionalInfo
4) crash state: (captured information from the Panic or Exception crash)

   cpu registers
   fpu registers (if active)
   Fault State
5) RAM region header

Block 1+
6) Main Memory - 64K (128 sectors)

Block 129+
7) I/O state

   <base address>
   <length>
   <element_size>
   ...
   <base address>
   <length>
   <element_size>
   ...

8) Flash Crumbs (4KB, 8 sectors)


Panic Block:

A single instance of full machine state.  Needs to include Panic Info,
Image Info, Crash_State (cpu regs, fpu regs, fault state), RAM, Select I/O,
Flash Crumbs.

Panic Info:  (36 bytes)
    4  <sig>
    4  boot_count
    8  time stamp
    1  subsys
    1  where
    2  pad
    4  arg0
    4  arg1
    4  arg2
    4  arg3

Image_Info for running image (from image running)
  144  bytes


Additional Info: sector numbers of the location of different
pieces of the Panic Block.

    4  sig
    4  ram_sector
    4  io_sector
    4  fcrumb_sector


CrashInfo (CPU state):  (CrashCatcher/Debug format + additional)  260 bytes
  4    crash_info_signature
  4    primask
  4    basepri
  4    faultmask
  4    control
  4    axLR
  4    crash_catcher_signature
  4    flags
 52    R0 - R12
  4    SP
  4    LR
  4    PC
  4    PSR
  4    xPSR
       [floating point], valid if flags & 1
       fpcsr
       32 x 4 bytes (128 bytes)
 24    fault registers, 6 x 4
       SHCSR, CFSR, HFSR, DFSR, MMFAR, BFAR
       E000ED24        to              E000ED38

Total of above: 440


The Panic 0 Block is laid down to simplify extraction for CrashDebug.  We
want the CrashCatcher Info, RAM, and IO to be contiguous.  We do this by
placing PanicInfo, ImageInfo, and AdditionalInfo at the front of the Panic 0
Block, followed by sufficient padding to make the CrashInfo and a Ram Region
header line up at the end of the Panic0 Block.

Since the Panic 0 Block is immediately followed by the RAM region itself this
all looks proper for CrashDebug.


[Memory Region]
64K RAM   128 sectors

Peripherals:
    basic format

    4  base address             (defines which peripheral too)
    4  length
    4  element size
       ...
    4  base address
    4  length
    4  element size
       ...

Flash Crumbs:
  4096 bytes (8 sectors)


Total Panic Block size:
  home block + RAM + i/o + flash crumbs
      1        128   4     8           = 141 (round up to 150 sectors)


o I/O state.

  Estimated size: ~ 932 bytes ==> 1024 bytes with overhead.  4 sectors

(These need to be verified.  length)
(**** currently not used)
(**)  do first.

Periph          Base             length
Timer_A0        0x4000_0000      48 (0x30)              **
Timer_A1        0x4000_0400      48 (0x30)              **
Timer_A2        0x4000_0800      48 (0x30)
Timer_A3        0x4000_0C00      48 (0x30)
eUSCI_A0        0x4000_1000      32 (0x20)              **
eUSCI_A1        0x4000_1400      32 (0x20)              **
eUSCI_A2        0x4000_1800      32 (0x20)              **
eUSCI_A3        0x4000_1C00      32 (0x20)
eUSCI_B0        0x4000_2000      48 (0x30)              **
eUSCI_B1        0x4000_2400      48 (0x30)              **
eUSCI_B2        0x4000_2800      48 (0x30)              **
eUSCI_B3        0x4000_2C00      48 (0x30)              **
REF_A           0x4000_3000       2         ****
Comp_E0         0x4000_3400      16 (0x10)  ****
Comp_E1         0x4000_3800      16 (0x10)  ****
AES246          0x4000_3C00      16 (0x10)
CRC32           0x4000_4000      32 (0x20)
RTC_C           0x4000_4000      32 (0x20)              **
WDT_A           0x4000_4400       2                     **
Port            0x4000_4c00     160 (0xA0)              **
 PJ             0x4000_4D20      18 (0x12)              **
PortMap         0x4000_5000      64 (0x40)              **
Cap_0           0x4000_540E       2         ****
Cap_1           0x4000_580E       2         ****
Timer32         0x4000_C000      64 (0x40)              **
DMA             0x4000_E000      48 (0x30)              **
                0x4000_E100      32 (0x20)                   ???
                0x4000_F000      80 (0x50)              **
PCM             0x4001_0000      20 (0x14)              **
CS              0x4001_0400     104 (0x68)              **
PSS             0x4001_0800      64 (0x40)              **
FLCTL           0x4001_1000                 needs eval  **
ADC14           0x4001_2000     344 (0x158) needs eval  **


o Private Peripheral Bus
  we need more,  look at these.

RSTCTL          0xE004_2000      72 (0x48)
SYSCTL          0xE004_3000      52 (0x34)
SYSCTL_Boot     0xE004_4000      28 (0x1c)


o Correlating Panics to the DataStream.

When we Panic we will write out a Panic block which includes both the
boot_count and a current 64 bit xT (eXternal Time, xT0) time stamp
(currently place held by cycle and time_stamp).

When we reboot, boot_count will be incremented by one, and a Reboot_Sync
record will be written out to the DataStream.  This record will also have
the current xT (xT_1 > xT_0) and the boot_count.


o Exception Stack Frame:

  no FP (non-FP state)
    ...
    (aligner)
    xPSR
    PC
    LR
    R12
    R3
    R2
    R1
    R0

  FP (FP state)
    ...
    (aligner)
    FPSCR (64 bits)
    S15                 S16-S31 are callee saved
     .                  uppers
     .
     .
    S0
    xPSR
    PC
    LR
    R12
    R3
    R2
    R1
    R0


xPSR: 31 30 29 28 27  26-25 24 23-20 19-16 15-10  9    8-0
       N  V  C  V  Q ICI/IT  T         GE  ICI/IT S  exception

APSR:  N  V  C  V  Q                   GE
IPSR:                                               exception
EPSR:                ICI/IT  T             ICI/IT

S = 1 if stack adjusted for alignment.  On exception entry if SCB->CCR.STKALIGN is
set, make sure that on entry the stack is 8-byte aligned.  If a pad word was added
then bit 9 of the xPSR will be set.


EXC_RTN: Exception Return
    0xFFFF_FFE1         Return to Handler mode
                        uses FP state from MSP
                        uses MSP after return

    0xFFFF_FFE9         Return to Thread mode
                        uses FP state from MSP
                        uses MSP after return

    0xFFFF_FFED         return to Thread mode
                        uses FP state from PSP
                        uses PSP after return

    0xFFFF_FFF1         return to Handler mode
                        uses non-FP state from MSP
                        uses MSP after return

    0xFFFF_FFF9         return to Thread mode
                        uses non-FP state from MSP
                        uses MSP after return

    0xFFFF_FFFD         return to Thread mode
                        uses non-FP state from PSP
                        uses PSP after return

Exception return bits fields:
    bit 4       bit 3       bit 2           bit 1       bit 0
    FP state    return mode return stack    reserved    Process state
    FP/nFP      H/T         M/P             must be 0   ARM/Thumb (set to 1)
     0/1        0/1         0/1             0             0/1

bit 4: Stack Frame Type.
       1 - 8 words
       0 - 26 words.

bit 3: Return Mode
       1 - return to Thread Mode.
       0 - return to Handler Mode.

bit 2: Return Stack.
       1 - return with PSP
       0 - return with MSP

bit 1: must be 0

bit 0: must be 1, Thumb only.


o Control register

CONTROL register: 31-3 2 1 0
                       | | +- nPriv
                       | + -- SPSEL
                       +----- FPCA

nPriv - privileged level, thread priv level, 0 privileged in Thread mode.
SPSEL - stack selecte, 0 - MSP, 1 - PSP
FPCA  - Floating Point Context Active

In Handler mode, processor is always privileged and always on the MSP.
