

Panic and CrashDumps

The Tag implements a Panic/CrashDump facility.  This allows the s/w to
detect inconsistencies in its execution.  Unhandled exceptions also
makes use of this facility.

When a Panic or Crash occurs, the Tag s/w will write machine state and
any other information needed to describe the crash to a special area
on the Tag's uSD, the Panic Area.  Each crash is written to a single
area called a Panic Block.  The Panic Area consists of a directory followed
by one or more panic blocks.  The panic directory indicates which panic
blocks have been filled in.

We make use of the work done by Adam Green on CrashCatcher/CrashDebug.
(see https://github.com/adamgreen/Crash{Catcher,Debug}).  We use a modified
format that includes Panic information, image_info, crash state, ram dump,
i/o state, and Flash crumbs.


* misc. information

o sector = 512 bytes

o block_id/sector_id: a 32 bit absolute sector number.  The low level
  panic code uses absolute sector numbers for writing/reading panics.

o offset.  An offset is a file relative offset from the start of the
  area in question.  ie.  the directory starts at offset 0.


* Panic Area organization

The Panic Area can be located using the following calls to the File System.

    start = call FileSystem.area_start(FS_LOC_PANIC);
    end   = call FileSystem.area_end(FS_LOC_PANIC);

These calls return the starting and ending sectors of the panic area
(inclusive).  No access to any sectors outside this area should be
done by the panic subsystem.


** Basic organization

The Panic Area is organized as follows:
assuming a block_index_max of 32.

    never goes below dir_sector (start)
    +-----------------------------------------+
    |                                         |
    |                                         |
    |                directory                |
    |                                         |  1 sector
    |                  limits                 |
    |                  index                  |
    |                block_size               |
    |                                         |
    +-----------------------------------------+
    |                                         |
    |                                         |
    .                                         .
    .               panic block               . block_size sectors
    .                index 0                  . (panic 0)
    |                                         |
    |                                         |
    +-----------------------------------------+
    |                                         |
    |                                         |
    .                                         .
    .               panic block               . (panic 1)
    .                index 1                  .
    |                                         |
    |                                         |
    +-----------------------------------------+
                        .
                        .
                        .
    +-----------------------------------------+
    |                                         |
    |                                         |
    .                                         .
    .               panic block               . (panic 31)
    .                index 31                 .
    |                                         |
    |                                         |
    +-----------------------------------------+
    never goes past high_sector (end)



*** Panic Block Organization

Each panic block consists of the following parts:

    +-----------------------------------------+
    |                                         |
    | panic_hdr_0                             | 1 sector
    |                                         |
    | panic_info                              |
    | overwatch_control_block                 |
    | image_info                              |
    | additional_info                         |
    | panic_hdr_0_checksum                    |
    |                                         |
    +-----------------------------------------+
    |                                         |
    | panic_hdr_1                             | 1 sector
    |                                         |
    | panic_hdr_1_sig                         |
    | core_rev/core_minor                     |
    | alignment_pad                           |
    |                                         |
    | panic_hdr_0_offset                      |
    | panic_hdr_1_offset                      |
    | panic_hdr_1_checksum                    |
    | ram_checksum                            |
    | io_checksum                             |
    | crash_info                              |
    | ram_header                              |
    +-----------------------------------------+
    |                                         |
    | ram sectors                             | 128 sectors
    | 64KiB                                   |
    |                                         |
    .                                         .
    .                                         .
    .                                         .
    |                                         |
    +-----------------------------------------+
    |                                         |
    | i/o sectors                             | padded to 12 sectors
    |                                         |
    +-----------------------------------------+
    |                                         |
    | flash crumbs                            | 8 sectors
    | 4 KiB                                   |
    |                                         |
    +-----------------------------------------+

Current block_size is 150 sectors


**** Notes:

o panic_hdr_0 starts with panic_info, the first word of which is the
  panic_info_sig.  That is panic_hdr_0 starts with the PANIC_INFO_SIG.

o panic_hdr_1 starts with panic_hdr_1_sig.  Both panic_hdrs start with
  specific signatures.

o panic_hdr_1 includes a core_rev/core_minor marker.  This is the value
  of core_rev/minor at the time the panic is written.  The current value
  indicating the state of core data structures at the time this image
  was built.

o panic_hdr_0 is checksummed by panic_hdr_0_checksum.  It is a simple 32 bit
  byte external checksum over all bytes of panic_hdr_0.

o panic_hdr_1 is protected by panic_hdr_1_checksum.  32 bit byte external
  checksum.

o both panic_hdr_0 and hdr_1 are exactly 512 bytes long, each.  Image_info
  is sized such that panic_hdr_0 is 512 bytes long.  Similarily alignment_pad
  in panic_hdr_1 is used to force panic_hdr_1 to be 512 bytes long.

o crash_info and ram_header in panic_hdr_1 must be physically aligned at the
  end of the sector such that they are physically contiguous with the
  ram sectors that follow.

o the contiguous bytes starting with crash_info, ram_header, ram_sectors, and
  i/o sectors can be extracted and fed to CrashDebug for postmortem analysis.


** Definitions

Panic Area definitions are defined in tos/system/panic/panic.h and python
tool structures are defined in tools/utils/tagcore/tagcore/panic_headers.py.


*** Panic Directory

The first sector of the panic area is the panic directory.

typedef struct {
  uint8_t  panic_dir_id[PANIC_ID_SIZE]; /* PANI */
  uint32_t panic_dir_sig;
  uint32_t panic_dir_sector;            /* limits of panic file, absolute */
  uint32_t panic_high_sector;           /* upper limit, inclusive         */
  uint32_t panic_block_index;           /* next panic block to write      */
  uint32_t panic_block_index_max;       /* upper limit of indicies        */
  uint32_t panic_block_size;            /* size of each panic block       */
  uint32_t panic_dir_checksum;
} panic_dir_t;

dir_id:     4 bytes, human readable identifier, redundant. 'PANI'
            used when looking at panic areas.  gives one a warm fuzzy.

dir_sig:    majik number signature used for redundant checks.

dir_sector: redundant absolute sector number of the panic directory.
            should match what FileSystem.area_start returns.

high_sector: redundant absolute sector number of the last panic sector
            in the panic area.

block_index: index of the next panic block to write.

block_index_max: the maximum possible index that can be indicated.  For
            example, a block_index_max of 32 says at most we can have
            32 panic blocks, panics 0-31.  It is calculated based on the
            block_size (in sectors) of each panic block and the size
            of the panic area.

block_size: The block size in sectors of each panic block.

dir_checksum: A 32 bit quad inclusive checksum over the directory structure.


*** Panic Block details

A block includes the following information:

(see tos/system/panic/panic.h)
Block 0 (Panic Hdr 0/1, initial sectors of a panic block, 2 sectors)
1) Panic information, core information about the crash.
   (base address and timestamp of crash)
2) Overwatch control block.  More information about the state of the
   machine.  Includes panic information, Subsystem, Where, a0-3.
2) image_info for image running.
3) AdditionalInfo
4) crash state: (captured information from the Panic or Exception crash)
   cpu registers
   fpu registers (if active)
   Fault State
5) RAM region header

Block 2+
6) Main Memory - 64K (128 sectors)

Block 130+
7) I/O state

   <start address>      inclusive
   <end   address>      exclusive
   ...
   <start address>
   <end   address>
   ...

8) Flash Crumbs (4KB, 8 sectors)


The Panic Hdrs are constructed to simplify extraction of crash
information for CrashDebug.  CrashDebug wants to see CrashCatcher
Info, RAM, and IO information contiguous.

We do this by placing additional information, PanicInfo, OWCB, ImageInfo,
and AdditionalInfo in the first panic hdr (hdr0).

The second panic hdr (hdr1), includes various checksums, and more importantly
the CrashCatcher information (crash_info) and the ram_header describing the
following ram area.  Crash_info and the Ram_header are requried to be
physically contiguous with the following ram area.

Both hdr0 and hdr1 are constructed to be physically 512 bytes in size.


**** Panic Header 0

panic_info
o pi_sig        signature at start of panic_info, verify we are looking
                at the correct data structure.
o base_addr     base address of image that panic'd.
o rt            rtc time of when the panic occurred.

o overwatch_control_block
                a copy of the overwatch_control_block at the time the panic
                occurred.
o image_info    image indentifing information copied from the running image.
                from the image currently executing (ie. running the Panic)

additional_info: additional info provides various file offsets for the
        different parts of the panic block.

o ai_sig:       majik number for verifying we are looking at the right info.
o ram_offset:   file offset of where the ram starts in the panic area.  file
                offset from the start of the panic_area.
o ram_size:     ram size in bytes.  0x10000 for 64KiB.
o io_offset:    file offset of where the i/o parts live.
o fcrumb_offset:file offset of fcrumb section (currently not used).

ph0_checksum    a 32 bit byte external checksum of panic_hdr_0.


**** Panic Header 1

ph1_sig         majik number at start of panic_hdr_1
core_rev/minor  core_rev at the time this image was built.
alignment_pad   pad bytes to push crash_info and ram_header to end of sector.
ph0_offset      file offset of panic_hdr_0
ph1_offset      file offset of panic_hdr_1
ph1_checksum    32 bit byte external checksum over panic_hdr_1
ram_checksum    32 bit byte external checksum over ram contents
io_checksum     32 bit byte external checksum of i/o data.

crash_info      CrashDebug compatible postmortem state
ram_header      header for ram dump



* Overview of Panic updates.

At any given time, the value of block_index indicates the next panic block
that will be written.  ie.  A block_index of 0 indicates that no panics
have been written.  (This can only occur if the panic directory is zeroed,
indicating no panics).  If block_index is 1, this indicates the next panic
to be written is block 1 and that one panic (0) has been written.

Initially the panic directory will be zero'd indicating that no panics have
been written.

When the SD disk is formatted a fixed size for the Panic Area is allocated.
This means there is a fixed number of panic blocks supported.

The panic subsystem is configured with a specific size for each panic block
and will automatically configure itself to use an appropriate number of
panic blocks in the panic area.  This is reflected in the panic directory
once the initial panic block has been written (block_index_max).

When the first panic occurs, the zeroed directory indicates no panics, the
directory and control blocks will be initialized for the first panic, the
panic block will be written, and the directory will be updated accordingly.
At that point, the directory will reflect that one panic exists (index is
1) and panic block 0 exists.

Once the last panic block has been written any additional panics will reuse
this last block.  In other words, the first 32 panics (assuming a
block_index_max of 32) will get written and the 33rd and later panics will
overwrite the last panic block.  You will get the first 31 panics and the
last panic that occurs.



* Panic Inspection and Xtraction (PIX)

The tool, PIX, is used to examine and extract panics from a remote tag.

When pointed at a tag's panic/byte file (the tagfuse representation of
the tag's panic area), we want the following:

    o examine the directory and determine how many panics have been
      written.

    o for any panic, extract and display the following information:

      - what was the panic: pcode, where, arg0-3
      - rtctime of the panic
      - image identifier

Further, would like to be able to specify a specific panic block to
extract.  This extraction starts at the crash_info offset and extracts
all bytes up to and including the end of the i/o records.

Since this i/o is going to and from an operational tag we want it to
be sparse.  Only ask and read the minimal amount of informaton that
is needed to get the job done.


* Preservation of State:

When a Panic or Exception occurs we want to preserve the state at the
time of the fault.  This is diagramed below.  On entry to the panic
subsystem (panic_main) there are two pointers passed in, old_stack and
crash_stack.

A minimal amount of information is saved on the old_stack and then we
switch to a new crash_stack that we know we can rely on.




* Panic Entry Details

  Panic entry:
    r0        0x15                  <-- panic code (subsystem)
    r1        0x5                   <-- where
    r2        0x5                   <-- panic arg0
    r3        0x0                   <-- panic arg1
    r4        0xf000
    r5        0x0
    r6        0x0
    r7        0x2000fed8
    r8        0x0
    r9        0x0
    r10       0x0
    r11       0x0
    r12       0x20002538
    sp        0x2000fed0            <- SP from fail (same as MSP)
    lr        0x533f                <- caller of Panic, bxLR
    pc        0x7c4                 <- save as bxPC in Panic
    xpsr      0x21000000            <- bxPSR
    msp       0x2000fed0            <- bxSP
    psp       0x0
    primask   0x0
    basepri   0x0
    faultmask 0x0
    control   0x0

                panic_arg2      panic_arg3
  0x2000fed0:	0x00000000	0x00000000	0x2000fee0	0x00000000
  0x2000fee0:	0x00000005	0x15050005	0x2000fef8	0x0000530d
  0x2000fef0:	0x00000000	0x00000000	0x00000000	0x00000000
  0x2000ff00:	0x00000005	0x050084bb	0x2000ff10	0x000084bb


** Entry to panic_main:

  old_stack (old_sp)
                primask         basepri         faultmask       control
  0x2000fea0:	0x00000000	0x00000000	0x00000000	0x00000000
                r0 - pcode      r1 - where      r2 - arg0       r3 - arg1
  0x2000feb0:	0x00000015	0x00000005	0x00000005	0x00000000
                r12             bxLR            bxPC            bxPSR
  0x2000fec0:	0x20002538	0x0000533f	0x000007c4	0x20000000
                panic_arg2      panic_arg3
  0x2000fed0:	0x00000000	0x00000000	0x2000fee0	0x00000000


  crash_stack:
                axPSR           PSP             MSP             r4
  0x20003a70	0x20000000	0x00000000	0x20003aa0	0x0000f000
                r5              r6              r7              r8
  0x20003a80	0x00000000	0x00000000	0x2000fed8	0x00000000
                r9              r10             r11             axLR
  0x20003a90	0x00000000	0x00000000	0x00000000	0x00000011
  0x20003aa0:	0x91919191	0x7a7a5115	0x7a7a5115	0x7a7a5115



** Exception/Fault entry:

   @ sdiv/0  -> will generate div0 fault (usage)
    r0        0x5
    r1        0x0
    r2        0x0
    r3        0x200026c0
    r4        0x0
    r5        0x20002509
    r6        0x20003154
    r7        0x0
    r8        0x0
    r9        0x0
    r10       0x0
    r11       0x0
    r12       0x20002534
    sp        0x2000ff60
    lr        0x593
    pc        0x3122
    xpsr      0x21000000
    msp       0x2000ff60
    psp       0x0
    primask   0x0
    basepri   0x0
    faultmask 0x0
    control   0x0

  0x2000ff60:	0x7a7a5115	0x7a7a5115	0x7a7a5115	0x7a7a5115
  0x2000ff70:	0x7a7a5115	0x7a7a5115	0x7a7a5115	0x7a7a5115
  0x2000ff80:	0x7a7a5115	0x7a7a5115	0x7a7a5115	0x7a7a5115
  0x2000ff90:	0x00000007	0x22062a1c	0x00000001	0x000046a9


** Entry to panic_main:

  old_stack:
                primask         basepri         faultmask       control
  0x2000ff30:	0x00000000	0x00000000	0x00000000	0x00000000
                r0              r1              r2              r3
  0x2000ff40:	0x00000005	0x00000000	0x00000000	0x200026c0
                r12             bxLR            bxPC            bxPSR
  0x2000ff50:	0x20002534	0x00000593	0x00003122	0x21000000
  0x2000ff60:	0x7a7a5115	0x7a7a5115	0x7a7a5115	0x7a7a5115


  crash_stack:
                axPSR           PSP             MSP             r4
  0x20003a80	0x20000006	0x00000000	0x20003ab0	0x00000000
                r5              r6              r7              r8
  0x20003a90	0x20002509	0x20003154	0x00000000	0x00000000
                r9              r10             r11             axLR
  0x20003aa0	0x00000000	0x00000000	0x00000000	0xfffffff9
  0x20003ab0:	0x91919191	0x7a7a5115	0x7a7a5115	0x7a7a5115


there is a control cell (panic_args) that holds the actual Panic argument
information.  In the case of an Exception/Fault, panic_args.pcode is set
to PANIC_EXC and where is set to the exception number.


* Panic Blocks other details

Total Panic Block size (in sectors):
  panic hdrs + RAM + i/o + flash crumbs
      2        128   4     8           = 142 (round up to 150 sectors)

(max i/o sectors is increased from 4 to 12).


o I/O state.

  Estimated size: ~ 932 bytes ==> 1024 bytes with overhead.  4 sectors

(These need to be verified.  length)
(**** currently not used)
(**)  do first.

Periph          Base             length
Timer_A0        0x4000_0000      48 (0x30)              **
Timer_A1        0x4000_0400      48 (0x30)              **
Timer_A2        0x4000_0800      48 (0x30)
Timer_A3        0x4000_0C00      48 (0x30)
eUSCI_A0        0x4000_1000      32 (0x20)              **
eUSCI_A1        0x4000_1400      32 (0x20)              **
eUSCI_A2        0x4000_1800      32 (0x20)              **
eUSCI_A3        0x4000_1C00      32 (0x20)
eUSCI_B0        0x4000_2000      48 (0x30)              **
eUSCI_B1        0x4000_2400      48 (0x30)              **
eUSCI_B2        0x4000_2800      48 (0x30)              **
eUSCI_B3        0x4000_2C00      48 (0x30)              **
REF_A           0x4000_3000       2         ****
Comp_E0         0x4000_3400      16 (0x10)  ****
Comp_E1         0x4000_3800      16 (0x10)  ****
AES246          0x4000_3C00      16 (0x10)
CRC32           0x4000_4000      32 (0x20)
RTC_C           0x4000_4000      32 (0x20)              **
WDT_A           0x4000_4400       2                     **
Port            0x4000_4c00     160 (0xA0)              **
 PJ             0x4000_4D20      18 (0x12)              **
PortMap         0x4000_5000      64 (0x40)              **
Cap_0           0x4000_540E       2         ****
Cap_1           0x4000_580E       2         ****
Timer32         0x4000_C000      64 (0x40)              **
DMA             0x4000_E000      48 (0x30)              **
                0x4000_E100      32 (0x20)                   ???
                0x4000_F000      80 (0x50)              **
PCM             0x4001_0000      20 (0x14)              **
CS              0x4001_0400     104 (0x68)              **
PSS             0x4001_0800      64 (0x40)              **
FLCTL           0x4001_1000                 needs eval  **
ADC14           0x4001_2000     344 (0x158) needs eval  **


o Private Peripheral Bus
  we need more,  look at these.

RSTCTL          0xE004_2000      72 (0x48)
SYSCTL          0xE004_3000      52 (0x34)
SYSCTL_Boot     0xE004_4000      28 (0x1c)


o Correlating Panics to the DataStream.

On a reboot, the new Reboot record will include an rtctime stamp, the
PANIC reason, information about what the panic was, and the index of the
panic block that was written for the crash.


** Other misc stuff.

o Exception Stack Frame:

  no FP (non-FP state)
    ...
    (aligner)
    xPSR
    PC
    LR
    R12
    R3
    R2
    R1
    R0

  FP (FP state)
    ...
    (aligner)
    FPSCR (64 bits)
    S15                 S16-S31 are callee saved
     .                  uppers
     .
     .
    S0
    xPSR
    PC
    LR
    R12
    R3
    R2
    R1
    R0


xPSR: 31 30 29 28 27  26-25 24 23-20 19-16 15-10  9    8-0
       N  V  C  V  Q ICI/IT  T         GE  ICI/IT S  exception

APSR:  N  V  C  V  Q                   GE
IPSR:                                               exception
EPSR:                ICI/IT  T             ICI/IT

S = 1 if stack adjusted for alignment.  On exception entry if SCB->CCR.STKALIGN is
set, make sure that on entry the stack is 8-byte aligned.  If a pad word was added
then bit 9 of the xPSR will be set.


EXC_RTN: Exception Return
    0xFFFF_FFE1         Return to Handler mode
                        uses FP state from MSP
                        uses MSP after return

    0xFFFF_FFE9         Return to Thread mode
                        uses FP state from MSP
                        uses MSP after return

    0xFFFF_FFED         return to Thread mode
                        uses FP state from PSP
                        uses PSP after return

    0xFFFF_FFF1         return to Handler mode
                        uses non-FP state from MSP
                        uses MSP after return

    0xFFFF_FFF9         return to Thread mode
                        uses non-FP state from MSP
                        uses MSP after return

    0xFFFF_FFFD         return to Thread mode
                        uses non-FP state from PSP
                        uses PSP after return

Exception return bits fields:
    bit 4       bit 3       bit 2           bit 1       bit 0
    FP state    return mode return stack    reserved    Process state
    FP/nFP      H/T         M/P             must be 0   ARM/Thumb (set to 1)
     0/1        0/1         0/1             0             0/1

bit 4: Stack Frame Type.
       1 - 8 words
       0 - 26 words.

bit 3: Return Mode
       1 - return to Thread Mode.
       0 - return to Handler Mode.

bit 2: Return Stack.
       1 - return with PSP
       0 - return with MSP

bit 1: must be 0

bit 0: must be 1, Thumb only.


o Control register

CONTROL register: 31-3 2 1 0
                       | | +- nPriv
                       | + -- SPSEL
                       +----- FPCA

nPriv - privileged level, thread priv level, 0 privileged in Thread mode.
SPSEL - stack selecte, 0 - MSP, 1 - PSP
FPCA  - Floating Point Context Active

In Handler mode, processor is always privileged and always on the MSP.
