
This brief is written assuming that there is a common root directory,  we'll
call it mm_t2 and it is usually at the top level of a working directory.

1) OS Install.

Install the OS, Ubuntu on the box.  Recommended is Ubuntu 9.10.  A
simple install is fine and will take less time.  Download the install
ISO from http://www.ubuntu.com/getubuntu/download.

When the install is complete, boot the system, and use Synaptic or other package
manager ("apt-get install") to make sure the following packages are installed:

    build-essential stow automake autoconf libtool libc6-dev
    git-core git-daemon-run git-doc git-email git-gui gitk gitmagic
    openssh-client openssh-server


2) We use GIT as the SCM.  Here are some pointers to get you started:

   Start here:   http://book.git-scm.com/2_setup_and_initialization.html
   Everyday GIT: http://www.kernel.org/pub/software/scm/git/docs/everyday.html
   Cheat Sheet:  http://zrusin.blogspot.com/2007/09/git-cheat-sheet.html
   SVN to GIT:   http://git-scm.com/course/svn.html
   GIT Book:     http://book.git-scm.com/
   Another Book: http://progit.org/book/


3) T2_MM3 tree checkout:  The t2_mm3 tree is a seperate t2 based
tree that has mm3 unique code to build the mm3 load.

    git://hinrg.cs.jhu.edu/git/cire/t2_mm3.git (read only)

    cd ~/mm_t2				# cd to top working dir.
    git clone git://hinrg.cs.jhu.edu/git/cire/t2_mm3.git
    cd t2_mm3

    this will create the directory ~/mm_t2/t2_mm3 and you will be on the master
    branch.  Which is where you want to be.

    Any patches etc should be emailed.  (Can be prepared with git-format-patch
    or git-log).


4) TinyOS 2.x tree checkout

Documentation on getting started with T2 can be found at:

    http://docs.tinyos.net
    http://docs.tinyos.net/index.php/Getting_started


The main tracking repo is at:

    git://hinrg.cs.jhu.edu/git/cire/tinyos-2.x.git
        read-only, cire tracking repo that tracks hinrg t2, updated manually
	This also has the mm3 code, branched off the hinrg t2 mainline

Changes needed to build the mm3 tree can be obtained via the mm3_tip
branch on the cire/tinyos-2.x.git repo.

To obtain the current mm3_tip branch:

    cd ~/mm_t2
    mkdir t2_cur
    cd t2_cur
    git clone -v git://hinrg.cs.jhu.edu/git/cire/tinyos-2.x.git
    cd tinyos-2.x
    git checkout -t origin/mm3_tip


5) Install TinyOS toolset (msp430, avr)

We want the tinyos toolset for the msp430 (telosb) and the avr (micaz, mica2).
Debian packages are available from Stanford.

Modify the repository list using "System->Administration->Software
Sources", "Other Software" to include:

    deb http://tinyos.stanford.edu/tinyos/dists/ubuntu/ hardy main

Enter the above to the APT Line prompt as written above.


Install the following packages:

           deputy-tinyos
           msp430-binutils-tinyos
           msp430-gcc-tinyos
           msp430-libc-tinyos
           msp430-tinyos
           msp430-tinyos-base
           nesc
           tinyos-base
           tinyos-tools


6) Modify PATH and LD_LIBRARY_PATH

Make sure your PATH and LD_LIBRARY_PATH include /opt/msp430 and
/usr/msp430 as appropriate.  Note if you use the build environment as
specified in the next section you don't have to mess with M1 and M2
below.  It is done in section 7.


   M1="/opt/msp430"
   M2="/usr/msp430"
   export PATH="$PATH:$M1/bin:$M2/bin"
   export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$M1/lib:$M2/lib:/usr/local/lib"


7) Set up build environment settings

The following environment variables must be set to build.

    TOSROOT
    TOSDIR
    MAKERULES
    CLASSPATH
    TOSMAKE_PATH

    for example:  working dir ~/mm_t2
  
  	#!/bin/sh
  
  	MOTECOM="serial@/dev/ttyS0:telosb"
  
  	TOSROOT=~/mm_t2/t2_cur/tinyos-2.x
  	TOSDIR=$TOSROOT/tos
  
  	MAMMARK_DIR="/home/joe/mm_t2/t2_mm3"
  	TOSMAKE_PATH="$TOSMAKE_PATH $MAMMARK_DIR/support/make"
  
  	M1="/opt/msp430"
  	M2="/usr/msp430"
  	PATH="$PATH:$M1/bin:$M2/bin"
  	LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$M1/lib:$M2/lib:/usr/local/lib"
  
  	MAN_PATH="$MAN_PATH:$M1/man:$M2/man"
  
  	MAKERULES=$TOSROOT/support/make/Makerules
  	CLASSPATH=.:$TOSROOT/support/sdk/java/tinyos.jar
  
  	PYTHONPATH=$TOSROOT/support/sdk/python:$PYTHONPATH
  	PYTHONPATH=$M1/lib:$M1/bin:$M2/lib:$M2/bin:$PYTHONPATH
  	PYTHONPATH=$M1/lib/python2.3/site-packages:$PYTHONPATH
  	PYTHONPATH=$M2/lib/python2.3/site-packages:$PYTHONPATH
  
  	#LIBMSPGCC_PATH=$M1/lib:$M2/lib
  
  	export MAKERULES TOSDIR TOSROOT CLASSPATH PYTHONPATH LD_LIBRARY_PATH
  	export LIBMSPGCC MOTECOM MAMMARK_DIR TOSMAKE_PATH


8) TI USB Jtag driver fix

9.10 has the correct driver so this no longer needs to be done.


9) USB Jtag, /dev/ttyUSBn config 2, permissions fix

We also want to install a udev rule that will correctly enable configuration 2
of the jtag pod (this makes it work).  We also modify the permission rule so that
group user can access the jtag pod.  Files exist in the msp430fet_driver directory.

   a) Install the 40-ti-usb-3410-5052.rules into /etc/udev/rules.d.
  
      cp 40-ti-usb-3410-5052.rules /etc/udev/rules.d
      mkdir -p /etc/udev/scripts
      cp msp430_init /etc/udev/scripts
  
   b) make the following change in /etc/udev/rules.d/40-permissions.rules
  
   change:
  
       SUBSYSTEM=="tty",                        GROUP="dialout"
  
   to:
  
       SUBSYSTEM=="tty",                        GROUP="users", MODE="0660"
  
  
   Make sure that any users that will be using the device are in group "users".


10) Install gdb and msp430-jtag from temporary location

[Needs work] where to stash the packages.

   *** These need to be put into a hardy debian package, they will be ***
   *** included in the tinyos-optional (msp430 flavor)                ***

   a) cd ~/mm_t2  (remember to be enabled, sudo)
   b) cd t2_mm3/Added_Bits/tools
   c) make install

   This should install into /opt/msp430/bin gdb.430 (the msp430-gdb debugger),
   msp430-jtag and some other tools.  Appropriate libraries are installed into
   /opt/msp430/lib.


11) Build SerialForwarder and libmote library.

    Build the serial forwarder and associated library (also includes direct serial access)

      cd $TOSROOT/support/sdk/c/sf
      ./bootstrap
      ./configure --prefix=/opt/stow/sf_c
      make

      sudo -s
      make install

      ("sudo make install" for some reason doesn't pick up the value of $TOSROOT properly so
      the make install doesn't work write unless you are root first)

      This will install bin/{sf, sflisten, sfsend, seriallisten, serialsend}, include/{message.h,
      serialsource.h, sfsource.h}, and lib/libmote.a.  These will be installed into /opt/stow/sf_c.


   Install into /opt/{bin,include,lib} using stow.

      cd /opt/stow
      stow sf_c


12) Using the serialforwarder/seriallistener

    a) make sure that tinyos.jar has been built.  It should live in $TOSROOT/support/sdk/java/tinyos.jar
    b) to rebuild:
  
       cd $TOSROOT/support/sdk/java/
       make tinyos.jar
  
    c) Install TOSComm JNI support if needed.  Did java bitch about not finding TOSComm JNI support?
  
       assuming tinyos-tools is installed run:
  
       tos-install-jni
  
    d) To watch raw bytes coming from the serial port
  
       Make sure CLASSPATH includes $TOSROOT/support/sdk/java/tinyos.jar, ie:
  
           CLASSPATH=.:/home/joe/mm_t2/t2_cur/tinyos-2.x/support/sdk/java/tinyos.jar

execute:

       java net.tinyos.tools.Listen -comm serial@/dev/ttyUSB0:telosb


And you should see packets that look something like this:  (depends on what the mote is sending)

            00 FF FF 00 00 12 00 A1 00 12 07 09 00 0C 9E 23 00 0C 9E 30 F6 2C FF D7 FF FF
            00 FF FF 00 00 12 00 A1 00 12 07 05 00 0C 9E 24 00 0C 9E 3F E5 AF B1 6F 9E D4
            00 FF FF 00 00 0E 00 A1 00 0E 07 06 00 0C 9E 33 00 0C 9E 46 78 80
            00 FF FF 00 00 0E 00 A1 00 0E 07 07 00 0C 9E 33 00 0C 9E 52 FF FF
            00 FF FF 00 00 10 00 A1 00 10 07 08 00 0C 9E 33 00 0C 9E 61 FF FF FF FF
  
            00 FF FF 00 00 10 00 A1 00 10 07 08 00 0C 9E 33 00 0C 9E 61 FF FF FF FF
            ^  ^     ^     ^  ^  ^  ^     ^  ^  | -- sensor 8 data
            |  |     |     |  |  |  |     |  |- sensor id
            |  |     |     |  |  |  |     |- sensor data type
            |  |     |     |  |  |  |-- length of data block
            |  |     |     |  |  |-- AM type MM3_DATA
            |  |     |     |  |-- AM group
            |  |     |     |-- serial length
            |  |     |-- src addr           
            |  |-- dest addr
            |-- dispatch byte - 0 says AM
                             
If you define MOTECOM you won't need to specify the -comm parameter.  ie:

       MOTECOM=serial@/dev/ttyUSB0:telosb


13) Do a test compile and gdb run.  This assumes that the JTAG pod is connected to ttyUSB0.

    If you have mm3 hardware:

    cd ~/mm_t2/t2_mm3/apps/mm3
    make debug mm3 threads
    msp430-jtag -l /dev/ttyUSB0 -e build/mm3/main.exe

    from a different window run:

    msp430-gdbproxy msp430 /dev/ttyUSB0


    There should be a .gdbinit file in apps/mm3 which contains the following lines at the top:

        set remoteaddresssize 0d64
        set remotetimeout 0d999999
        target remote localhost:2000

    change into build/mm3/ and create a symbolic link to the .gdbinit file in the upper directory.
    This prevents the .gdbinit file from being wiped if one does make clean.

        pushd build/mm3
	ln -s ../../.gdbinit
	popd

    now if you run gdb.430 build/mm3/main.exe  gdb should connect to the proxy and start
    to debug your code in the device.  To let the device run use 'c', continue.  Do not use
    'run'.


14) Do a test compile and gdb run from the main tree.

    If you have telosb hardware:

    cd ~/mm_t2/t2_cur/tinyos-2.x/apps/Blink
    make debug telosb
    msp430-jtag -l /dev/ttyUSB0 -e build/telosb/main.exe


    from a different window run:

    msp430-gdbproxy msp430 /dev/ttyUSB0


    Make sure that you have a .gdbinit file in the app directory and the symbolic link
    from the build/telosb directory as described in 13.

    run gdb as described in 13.



15) Repos:

T2 git repositories:

    git://hinrg.cs.jhu.edu/git/tinyos-2.x.git
	hinrg T2 core: read-only, hinrg git tracking from cvs t2 main (updated hourly)

    git://hinrg.cs.jhu.edu/git/cire/tinyos-2.x.git
	cire/tinyos-2.x: read-only.  manual update tracking of hinrg T2 core.  Also
	includes mm3_tip and encap branches.

    ssh://hinrg.cs.jhu.edu/home/cire/tinyos-2.x.git
        read-write (need access permissions), cire tracking repo that tracks
        hinrg t2, updated manually (same as git://hinrg.cs.jhu.edu/git/cire/tinyos-2.x.git)

    gitosis@overtux.cse.ucsc.edu:cire/t2_cire_hinrg.git   -> tinyos-2.x
        read-write (need access perissions), cire tracking repo that tracks
        hinrg t2_cire, updated manually (same as ssh://hinrg.cs.jhu.edu/home/cire/tinyos-2.x.git)


    tinyos-2.x.git:	tracks the main t2 cvs repository (hinrg, updated hourly)

    cire/tinyos-2.x.git: manually tracking of the main hinrg t2 tree (labeled t2_base)
	t2_base:    master that tracks the main hinrg
	encap:	    encapsulation modification to the mainline
	mm3_tip:    working tip for mm3 development (no encap changes)

    t2 (cvs) -> tinyos-2.x.git (hinrg, hourly) -> cire/tinyos-2.x.git (t2_base, manual)
             ----> (encap)
	     ----> (mm3_tip)

    t2 (cvs) denotes the cvs based main t2 tree.   tinyos-2.x.git denotes
    the hourly pull mirror hosted at hinrg.cs.jhu.edu.  And cire/tinyos-2.x
    is the tracking branch + mm3 branches.


T2_MM3 git repositories:

    git://hinrg.cs.jhu.edu/git/cire/t2_mm3.git (read only)
	read-only, primary pull T2 MM3 repo.  pulls from /home/cire/t2_mm3.git.

    ssh://hinrg.cs.jhu.edu/home/cire/t2_mm3.git  (read write)

    gitosis@overtux.cs.ucsc.edu:cire/t2_mm3.git  (read write)  (backup)
