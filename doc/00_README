
Installing a development environment for the MamMark tag.


State:

2014-09-14
    Ubuntu 14.04, T2 (TinyProd) github:tp-freeforall/prod(tp-master),
    MM github:MamMark/mm(master)
    mspdebug JTAG debugging.  (v2)
    mspgcc-LTS20120406 toolchain, tinyprod.net/repos/debian

2011-10-20 (obsolete)
    Ubuntu 10.04, T2 (TinyProd) github:tp-freeforall/prod(mm-core-next),
    (based on tp-freeforall/prod(msp430-int-next)),
    MM github:MamMark/mm(master)
    mspdebug JTAG debugging.
    mspgcc-LTS20110716+patches toolchain, tinyprod.net/debian-dev


This brief is written assuming that there is a common root directory,
we'll call it mm and it is usually at the top level of a working
directory.  ie.  ~/mm.

Most commands are entered from a terminal window.


**************************************************************************************

0) Overview.

MamMark code is built using two trees.

    I)  Modified TinyOS trunk.  Adds support for msp430f5438a.  MM core changes.
    II) Main MM trunk.  Main body of MM code.

The following parts are essential to building MM images:

a) Set up a development environment.  (Ubuntu or Debian based)
b) mspgcc (LTS-20110716) toolchain (gcc 4.6.3)
c) two trees are used and environment is set to include both trees.
d) Jtag pod is connected to /dev/ttyUSB0 (v2)
e) Serial (Dock) port is connected to /dev/ttyUSB1

**************************************************************************************

1) Development Environment Installation

https://github.com/tp-freeforall/prod/blob/tp-master/00b_Development_Environment


**************************************************************************************

2) Pull main tinyos tree, gh:tp-freeforall/prod(mm-core)

cd ~/mm
mkdir t2_cur
cd t2_cur
git clone git://github.com/tp-freeforall/prod tinyos-2.x
git checkout mm-core


**************************************************************************************

3) Pull the MM tree.

The main body of MM code is held in the git repository gh:MamMark/mm(master).
You pull a read only copy from git://github.com/MamMark/mm.git.

If you will be contributing code to the project you should follow the
instruction found in gh:tp-freeforall/prod(tp-master)/00d_Contribution_Process.
You will get a github login in and fork your own copy of the MamMark/mm repo.
Work is done on local working branches, moved to your local master branch
and then a pull request is forwarded to MamMark/master.


Normal user (not enabled).

cd ~/mm
git clone git://github.com/MamMark/mm.git t2_mm
cd t2_mm

# you should be on the master branch by default.


**************************************************************************************

4) Set environment variables.

MOTECOM="serial@/dev/ttyUSB1:115200"
MM_ROOT="$HOME/mm/t2_mm"
TINYOS_ROOT_DIR=$HOME/mm/t2_cur/tinyos-2.x
TINYOS_ROOT_DIR_ADDITIONAL="$MM_ROOT:$TINYOS_ROOT_DIR_ADDITIONAL"
CLASSPATH=.:$TINYOS_ROOT_DIR/support/sdk/java/tinyos.jar

PYTHONPATH=$TINYOS_ROOT_DIR/support/sdk/python:$PYTHONPATH
PYTHONPATH="/usr/local/lib/python3.1/dist-packages:$PYTHONPATH"

export TINYOS_ROOT_DIR TINYOS_ROOT_DIR_ADDITIONAL CLASSPATH PYTHONPATH
export LD_LIBRARY_PATH MOTECOM MM_ROOT


**************************************************************************************


5) Do a test compile and gdb run.  This assumes that the JTAG pod is
   connected to /dev/ttyUSB0.

   For mm5 hardware:

   cd ~/mm/t2_mm/apps/mm
   make debugopt mm5a
   mspdebug uif -qjd /dev/ttyUSB0 "prog build/mm5a/main.exe"


   When the download completes use a different window and run:

   mspdebug uif -qjd /dev/ttyUSB0 "opt gdb_loop true" gdb


   Follow the instructions in

      $TINYOS_ROOT_DIR/tos/chips/msp430/99_gdb/00_README

   to set up the gdb control files in their proper places (.gdbinit, .gdb_x5,
   etc).

   now if you run msp430-gdb build/mm5a/main.exe  gdb should connect to the proxy and start
   to debug your code in the device.  To let the device run use 'c', continue.  Do not use
   'run'.


**************************************************************************************

6) Do a test compile and gdb run from the main tree.

   If you have telosb hardware:

   cd ~/mm/t2_cur/tinyos-2.x/apps/Blink
   make debugopt telosb install


**************************************************************************************

The main tracking repo is at:

    git://github.com/tinyprod/prod.git
        read-only, production orientated tracking repo.   Tracks the main TinyOS
        development repository, gh:tinyos/tinyos-main.	MM modifications to the
        T2 core are on the tp-master and mm-core branches.

    git://github.com/tp-freeforall/prod.git
        read-only, development version of the tinyprod/prod repository.  Typically
	used for integrating working development code.  tp-master/mm-core.


**************************************************************************************

7) About the T2_MM tree.

The t2_mm tree is a seperate t2 based repo that has mammark unique
code.  It is used to build firmware for the mm3 (1611 based), mm4
(2618 based), and mm5a (5438a) tag devices.

    git://github.com/MamMark/mm.git   (read only)

    The main branch is "master".


**************************************************************************************

8) Repos:

See $(TINYOS_ROOT_DIR)/00a_Repo_Notes for details about how the TinyProd/prod
repo is organized.  gh:tinyprod/prod and gh:tp-freeforall/prod holds the main
t2 repository.   Working branch for the MM platform is mm-core.


T2_MM git repositories:

    gh:MamMark/mm.git    (read-only: git://github.com/MamMark/mm.git).


9) Formating SD media for use by the tag.

  format
	mkdosfs -F 32 -I -n"TagTest" -v /dev/sdb

  check
	fsck /dev/sdb

  build
	mkdblk -w /dev/sdb

  check
	fsck /dev/sdb

  correct
	fsck -a /dev/sdb
	fsck    /dev/sdb
	eject   /dev/sdb
