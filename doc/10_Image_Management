
ImageManager and Image Management

1. Purpose

The ImageManager is responsible for managing the Image Region.  This region
holds some number of Tag executables, pure binaries that can be loaded into
the NIB region of the Tag's main processor flash.

Images are currently sized at 128KiB maximum.  This is half of the flash
area of the current cpu.  This is also much larger that the available RAM
on the processor.  Before starting an update of the flash it is imperative
to verify the integrity of the image.  This implies that one needs to see
the entire image and have it available for access prior to actually
programming the on-chip flash.  In other words we need to have some place
to stash the entire image before programming the flash with it.  The
ImageManager provides such a place for said stashage.

Images are explicitly simple binary images extracted from the more
complicated ELF output executables produced by the toolchain.  They are
an exact binary representation of the binary data needed to run the
executable.  The file extension ".bin" is used for these images.


ImageManager is the on board entity responsbile for the following:

o management of the space and ancilliary structures needed for said management.
o maintenance of the IM directory.  which slots are full etc.
o allocation and writing of a slot
o ejection of an active image
o deletion of a slot
o maintanence of Active/Backup slots.


2. Resources

ImageManager resources live exclusively within the Image Region.  This
region can be obtained by a call to FileSystem.area_{start,end}(FS_LOC_IMAGE).
FS_LOC_IMAGE indicates we want the information for the Image region.

These calls will return with the absolute sector numbers for the Image region.
One should never ever write outside of these start/end bounds.

The ImageManager directory is the first block (sector) of the Image Region.  It
contains protection information and n directory slots.  Each slot contains the
version identifier, the starting sector, and the state of the slot.


3. Organization

The image region is layed out thusly:


       +---------------------+
       |      Directory      |  <---- start
       |                     |
       |                     |
       |                     |
       +---------------------+
       |       Slot 0        |        start + 1 + S_n * 256
       |                     |        S_n = 0
       |                     |
       |                     |
       +---------------------+
       |       Slot 1        |        start + 1 + S_n * 256
       |                     |        S_n = 1
       |                     |
       |                     |
       +---------------------+
       |       Slot 2        |        start + 1 + S_n * 256
       |                     |        S_n = 2
       |                     |
       |                     |
       +---------------------+
       |       Slot 3        |        start + 1 + S_n * 256
       |                     |        S_n = 3
       |                     |
       |                     |  <---- end
       +---------------------+


Each slot can hold one maximally sized image.  (currently 128KiB,
128 * 1024 Bytes).  This translates into 256 512 Byte sectors.


4. Image Naming

Images are identified by a unique version number (manually managed).  This
version identifier is composed of 3 parts, a major (1 byte), a minor (1
byte), and buildnum (2 bytes).  Routines are provided by ImageManager for
accessing and manipulating this object type.

If two images have the same ver_id, then it is imperative that these images
are exact copies of each other.  If one sums their binary values the result
should be exactly the same.  It is up to the development community to
guarantee that this condition is met.  The ImageManager and all associated
software assumes that any two images with the same ver_id are indeed the
same images.  (Note, checksums of various flavors, including on image
checksums (see section 5) can be used to differentiate two images that
inadvertantly are named the same ver_id, but it is better to not go there).


5. Hardware Version

An image is built for a particular instantiation.  The image is marked
with the h/w model and h/w revision (model most significant) for which
this image is built.


6. Image Validity

There is one checksum associated with an image, the image checksum,
image_info.image_chk.  The checksum is over the entire image for exactly
the number of bytes in the image, image_info.image_length.  The checksum
is a 32 bit byte by byte checksum.  It does NOT contain image_chk.  Image_chk
should be set to zero prior to computing the checksum over the image.

The image sum is performed over the entire image.  To check, remove image_chk,
sum all bytes in the image and compare to image_chk.


7. Image Identification

A binary image by itself typically does not provide any information about
what the image contains.  With Tag images, we correct this deficit by
embedding identifying information with in the image.

This information includes the following:

o signature, image_info_sig, identifies that this is image_info

o image_start, load address of the image.  Where in the address space of
  the processor should this image be loaded.

o image_length, how long in bytes is this image.  Needed for both writing
  the image as well as computing the checksum.

o ver_id.  The version identifier of this image.  This is the name of
  the image and is considered unique.

o image_desc.  An ID_MAX (44) byte string that contains an arbitrary
  descriptor of what this image is.

o repo0_desc.  An ID_MAX (44) byte string that describes the tip of the
  main tree.  The main tree is currently gh:tp-freeforall/prod(tp-master).
  null terminated.

o repo1_desc.  An ID_MAX (44) byte string that describes the tip of the
  aux tree.  This is the main MamMark tree and is currently
  gh:MamMark/mm(master).  null terminated.

o stamp_date: a 30 byte null terminated string which is the build data
  when this image was built.

o hw_ver.  A two byte, Model and Revision that identifies the h/w this
  image is built for.


8. Checksum performance:

(32) Simple Checksum.sum32_aligned
(8)  Simple Checksum.sum8

units some form of uSecs, T32 timer, main DCO 16MiHz

                (unoptimized)           (unrolled x 32)
                Flash   SRAM            Flash   SRAM

    8KiB, 32    1924    1540            969     585
    8KiB, 8     5634    4098

    16KiB       3844    3076            1930    1161
    16KiB       11265   8194

    32KiB       7684    6158            3849    2314
    32KiB       22529   16386

    64KiB       15364   12292           7689    4618
    64KiB       45068   32770

    128KiB      30724                   15370
    128KiB      114700


Note: We currently use the 32 bit byte by byte checksum for its simplicity.
When moving images across the network (the typical case), the image is
effectively only available on a byte by byte basis.  The 32 bit aligned
checksum requires alignment and access to the entire image.  This is
problematic for the network transfer.
