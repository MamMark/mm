
Options/Configurations:

Dock:  RPi 3/RPi 4 (dual   spi ports), master only, 1 Radio, 1 Dock
       Linux, FTDI C232HM, master only, multiple gpio/cs


0) Introduction

The Dock subsystem provides the following functionality when a tag is
connected:

    a) JTAG SWD port for low level development access
    b) charging for the tag's energy system
    c) high speed communication port.  (dock_comm).
    d) any required level shifting.

DockComm provides a high speed connection to a Tag device.  This
connection can be used to a) monitor a running tag and b) offload large
quantities of data stored on the tag.

The Dock subsystem h/w is composed of 3 parts, the Tag that is being
communicated with, the Dock H/W Interface subsystem (DCX, dock board), and
the Dock host (Dock).  The Dock (host) is where the dock software executes.
It uses the DCX to interface to a Tag that has been connected to the DCX.

The connection between the dock and the tag is a master/slave SPI connection.
The dock is the master and the tag is a slave.  The tag can only send data
to the dock with the dock's assistance.

The h/w interconnect occurs via the DCX which also provides isolation to
protect the Tag's SPI bus.

On the tag side, the spi port can be dedicated or shared.  A dedicated spi will
be run exclusively as a slave.  With a shared spi, a dock -> tag(slave)
configuration is shared with a tag(master) talking on the Tag's SPI bus to other
devices on the bus.

The protocol described below supports both configurations.


1) HW interconnect

   DC   =   Dock_Comm

   SCLK:    clock sourced by the dock (master).
   SIMO:    slave in, master out, (spi data)
   SOMI:    slave out, master in, (spi data)

   DC_ATTN_M_N: Dock -> Tag (low true).  Asserted for entire SPI packet
            transmission.

   DC_ATTN_S_N:
            Tag -> Dock (low true).  Asserted by a tag to indicate a message
            is pending for the dock.

   DC_SPI_EN:
            Tag -> Dock.  Assertion causes the DCX to connect the Dock's SPI
            to the Tag's SPI.  The Dock is master.

            When DC_SPI_EN is 0, the dock's SIMO should be pulled high to
            generate bytes of 0xff.

   Idle bytes Slave to Master are 0xFE.  Idle bytes Master to Slave are 0xFD.
   Idle bytes when no tag present or when DC_SPI_EN is deasserted are 0xFF.


1a) DC_ATTN_M_N

The DC_ATTN_M_N signal is used to get the tag's attention and to bracket the
data being sent to the tag.  The initiating edge indicates the start
of a new packet and the next byte will be a channel byte.  DC_ATTN_M_N
is asserted for the duration of the packet.


1b) DC_ATTN_S_N.

The DC_ATTN_S_N signal is used by the tag to inform the dock that a tag packet
is ready to be retrieved.  The Dock will use the FETCH command to get the
tag's data.


1c) DC_SPI_EN.

Asserting DC_SPI_EN causes the DCX to connect the dock SPI and the tag SPI.
This enables output drivers from the Dock for SCLK and SIMO.  When
disabled, the incoming SOMI signal needs to be pulled high.

If DC_SPI_EN is stuck deasserted, the dock will not be able to communicate
with the tag.  The tag is required to participate in order for the dock_comm
interface to function properly.


1d) SCLK, SIMO, SOMI

When DC_SPI_EN is deasserted, the dock is disconnected from SCLK and SIMO and
SOMI is pulled up so any input bytes will be seen as 0xFF.

With DC_SPI_EN asserted, the dock effectively drives SCLK and SIMO and SOMI
is connected to the dock_spi bus SOMI.


2) Data format.

Data is transfered between the dock and the tag in packets.  All multi-byte
datums are in little endian order.  There is no multi-byte alignment
constraint.

   +---------+--------+-------+--------+-----------+--------+
   | channel |  type  |  len  |  data  |  checksum |   00   |
   +---------+--------+-------+--------+-----------+--------+

       1         1        2       len         2        1*

                                                   +--------+
      0xfe      0xfe     0xfe     0xfe      <---   |  srsp  |
                                                   +--------+

   channel:     data channel, end point identifier
   type:        channel dependent packet type.  (0 reserved)
   len:         2 byte length.  Length indicates the length of the data field.
   data:        packet data, size is len.
   checksum:    16 bit byte by byte sum truncated to 16 bits of bytes
                between channel through last data byte inclusive.  (little endian)
   srsp:        simple response (srsp).


2a) Channels.

The channel field in the packet denotes a logical end point.  An end point
denotes a software module that generates or consumes packet data.

    0:  none        channel 0 reserved
    1:  core        core commands and responses.
    2:  tagnet      tagnet over SPI
    3:  print       debug print.
    4:  large_dblk  large block dblk access.


2b) Core Type

The Core channel is used for core functions.

    0:  none    reserved
    1:  hello   are you alive
    2:  id      identify
    3:  fetch   fetch data from tag (slave req)


2c) srsp, simple response.

For packets transmitted from the dock to the tag, a simple response
byte is returned by the tag after the last checksum byte has been sent.
This byte indicates immediate response to the packet just received.

    0:  ok
    1:  bad checksum
    2:  protocol error
    3:  busy
    4:  reject
    ff: not present


3) Basic Operation

The dock_comm port is either connected to a dedicated slave spi or to a shared
spi bus which the tag normally accesses as a bus master.  If the tag is actively
using the spi bus it will hold off any dock communications/interactions by
deasserting DC_SPI_EN which disables the dock side drivers on SCLK and SIMO.


Initial state:  Normal tag operation.

  DC_SPI_EN:   0, disable external dock drivers if connected.
  DC_ATTN_M_N: 1, (pull up), if connected, Dock is not accessing the tag.
  DC_ATTN_S_N: 1, tag is not requesting data transfer from the dock.
  SPI bus:     the tag dock_comm spi can be configured as a master to enable
               accessing other devices on the bus.  Alternatively, the spi
               h/w can be held in reset to minimize power consumptino.


3a) Docking.  Plugging the tag into a dock shouldn't disrupt any operations
currently being performed on the tag.  (electrical issues?)  This includes
any potential transactions that are occuring on the dock_comm spi bus.

The process of docking does not generate a signal telling the tag docking has
occured.

The dock can tell that a Tag is attached by looking at the DCX_TAG_PRESENT
pin.  The DCX_TAG_PRESENT signal is asserted by the DCX when a tag has been
connected.


3b) Dock Attn.  The Dock gets the attention of the tag by dropping
DC_ATTN_M_N.  This synchronizes the Dock and Tag, the next byte transmitted
by the dock will be the first byte of a packet (channel).

The falling edge of DC_ATTN_M_N typically causes an interrupt on the tag.


3c) Tag actions on receipt of DC_ATTN_M_N signal (falling edge, low value),
    ATTN_M interrupt.

If the dock_comm spi is busy (tag is master, owned by tag), the interrupt
is ignored.

Otherwise, the tag will take the following actions:

    1) configure SPI as a slave, take it out of reset.
    2) raise DC_SPI_EN
    3) set dock_com spi busy (owned by the dock)


3d) Data transfer

Once the dock owns the spi, it can begin transferring bytes.  Being the
master, the dock is responsible for initiating every transfer.  One byte
sent, one byte received.

Two major modes are needed when transferring packets between the dock and
the tag, Dock -> Tag and Dock <- Tag.

To send data from the dock to the tag, the dock will assert DC_ATTN_M_N and
start sending a packet (channel, type, len, data, ...).  If the tag is
actively receiving these bytes, 0xFE will be returned for each transmitted
byte.

The tag is typically receiving data from the dock at interrupt level.  Once
the checksum has been received, the tag will set the SRSP byte and will
hand the packet off to non-interrupt code for processing.   This means that
in practice it is difficult for the tag to immediately respond.  Every
response packet from the tag is delayed and requires a DC_ATTN_S_N assertion
followed by a CORE/FETCH cycle.

If the tag cannot immediately respond to the command, it will return SRSP_OK
(if the checksum passes).  Later when the tag has the data available, it can
assert DC_ATTN_S_N, and the dock will use CORE/FETCH to retreive the data.
The data will be wrapped in an appropriate packet which identifies the format
and how to process it.

Additionly, if the tag has data it wants to send to the Dock (ie. CHN/PRINT),
the tag will assert DC_ATTN_S_N to poke the dock to fetch it.  The delayed
data case and async cases are handled the same.

Typically a sequence will look as follows:

Dock:                                   Tag:

  assert DC_ATTN_M_N                      (interrupt)
                                          configure SPI as slave
                                          set output byte to 0xFE
                                          assert DC_SPI_EN
                                          set dock_comm spi busy.

  sends first byte.                       (interrupt) byte available
                                          process byte.

  sends bytes                             (interrupt), continue processing
     ...

  sends 2nd checksum byte.                (interrupt), process checksum
                                          set srsp byte to be returned.
                                          (will be returned on next
                                          transmitted byte).

  send fd (to get srsp)                   (interrupt).  ignore last byte,

  deassert DC_ATTN_M_N


The tag will process the packet and perform the requested operation.  This
operation will typically take non-zero time.  When the results are
available and the response is ready, the tag will assert DC_ATTN_S_N.

Dock:                                   Tag:

                                          assert DC_ATTN_S_N

  assert DC_ATTN_M_N                      interrupt
                                          configure SPI as slave
                                          assert DC_SPI_EN
                                          set output byte to 0xFE
                                          set dock_comm spi busy.

     chn   type    len     chk     srsp
  m: core, fetch,  len,    chksum, srsp
     0x01  0x03    0x0000  0x0004  0xfd
     01    03      00 00   04 00   fd

  s: fe    fe      fe fe   fe fe   00


     chn   type    len     data    chk    srsp
  s: xx    xx      xx xx   ......  xxxx   fe

  m: fd    fd      fd fd   ......  fdfd   00

                                          deassert DC_ATTN_S_N
  deassert DC_ATTN_M_N


4) Core channel

The core channel is used for well defined control functions.

4a) Hello

  assert DC_ATTN_M_N

     chn   type    len     chk     srsp
  m: core, hello,  len,    chksum, srsp
     0x01  0x01    0x0000  0x0002  0xfd
     01    01      00 00   02 00   fd

  s: fe    fe      fe fe   fe fe   00

  deassert DC_ATTN_M_N

                ...
                ...

                                          assert DC_ATTN_S_N

  assert DC_ATTN_M_N

  m: core, fetch,  len,    chksum, srsp
     0x01  0x03    0x0000  0x0004  0xfd
     01    03      00 00   04 00   fd

  s: fe    fe      fe fe   fe fe   00


     chn   type    len     chk    srsp
  s: 01    01      00 00   0002   fe

  m: fd    fd      fd fd   fdfd   00

                                          deassert DC_ATTN_S_N
  deassert DC_ATTN_M_N


4b) Identify

4c) Fetch

Fetch is used by the dock to pull data from the Tag after the
tag has asserted DC_ATTN_S_N.

                                          assert DC_ATTN_S_N

  assert DC_ATTN_M_N

  m: core, fetch,  len,    chksum, srsp
     0x01  0x03    0x0000  0x0004  0xfd
     01    03      00 00   04 00   fd

  s: fe    fe      fe fe   fe fe   00


     chn   type    len     data    chk    srsp
  s: xx    xx      xx xx   ......  xxxx   fe

  m: fd    fd      fd fd   ......  fdfd   00

                                          deassert DC_ATTN_S_N
  deassert DC_ATTN_M_N


5) Tagnet channel

The Tagnet channel is used to transfer tagnet packets between the
dock and the tag.


6) Print channel

The Print channel is used to transfer simple print output from the tag
to the dock.  The data field is a null terminated printable string.


7) Large Dblk channel

The large_dblk channel is used to pull large blocks of data from the
DBLK region of the Tag's file system.  The type field of the channel
is used to specify the desired operation.  The data field format
depends on the type field.


7.1) type, operation

  0:    size
  1:    data


7.2) Size

Size request/response, will return the current size in bytes of
the dblk file.


  assert DC_ATTN_M_N

     chn    type    len     chk     srsp
  m: LDBLK, SIZE,   len,    chksum, srsp
     0x04   0x00    0x0000  0x0004  0xfd
     04     00      00 00   04 00   fd

  s: fe     fe      fe fe   fe fe   00

  deassert DC_ATTN_M_N

                ...
                ...

                                          assert DC_ATTN_S_N

  assert DC_ATTN_M_N

  m: CORE, FETCH,  len,    chksum, srsp
     0x01  0x03    0x0000  0x0004  0xfd
     01    03      00 00   04 00   fd

  s: fe    fe      fe fe   fe fe   00


     chn   type    len     size             chk    srsp
  s: LDBLK SIZE    0x0008  xxxxxxxxxxxxxxxx 0028   fe
     04    00      08 00   0706050403020100 2800   fe

  m: fd    fd      fd fd   fdfdfdfdfdfdfdfd fdfd   00

                                          deassert DC_ATTN_S_N
  deassert DC_ATTN_M_N


7.3) Data

The LDBLK/DATA packet is used to move data from the tag to the dock.

    offset:     byte offset into the dblk file
    req_len:    requested length in bytes.
    rsp_len:    actual number of bytes being returned.


    assert DC_ATTN_M_N

     chn    type
  m: LDBLK, DATA,   len,    offset            req_len  chk     srsp
     0x04   0x01    0x000a  0102030405060708  090a     xxxx    0xfd
     04     01      0a 00   0807060504030201  0a09     xxxx    fd

  s: fe     fe      fe fe   fefefefefefefefe  fefe     fefe    00

  deassert DC_ATTN_M_N

                ...
                ...

                                          assert DC_ATTN_S_N

  assert DC_ATTN_M_N

  m: core, fetch,  len,    chksum, srsp
     0x01  0x03    0x0000  0x0004  0xfd
     01    03      00 00   04 00   fd

  s: fe    fe      fe fe   fe fe   00


  len is the actual length being returned.

     chn    type
  s: LDBLK  DATA    len     data    chk     srsp
     0x04   0x01    xxxx    ....    xxxx    0xfd
     04     01      xxxx    ....    xxxx    fd

                                          deassert DC_ATTN_S_N
  deassert DC_ATTN_M_N
