
Options/Configurations:

Dock:  RPi 3/RPi 4 (dual   spi ports), master only, 1 Radio, 1 Dock
       Linux, master only, multiple gpio/cs


0) Introduction

The Dock subsystem primarily provides a high speed connection for data
transfer between a Dock Host (Master) and a Tag (Slave).  It provides
the following functionality:

    a) high speed communication port.  (dock_comm).
    b) JTAG SWD port for low level development access
    c) charging for the tag's energy system
    d) any required level shifting.

The interconnection is via a SPI bus and some control signals.  The Dock
is the master and the Tag is the slave.  These terms (Tag/slave) and
(Dock/master) are used interchangably in this document.

DockComm provides a high speed connection to a Tag device.  This
connection can be used to a) monitor a running tag and b) offload large
quantities of data stored on the tag.

The Dock subsystem h/w is composed of 3 parts, the Tag that is being
communicated with, the Dock H/W Interface subsystem (DCX, dock board), and
the Dock host (Dock).  The Dock (host) is where the dock software executes.
It uses the DCX to interface to a Tag that has been connected to the DCX.

The connection between the dock and the tag is a master/slave SPI connection.
The dock is the master and the tag is a slave.  The tag can only send data
to the dock with the dock's assistance.  The dock is the SPI master.

The h/w interconnect occurs via the DCX which also provides isolation to
protect the Tag's SPI bus if needed.

On the tag side, the spi port can be dedicated or shared.  A dedicated spi will
be run exclusively as a slave.  With a shared spi, a dock -> tag(slave)
configuration is shared with a tag(master) talking on the Tag's SPI bus to other
devices on the bus.

While the protocol described below supports both configurations, currently we
only support a dedicated slave DockComm port.


1) HW interconnect

   DC   =   Dock_Comm

   SCLK:    clock sourced by the dock (master).
   SIMO:    slave in, master out, (spi data)
   SOMI:    slave out, master in, (spi data)

   DC_ATTN: Dock -> Tag.  Asserted for entire SPI packet transmission.

   DC_MSG_PENDING: Tag -> Dock.  Asserted when the Tag has messges queued
     for the dock.  The Tag wants the Dock to fetch these messages.

   DC_SLAVE_RDY: Tag -> Dock.  This signal indicates that the slave (Tag)
     has properly configured the SPI hardware and is ready to actively
     service any incoming byte stream.  Actively monitoring the SPI RXBUF
     hardware.

     If the Tag needs to throttle the tranmission path, ie. flowcontrol.
     DC_SLAVE_RDY can be deasserted.  And when once again monitoring incoming
     bytes can be reasserted.

     With no Tag docked, the DCX will pull DC_SLAVE_RDY down (default value
     0, not ready).  The Dock can tell if a tag is present by asserting
     DC_ATTN and expect DC_SLAVE_RDY to be asserted within a max time
     window (timeout).


What does RDY mean?  The Tag is an SPI slave in the Dock_Comm system.  That
means when the Dock (the master) thinks the slave is ready it can start to
clock, a byte will be transfered between the Dock and Tag, one in each
direction.  The Tag's RXBUF will become full.   If this byte isn't serviced
within an appropriate amount of time the current RXBUF will be over written
(overrun), and the packet will be corrupted.

So basically, DC_SLAVE_RDY means the Tag is ready to catch.


1a) DC_ATTN

The DC_ATTN signal is used to get the tag's attention and to bracket the
data being sent to the tag.  The initiating edge indicates the start of a
new packet and the next byte will be a channel byte.  DC_ATTN is asserted
for the duration of the packet.


1b) DC_MSG_PENDING.

DC_MSG_PENDING gets asserted anytime the outgoing msg queue is non-empty.
The master at its conveience will use a CORE/FETCH packet to pull messages
from this queue.


1c) DC_SLAVE_RDY.

When asserted indicates that the SPI hardware has been properly configured
(Slave, phase, polarity) and is actively ready to service incoming bytes.

If the Tag needs to throttle the master because it no longer monitoring the
receive path, DC_SLAVE_RDY will be deasserted.  It may need to wait a few
byte times for the master to shutdown, should be no longer than tens of
microseconds (dependent on SCLK speed).  Not seeing any data for a few
loops will tell the Tag that the transmitter has shut down.


1d) SCLK, SIMO, SOMI

SCLK, SIMO, and SOMI make up the actual SPI bus.  Typically, the tag is not
connected to the dock and and these lines are configured as inputs with
pull downs to gnd.

On the dock side, there is a pull up on SOMI, and the dock will see data of
0xFF if it reads the SPI bus when a Tag is not connected.


2) Data format.

Data is transfered between the dock and the tag in packets.  All multi-byte
datums are in little endian order.  Multi-byte datums are aligned to
natural boundaries with respect to the start of the packet.  ie. half-words
(16 bit) are aligned on half-work boundaries, while 32 bit datums are quad
word aligned.

   +---------+--------+-------+--------+------+-+----+--------+
   | channel |  type  |  len  |  data  | chkA | chkB |   00   |
   +---------+--------+-------+--------+------+------+--------+

       1         1        2       len      1     1       1*


      0xfe      0xfe     0xfe     0xfe    0xfe  0xfe    srsp


   channel:     data channel, end point identifier
   type:        channel dependent packet type.  (0 reserved)
   len:         2 byte length.  Length indicates the length of
                the data field.
   data:        packet data, size is len.
   chkA/B:      fletcher checksum over entire packet, channel
                through end of data.
   srsp:        simple response (srsp).  srsp is generated by the rcvr.


2a) Idle Bytes.

We run the SPI bus in an effective half-duplex mode, this is to allow
information to be passed from the target back to the origin about
any problems that have occured.

When the master is sending a packet to the slave, the slave is returning
either an idle byte or abort code.

When the master is pulling data from the slave, it will be sending the
master idle or an abort code.  The master can also terminate the transfer
by deasserting DC_ATTN.


Idle/Abort bytes are only meaningful on the reverse data stream that is
occuring in parallel to the packet data stream.

o 0xFF, (DC_NOONE_HOME): If the slave is not connected, the Dock will read
  0xFF from the bus.  0xFF indicates that no one is home.

o 0xFE, (DC_SLAVE_IDLE): While the dock is sending packet data, the tag will
  normally send DC_SLAVE_IDLE on the return path.

o 0xFD, (DC_MASTER_IDLE):  when the dock is packet data from the Tag, it will
  normally use DC_MASTER_IDLE to initiaate each transfer on the SIMO path.

o any other values are reserved and used for abort codes.  Abort codes and
  SRSP (simple response codes) are the same.  An SRSP code is essentially
  a completion code at the very end of a packet.


2b) Channels.

The channel field in the packet denotes a logical end point.  An end point
denotes a software module that generates or consumes packet data.

    0:  none        channel 0 reserved
    1:  core        core commands and responses.
    2:  tagnet      tagnet over SPI
    3:  print       debug print.
    4:  large_dblk  large block dblk access.


2c) Core Type

The Core channel is used for core functions.

    0:  hello   reserved
    1:  id      identify
    2:  fetch   fetch data from tag


2d) Checksum

The packet contents are protected by a two byte Fletcher-16 checksum.
See https://en.wikipedia.org/wiki/Fletcher's_checksum#Fletcher-16.

Basically, a sum over all bytes between channel and the last data byte
inclusive:

    chkA += byte;
    chkB += chkA;

The sum typically is represented as a 16 bit result, chkB * 256 + chkA.  We
store this in little endian order which results in the bytes being stored as
shown in the packet diagram above.


2d) srsp, simple response.

At the end of any packet, following the checksum bytes (chkA/B) a simple
response byte is returned by the receiver to the originator of the packet.
This response byte indicates any immediately determined result.  For
example, if there is a checksum failure.

    0:  ok
    1:  bad checksum
    2:  protocol error
    3:  busy
    4:  reject
    fd: (MASTER_IDLE), srsp not ready
    fe: (SLAVE_IDLE),  srsp not ready
    ff: (NOONE_HOME),  not present

In the Dock -> Tag direction, the Dock is the master and is controlling the
clock going to the Tag's SPI.  At the end of the packet, the Tag may need
some extra time to finish processing the incoming packet such as computing
the checksum.  To provide an automatic mechanism for this interchange, the
Tag will return the idle byte (0xFE) if it isn't ready with the srsp byte.
Note this is the default byte that the Tag is sending as the Dock is
transmitting.  Alternatively the Tag could use DC_SLAVE_RDY to hold the the
Dock off, but using a the data mechanism is simpler.


3) Basic Operation

Initial state:

  DC_ATTN:      0, (pull down), if connected, Dock is not accessing the tag.
  DC_SLAVE_RDY: 0, (pull down), tag not ready.
  SPI bus:      the Tag's spi port may be held in reset (powered off) for power
                savings or will be configured as a slave.


3a) Docking.  Plugging the tag into a dock shouldn't disrupt any operations
currently being performed on the tag.  (electrical issues?)

The process of docking does not generate a signal telling the tag docking has
occured.

The dock can tell that a Tag is attached by looking at the DCX_TAG_PRESENT
pin.  The DCX_TAG_PRESENT signal is asserted by the DCX when a tag has been
connected.  If DCX_TAG_PRESENT is asserted and the dock gets a
DC_ATTN/DC_SLAVE_RDY time out (no DC_SLAVE_RDY asserted within a reasonable
time) indicates that the tag is docked but not responding.


3b) Dock Attn.  The Dock gets the attention of the tag by asserting
DC_ATTN.  This synchronizes the Dock and Tag, the next byte transmitted
by the dock will be the first byte of a packet (channel).

The rising edge of DC_ATTN typically causes an interrupt on the tag.


3c) Tag actions on receipt of DC_ATTN signal.  DC_ATTN_IRQ interrupt.

  o receipt of DC_ATTN indicates being docked, set appropriate state.
  o configure DockComm h/w pins appropriately.
  o if SPI powered down, bring the SPI up and properly configure.
  o raise DC_SLAVE_RDY.


3d) Data transfer

Being the master, the dock is responsible for initiating every transfer.
One byte sent, one byte received.

Two major modes are needed when transferring packets between the dock and
the tag, Dock -> Tag and Tag -> Dock.  We run exclusively in half duplex
inspite of the underlying hardware being full duplex.  This is to simplify
corner cases when transitioning between modes.  Basically, it is simpler.

To send data from the dock to the tag, the dock will assert DC_ATTN.

Before any data can be transferred, the Dock must see DC_SLAVE_RDY
asserted.  Then it will start sending a packet (channel, type, len, data)

On reception of DC_ATTN, the current rsp state is set to DC_SLAVE_IDLE
(0xFE).  If there is a problem, this is captured in the rsp state and
returned to the dock with each byte sent.  The dock will continue to send
the entire packet and in this way we can set the appropriate response and
the transfere will conclude.

Because the tag is a SPI slave, it must receive bytes immediately.  This
means that any potential interruption (interrupts, other tasks, etc.) must
be prevented.

If large packets are being transferred, care must be taken to balance
receiving with other functions in the system.  To accomplish this,
receiving is done in a task (inside an atomic section).  A limit on the
number of bytes is used to bound how long other interrupts and other codes
are prevented from executing.  If the current reception needs to be paused,
the receiver will deassert DC_SLAVE_RDY.  When reception resumes,
DC_SLAVE_RDY gets reasserted.

As each byte is received, it is handed to the protocol handler.  If there
is a problem an appropriate event will be signaled causing the current
rsp to be set.  This is used to generate an appropriate SRSP byte when
needed.

Typically, once a packet has been received it is handed off to the
DockMonitor for processing.  This will take some time.  When any response
is ready, the Tag will set DC_MSG_PENDING.

To retrieve the packet, the dock will send a CORE/FETCH command.  When the
tag receives the CORE/FETCH it will send the packet data as the dock sends
DC_MASTER_IDLEs.  This packet immediately follows the CORE/FETCH command
packet.  The packet being returned is a properly constructed dock_comm
packet.

Similarly, if the tag has unsolicited data to transmit to the dock, this
message will be queued and DC_MSG_PENDING will be asserted.  The Dock/Tag
will then cooperate as above to fetch this data.


Typically a sequence will look as follows:

Dock:                           Tag:

  assert DC_ATTN                (interrupt)
                                power SPI, configure (slave)
                                set cur_rsp to 0xFE
                                set output byte to cur_rsp
                                assert DC_SLAVE_RDY

  sends channel (first byte)    byte_available() to Proto handler.
  send type
  send len lsb
  send len msb                  Proto.msgStart()
  sends bytes                   continue processing
     ...

  send 1st checksum byte        byte_avail()
  send 2nd checksum byte        byte_avail(), protocol processes checksum
                                Proto.msgEnd()
                                set srsp byte to be returned.
                                (will be returned on next
                                transmitted byte).

  send fd (to get srsp)         ignore last byte,  should be 0xfd.

  deassert DC_ATTN
                                deassert DC_SLAVE_RDY


The tag will process the packet and perform the requested operation.  This
operation will typically take non-zero time.  When the results are
available and the response is ready, the tag will assert DC_MSG_PENDING.

Dock:                           Tag:
  assert DC_ATTN                interrupt
                                configure SPI as slave
                                set output byte to 0xFE
                                set dock_comm spi busy.

     chn   type    len     chkA  chkB  srsp
  m: core, fetch,  len,    chkA, chkB, srsp
     0x01  0x02    0x0000  0x03  0x04  0xfd
     01    02      00 00   03    04    fd

  s: fe    fe      fe fe   fe    fe    00


     chn   type    len     data    chkA chkB   srsp
  s: xx    xx      xx xx   ......  xx   xx     fe

  m: fd    fd      fd fd   ......  fd   fd   00

  deassert DC_ATTN
                                deassert DC_SLAVE_RDY

Note that the response packet immediate follows the core/fetch
under control of the Dock master.


3e) Exceptions

When an error occurs two things need to happen.

o an appropriate indication of the failure to provide cluefullness.
o the data channel must be cleaned up and put back into a ready state.

How this works depends on which side has detected the problem and is
generating the abort.

o Slave abort.

When the slave detects a problem, it sets the cur_rsp to the abort code and
returns this code with every incoming byte.  The master should immediately
detect this code and abort the rest of the transmission by deasserting
DC_ATTN.  Alternatively, the Master may continue sending the packet and
will observe the abort code as the SRSP at the end of the packet.


o Master abort

When the master is pulling data from the slave, it normally is sending
DC_MASTER_IDLE (0xFD).  To abort, it can send the abort code and then
deassert DC_ATTN.  Alternatively, it can continue sending the abort
code until sufficient bytes have been transmitted and the Slave has
sent its SRSP at the end.


4) Core channel

The core channel is used for well defined control functions.

4a) Hello     (CORE/HELLO)

    publish DC version?   node id?


4b) Identify  (CORE/ID)

  cmd: CORE/ID, 0
  rsp: CORE/ID, len,
       core:   core_rev, core_minor,    2 x 2 (needed?)
       sw_ver: major, minor, build,     1 x 1 x 2
       hw_ver: hw_rev, hw_model         1 x 1
       node:   node_id[6]               6
       base:   executing image          4

4c) Fetch     (CORE/FETCH)

Fetch is used by the dock to pull data from the Tag after the
tag has asserted DC_MSG_PENDING.


5) Tagnet channel

The Tagnet channel is used to transfer tagnet packets between the
dock and the tag.


6) Print channel

The Print channel is used to transfer simple print output from the tag
to the dock.  The data field is a null terminated printable string.


7) Large Dblk channel

The large_dblk channel is used to pull large blocks of data from the
DBLK region of the Tag's file system.  The type field of the channel
is used to specify the desired operation.  The data field format
depends on the type field.


7.1) type, operation

  0:    size
  1:    data


7.2) Size

Size request/response, will return the current size in bytes of
the dblk file.


7.3) Data

The LDBLK/DATA packet is used to move data from the tag to the dock.

    offset:     byte offset into the dblk file
    req_len:    requested length in bytes.
    rsp_len:    actual number of bytes being returned.


     chn    type
  m: LDBLK, DATA,   len,    offset            req_len
     0x04   0x01    0x000a  0102030405060708  090a
     04     01      0a 00   0807060504030201  0a09

                ...
                ...


  len is the actual length being returned.
