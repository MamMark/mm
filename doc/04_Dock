
Options/Configurations:

Dock:  RPi 3/RPi 4 (dual   spi ports), master only, 1 Radio, 1 Dock
       Linux, FTDI C232HM, master only, multiple gpio/cs


0) Introduction

The Dock subsystem provides the following functionality when a tag is
connected:

    a) JTAG SWD port for low level development access
    b) charging for the tag's energy system
    c) high speed communication port.  (dock_comm).
    d) any required level shifting.

Dock_comm provides a high speed connection to a Tag device.  This
connection can be used to a) monitor a running tag and b) offload large
quantities of data stored on the tag.

The Dock subsystem h/w is composed of 3 parts, the Tag that is being
communicated with, the Dock H/W Interface subsystem (DCX), and the Dock host
(Dock).  The Dock (host) is where the dock software executes.  It uses the
DCX to interface to a Tag that has been connected to the DCX.

The connection between the dock and the tag is a master/slave SPI connection.
The dock is the master and the tag is a slave.  The h/w interconnect occurs
via the DCX which also provides isolation to protect the Tag's SPI bus.

On the tag side, the spi port can be dedicated or shared.  A dedicated spi will
be run exclusively as a slave.  With a shared spi, a dock -> tag(slave)
configuration is shared with a tag(master) talking on the Tag's SPI bus to other
devices on the bus.

The protocol described below supports both configurations.


1) HW interconnect

   DC = Dock_Comm

   SCLK:    clock sourced by the dock (master).
   SIMO:    slave in, master out, (spi data)
   SOMI:    slave out, master in, (spi data)

   DC_ATTN_M_N:
            Dock -> Tag (low true).  Master's Slave_Select (CSn).  Asserted
            for entire SPI packet transmission.

   DC_ATTN_S_N:
            Tag -> Dock (low true).  Asserted by a tag to indicate a message
            is pending for the dock.

   DC_SPI_EN:
            Tag -> Dock.  Assertion causes the DCX to connect the Dock's SPI
            to the Tag's SPI.  The Dock is master.

            When DC_SPI_EN is 0, the dock's SIMO should be pulled high to
            generate bytes of 0xff.


1a) DC_ATTN_M_N

The DC_ATTN_M_N signal is used to get the tag's attention and to bracket the
data being sent to the tag.  The initiating edge indicates the start
of a new packet and the next byte will be a channel byte.  DC_ATTN_M_N
is asserted for the duration of the packet.


1b) DC_ATTN_S_N.

The DC_ATTN_S_N signal is used by the tag to inform the dock that a tag packet
is ready to be retrieved.  The Dock will use the FETCH command to get the
tag's data.


1c) DC_SPI_EN.

Asserting DC_SPI_EN causes the DCX to connect the dock SPI and the tag SPI.
This enables output drivers from the Dock for SCLK and SIMO.  When
disabled, the incoming SOMI signal needs to be pulled high.

If DC_SPI_EN is stuck deasserted, the dock will not be able to communicate
with the tag.  The tag is required to participate in order for the dock_comm
interface to function properly.


1d) SCLK, SIMO, SOMI

When DC_SPI_EN is deasserted, the dock is disconnected from SCLK and SIMO and
SOMI is pulled up so any input bytes will be seen as 0xFF.

With DC_SPI_EN asserted, the dock effectively drives SCLK and SIMO and SOMI
is connected to the dock_spi bus SOMI.


2) Data format.

Data is transfered between the dock and the tag in packets.  All multi-byte
datums are in little endian order.  There is no multi-byte alignment
constraint.

   +---------+--------+-------+--------+-----------+--------+
   | channel |  type  |  len  |  data  |  checksum |   00   |
   +---------+--------+-------+--------+-----------+--------+

       1         1        2       len         2        1*

                                                   +--------+
      0xfe      0xfe     0xfe     0xfe      <---   |  srsp  |
                                                   +--------+

   channel:     data channel, end point identifier
   type:        channel dependent packet type.  (0 reserved)
   len:         2 byte length.  Length indicates the length of the data field.
   data:        packet data, size is len.
   checksum:    16 bit byte by byte sum truncated to 16 bits of bytes
                between channel through last data byte inclusive.  (little endian)
   srsp:        simple response (srsp).


2a) Channels.

The channel field in the packet denotes a logical end point.  An end point
denotes a software module that generates or consumes packet data.

    0:  none        channel 0 reserved
    1:  core        core commands and responses.
    2:  tagnet      tagnet over SPI
    3:  print       debug print.
    4:  large_dblk  large block dblk access.


2b) Core Type

The Core channel is used for core functions.

    0:  none    reserved
    1:  hello   are you alive
    2:  fetch   fetch data from tag (slave req)


2c) srsp, simple response.

For packets transmitted from the dock to the tag, a simple response
byte is returned by the tag after the last checksum byte has been sent.
This byte indicates immediate response to the packet just received.

    0:  ok
    1:  bad checksum
    2:  protocol error
    ff: not present


3) Basic Operation

The dock_comm port can be operated in two modes, DOCK_FREE, and DOCK_LOCK.

DOCK_FREE: the dock_comm spi can be freely shared between the dock_comm
as well as other devices on the spi bus.  Basically, the tag shares access
to the spi bus with dock messages.

DOCK_LOCK: after receipt of a DOCK_LOCK message, the tag keeps the dock_comm
spi port in slave mode.  This reserves the dock port for dock communications.

The dock_comm port is either connected to a dedicated slave spi or to a shared
spi bus which the tag normally accesses as a bus master.  If the tag is actively
using the spi bus it will hold off any dock communications/interactions by
deasserting DC_SPI_EN which disables the dock side drivers on SCLK and SIMO.


Initial state:  Normal tag operation.

  DC_SPI_EN:   0, disable external dock drivers if connected.
  DC_ATTN_M_N: 1, (pull up), if connected, Dock is not accessing the tag.
  DC_ATTN_S_N: 1, tag is not requesting data transfer from the dock.
  SPI bus:     the tag dock_comm spi can be configured as a master to enable
               accessing other devices on the bus.  Alternatively, the spi
               h/w can be held in reset to minimize power consumptino.


3a) Docking.  Plugging the tag into a dock shouldn't disrupt any operations
currently being performed on the tag.  (electrical issues?)  This includes
any potential transactions that are occuring on the dock_comm spi bus.

The process of docking does not generate a signal telling the tag docking has
occured.

The dock can tell that a Tag is attached by looking at the DCX_TAG_PRESENT
pin.  The DCX_TAG_PRESENT signal is asserted by the DCX when a tag has been
connected.


3b) Dock Attn.  The dock gets the attention of the tag by dropping DC_ATTN_M_N.
This acts as a slave_select (chip select) and the next byte transmitted by the
dock will be a channel byte.

The falling edge of DC_ATTN_M_N typically causes an interrupt on the tag.


3c) Tag actions on receipt of DC_ATTN_M_N signal (falling edge, low value),
    ATTN_M interrupt.

If the dock_comm spi is busy (tag is master, owned by tag), the interrupt
is ignored.

Otherwise, the tag will take the following actions:

    1) configure SPI as a slave, take it out of reset.
    2) raise DC_SPI_EN
    3) set dock_com spi busy (owned by the dock)


3d) Data transfer

Once the dock owns the spi, it can begin transferring bytes.  Being the
master, the dock is responsible for initiating every transfer.  One byte
sent, one byte received.

Two major modes are needed when transferring packets between the dock and
the tag, Dock -> Tag and Dock <- Tag.

To send data from the dock to the tag, the dock will assert DC_ATTN_M_N and
start sending a packet (channel, type, len, data, ...).  If the tag is
actively receiving these bytes, 0xFE will be returned for each transmitted
byte.

When the Tag has data that it needs the dock to retrieve it will assert
DC_ATTN_S_N, the dock will send a FETCH cmd and then will retreive the data
by sending a stream of bytes until a full packet has been retrieved.


Typically a sequence will look as follows:

Dock:                                   Tag:

  assert DC_ATTN_M_N                      interrupt
                                          configure SPI as slave
                                          set output byte to 0xFE
                                          assert DC_SPI_EN
                                          set dock_comm spi busy.

  sends first byte.                       interrupt, byte available
                                          process byte.

  sends bytes                             interrupt, continue processing
     ...

  sends 2nd checksum byte.                interrupt, process checksum
                                          set srsp byte to be returned.
                                          (will be returned on next
                                          transmitted byte).

  send 00                                 interrupt.  ignore last byte.

  deassert DC_ATTN_M_N


The tag will process the packet and perform the requested operation.  This
operation can take non-zero time.  When the results are available and the
response is ready, the tag will assert DC_ATTN_S_N.

Dock:                                   Tag:

                                          assert DC_ATTN_S_N

  assert DC_ATTN_M_N                      interrupt
                                          configure SPI as slave
                                          assert DC_SPI_EN
                                          set output byte to 0xFE
                                          set dock_comm spi busy.

  send channel (1)
  send fetch (type 2)
  send len 0x0000
  send chksum 0x0003                      set srsp
  send 00                                 <- srsp

  fd ->                                   send control next
  fd ->                                   send type next
  fd ->                                   send lsb len
  fd ->                                   send msb len
  fd ->                                      data
  fd ->                                      ...
  fd ->                                      data
  fd ->                                   send lsb chksum
  fd ->                                   send msb chksum
  srsp ->                                 send 00
                                          deassert DC_ATTN_S_N
  deassert DC_ATTN_M_N
