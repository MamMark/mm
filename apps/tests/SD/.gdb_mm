# display trace buffer
define trace
printf "trace buffer:  nxt: %d\n", trace_nxt
print trace_buf
end

# gps msg data display
define gmd
printf "gpsc_state: "
print gpsc_state
printf "msg_collect_state: "
print GPSMsgP__collect_state
printf "left: %d, collect_length 0x%x,  cur_chksum: 0x%04x\n", GPSMsgP__collect_left, GPSMsgP__collect_length, GPSMsgP__collect_cur_chksum
printf "collect_nxt:  0x%02x  on_overflow: %d\n", GPSMsgP__collect_nxt, GPSMsgP__on_overflow
printf "Msg State: "
print gpsm_state
printf "\nbuffer:\n"
x/32xb GPSMsgP__collect_msg
printf "overflow:\n"
x/16xb GPSMsgP__collect_overflow
printf "\nerrors: ovrfull: %d  ovrmax: %d  too_big: %d  chk fail: %d  proto fail: %d\n", GPSMsgP__collect_overflow_full, GPSMsgP__collect_overflow_max, GPSMsgP__collect_too_big, GPSMsgP__collect_chksum_fail, GPSMsgP__collect_proto_fail
end
document gmd
display gps message data
end

define erase
ena 2
mon reset
c
set do_erase=1
printf "do_erase: %d\n", do_erase
dis 2
end
document erase
set up for doing a manual errase
end

define timers
printf "Timer Block 0:\n  n       trip        t0        dt  shot  run\n"
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 0, VirtualizeTimerC__0__m_timers[0].t0 + VirtualizeTimerC__0__m_timers[0].dt, VirtualizeTimerC__0__m_timers[0].t0, \
	VirtualizeTimerC__0__m_timers[0].dt, VirtualizeTimerC__0__m_timers[0].isoneshot, VirtualizeTimerC__0__m_timers[0].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 1, VirtualizeTimerC__0__m_timers[1].t0 + VirtualizeTimerC__0__m_timers[1].dt, VirtualizeTimerC__0__m_timers[1].t0, \
	VirtualizeTimerC__0__m_timers[1].dt, VirtualizeTimerC__0__m_timers[1].isoneshot, VirtualizeTimerC__0__m_timers[1].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 2, VirtualizeTimerC__0__m_timers[2].t0 + VirtualizeTimerC__0__m_timers[2].dt, VirtualizeTimerC__0__m_timers[2].t0, \
	VirtualizeTimerC__0__m_timers[2].dt, VirtualizeTimerC__0__m_timers[2].isoneshot, VirtualizeTimerC__0__m_timers[2].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 3, VirtualizeTimerC__0__m_timers[3].t0 + VirtualizeTimerC__0__m_timers[3].dt, VirtualizeTimerC__0__m_timers[3].t0, \
	VirtualizeTimerC__0__m_timers[3].dt, VirtualizeTimerC__0__m_timers[3].isoneshot, VirtualizeTimerC__0__m_timers[3].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 4, VirtualizeTimerC__0__m_timers[4].t0 + VirtualizeTimerC__0__m_timers[4].dt, VirtualizeTimerC__0__m_timers[4].t0, \
	VirtualizeTimerC__0__m_timers[4].dt, VirtualizeTimerC__0__m_timers[4].isoneshot, VirtualizeTimerC__0__m_timers[4].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 5, VirtualizeTimerC__0__m_timers[5].t0 + VirtualizeTimerC__0__m_timers[5].dt, VirtualizeTimerC__0__m_timers[5].t0, \
	VirtualizeTimerC__0__m_timers[5].dt, VirtualizeTimerC__0__m_timers[5].isoneshot, VirtualizeTimerC__0__m_timers[5].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 6, VirtualizeTimerC__0__m_timers[6].t0 + VirtualizeTimerC__0__m_timers[6].dt, VirtualizeTimerC__0__m_timers[6].t0, \
	VirtualizeTimerC__0__m_timers[6].dt, VirtualizeTimerC__0__m_timers[6].isoneshot, VirtualizeTimerC__0__m_timers[6].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 7, VirtualizeTimerC__0__m_timers[7].t0 + VirtualizeTimerC__0__m_timers[7].dt, VirtualizeTimerC__0__m_timers[7].t0, \
	VirtualizeTimerC__0__m_timers[7].dt, VirtualizeTimerC__0__m_timers[7].isoneshot, VirtualizeTimerC__0__m_timers[7].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 8, VirtualizeTimerC__0__m_timers[8].t0 + VirtualizeTimerC__0__m_timers[8].dt, VirtualizeTimerC__0__m_timers[8].t0, \
	VirtualizeTimerC__0__m_timers[8].dt, VirtualizeTimerC__0__m_timers[8].isoneshot, VirtualizeTimerC__0__m_timers[8].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 9, VirtualizeTimerC__0__m_timers[9].t0 + VirtualizeTimerC__0__m_timers[9].dt, VirtualizeTimerC__0__m_timers[9].t0, \
	VirtualizeTimerC__0__m_timers[9].dt, VirtualizeTimerC__0__m_timers[9].isoneshot, VirtualizeTimerC__0__m_timers[9].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 0d10, VirtualizeTimerC__0__m_timers[0d10].t0 + VirtualizeTimerC__0__m_timers[0d10].dt, VirtualizeTimerC__0__m_timers[0d10].t0, \
	VirtualizeTimerC__0__m_timers[0d10].dt, VirtualizeTimerC__0__m_timers[0d10].isoneshot, VirtualizeTimerC__0__m_timers[0d10].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 0d11, VirtualizeTimerC__0__m_timers[0d11].t0 + VirtualizeTimerC__0__m_timers[0d11].dt, VirtualizeTimerC__0__m_timers[0d11].t0, \
	VirtualizeTimerC__0__m_timers[0d11].dt, VirtualizeTimerC__0__m_timers[0d11].isoneshot, VirtualizeTimerC__0__m_timers[0d11].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 0d12, VirtualizeTimerC__0__m_timers[0d12].t0 + VirtualizeTimerC__0__m_timers[0d12].dt, VirtualizeTimerC__0__m_timers[0d12].t0, \
	VirtualizeTimerC__0__m_timers[0d12].dt, VirtualizeTimerC__0__m_timers[0d12].isoneshot, VirtualizeTimerC__0__m_timers[0d12].isrunning
end
document timers
display virtualized timers block 0
end

#show adc arbritration queue
define sa
printf "resQ:  %02x%02x\n", RoundRobinResourceQueueC__0__resQ[1], RoundRobinResourceQueueC__0__resQ[0]
printf "adc: state: %02x, req: %02x, owner: %02x\n", AdcP__adc_state, AdcP__req_client, AdcP__adc_owner
end
document sa
show adc arbritration queue
end

define rq
printf "rq: %02x%02x  last: %d\n",RoundRobinResourceQueueC__0__resQ[1],RoundRobinResourceQueueC__0__resQ[0],RoundRobinResourceQueueC__0__last
end
document rq
RoundRobin Resource Queue (ADC arbiter)
end

define ss
printf "SS: state: \n"
print StreamStorageP__ss_state
printf "  control struct: "
print StreamStorageP__ssc
printf "    alloc: %02x  in: %02x  out: %02x\n", StreamStorageP__ssc.ssw_alloc, StreamStorageP__ssc.ssw_in, StreamStorageP__ssc.ssw_out
printf "  buffers: [%04x] %04x  ts: %04lx ", StreamStorageP__ssw_p[0]->buf, StreamStorageP__ssw_p[0]->majik, StreamStorageP__ssw_p[0]->stamp
print StreamStorageP__ssw_p[0]->req_state
printf "           [%04x] %04x  ts: %04lx ", StreamStorageP__ssw_p[1]->buf, StreamStorageP__ssw_p[1]->majik, StreamStorageP__ssw_p[1]->stamp
print StreamStorageP__ssw_p[1]->req_state
printf "           [%04x] %04x  ts: %04lx ", StreamStorageP__ssw_p[2]->buf, StreamStorageP__ssw_p[2]->majik, StreamStorageP__ssw_p[2]->stamp
print StreamStorageP__ssw_p[2]->req_state
printf "           [%04x] %04x  ts: %04lx ", StreamStorageP__ssw_p[3]->buf, StreamStorageP__ssw_p[3]->majik, StreamStorageP__ssw_p[3]->stamp
print StreamStorageP__ssw_p[3]->req_state
printf "     read:  in: %02x  out: %02x\n", StreamStorageP__ssc.ssr_in, StreamStorageP__ssc.ssr_out
printf "           %04x  ts: %04lx  blk: %04u  buf: %04x  ", StreamStorageP__ssr_reqs[0].majik, StreamStorageP__ssr_reqs[0].stamp,\
    StreamStorageP__ssr_reqs[0].blk, StreamStorageP__ssr_reqs[0].buf
print StreamStorageP__ssr_reqs[0]->req_state
printf "           %04x  ts: %04lx  blk: %04u  buf: %04x  ", StreamStorageP__ssr_reqs[1].majik, StreamStorageP__ssr_reqs[1].stamp,\
    StreamStorageP__ssr_reqs[1].blk, StreamStorageP__ssr_reqs[1].buf
print StreamStorageP__ssr_reqs[1]->req_state
printf "           %04x  ts: %04lx  blk: %04u  buf: %04x  ", StreamStorageP__ssr_reqs[2].majik, StreamStorageP__ssr_reqs[2].stamp,\
    StreamStorageP__ssr_reqs[2].blk, StreamStorageP__ssr_reqs[2].buf
print StreamStorageP__ssr_reqs[2]->req_state
printf "           %04x  ts: %04lx  blk: %04u  buf: %04x  ", StreamStorageP__ssr_reqs[3].majik, StreamStorageP__ssr_reqs[3].stamp,\
    StreamStorageP__ssr_reqs[3].blk, StreamStorageP__ssr_reqs[3].buf
print StreamStorageP__ssr_reqs[3]->req_state
end
document ss
StreamStorage state
end


define sd
printf "sd:  pwr: %d  csn: %d/%c  p3d/s: %d/%d  rx: %02x  tx: %02x\n", \
    (((*(uint8_t *)0x31) & 1) ? 0 : 1), \
    (((*(uint8_t *)0x31) & 0x10) ? 1 : 0), (((*(uint8_t *)0x32) & 0x10) ? 'o' : 'i'), \
    (((*(uint8_t *)0x1A) >> 1) & 7), (((*(uint8_t *)0x1B) >> 1) & 7), \
    (*(uint8_t *)0x6e), (*(uint8_t *)0x6f)
p/x SDspP__sd_cmd
p/x SDspP__sd_ctl
end
document sd
display SD h/w state
end


define gps
printf "gps(ua0):  pwr: %d  p3(4,5)d/s: %d/%d  rst: %d  ie: %d  ifg: %d  stat: %02x  rx: %02x  tx: %02x\n", \
    (((*(uint8_t *)0x1d) & 0x40) ? 0 : 1), \
    (((*(uint8_t *)0x1A) >> 4) & 3), (((*(uint8_t *)0x1B) >> 4) & 3), \
    (((*(uint8_t *)0x61) & 1) ? 1 : 0), \
    ((*(uint8_t *)0x01) & 3), ((*(uint8_t *)0x03) & 3), \
    (*(uint8_t *)0x65), (*(uint8_t *)0x66), (*(uint8_t *)0x67)
end
document gps
display gps h/w state
end


define tq
printf "taskq: head: %d  tail %d\n", (uint8_t) SchedulerBasicP__m_head, (uint8_t) SchedulerBasicP__m_tail
x/25bu SchedulerBasicP__m_next
end
document tq
display task queue
end
