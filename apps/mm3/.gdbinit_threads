
#threads

disp/i $pc
x/i $pc
set pri ele 0

# gps msg data display
define gmd
printf "gpsc_state: "
print GPSP$gpsc_state
printf "gpsc_prev_state: "
print GPSP$gpsc_prev_state
printf "gpsm_state: "
print GPSMsgP$gpsm_state
printf "left: %d, gpsm_length 0x%x,  cur_chksum: 0x%04x\n", GPSMsgP$gpsm_left, GPSMsgP$gpsm_length, GPSMsgP$gpsm_cur_chksum
printf "gpsm_nxt:  0x%02x  on_overflow: %d\n", GPSMsgP$gpsm_nxt, GPSMsgP$on_overflow
printf "\nbuffer:\n"
x/32xb GPSMsgP$gpsm_msg
printf "overflow:\n"
x/16xb GPSMsgP$gpsm_overflow
printf "\nerrors: ovrfull: %d  ovrmax: %d  too_big: %d  chk fail: %d  proto fail: %d\n", GPSMsgP$gpsm_overflow_full, GPSMsgP$gpsm_overflow_max, GPSMsgP$gpsm_too_big, GPSMsgP$gpsm_chksum_fail, GPSMsgP$gpsm_proto_fail
end

# 1
b TinyOSMainP.nc:83

# 2
#b TinyOSMainP.nc:90
b *TinyOSMainP$TinyOSBoot$booted+0d64

# 3 task scheduler
b SchedulerBasicP.nc:137

# thread scheduler
#b SchedulerBasicP.nc:134

#mcu sleep
#b TinyThreadSchedulerP.nc:94

# 4 thread dispatch
b TinyThreadSchedulerP.nc:76

dis


# 5
b PanicP.nc:46
comm
printf "pcode: %d  where: %d  %04x %04x %04x %04x\n",_p, _w, _a0, _a1, _a2, _a3
end

# 6 BRK_FINISH
#b GPSP.nc:385

# 7
b *ArbiterP$0$Resource$request+0d12
comm
printf "request: %d\n", id
end

# 8
b *ArbiterP$0$Resource$release+0d12
comm
printf "release: %d\n", id
end

# 9
#b GPSP.nc:999

# 10
#b GPSP.nc:1022

dis 7-10

# 11
#b *GPSP$gps_config_task$runTask+0d358

#b VirtualizeTimerC.nc:81

# Arbiter request and release
#b ArbiterP.nc:77
#b ArbiterP.nc:110

#b CollectP.nc:45
#comm
#printf "collect: len: %d (0x%02x), type: %d  id: %d\n",dlen,dlen,data[2],data[3]
#end

#b mm3CommDataP.nc:80
#comm
#printf "Data: sns: %d\n", client_id
#end
#dis 7-8

#b mm3C.nc:136
#b SDP.nc:229
#b SDP.nc:390

#b mm3CommDataP.nc:163
#comm
#printf "inUse[%d] cleared\n",last
#end

# b sig_TIMERA0_VECTOR
# b sig_TIMERA1_VECTOR
# b sig_TIMERB0_VECTOR
# b sig_TIMERB1_VECTOR

# b AdcP.nc:219
# comm
# printf "PUD: owner: %d  req: %d  adc_state: %02x\n", AdcP$adc_owner, AdcP$req_client, AdcP$adc_state
# end
# b AdcP.nc:372
# comm
# printf "PowerAlarm: owner: %d\n", AdcP$adc_owner
# end
# b AdcP.nc:412
# comm
# printf "reqConf: id: %d\n",client_id
# end
# b AdcP.nc:453
# comm
# printf "reconfig: %d\n",AdcP$adc_owner
# end
# b AdcP.nc:492
# comm
# printf "release: %d %d\n",AdcP$adc_owner,client_id
# end
