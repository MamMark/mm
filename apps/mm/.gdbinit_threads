#threads

source ../../.gdb2618

set remoteaddresssize 0d64
set remotetimeout 0d999999
target remote localhost:2000

disp/i $pc
x/i $pc
set pri ele 0

# 1
b TinyOSMainP.nc:89

# 2
b TinyOSMainP.nc:96
#b *TinyOSMainP__TinyOSBoot__booted+0d64

# 3 task scheduler
b SchedulerBasicP.nc:137

# 4 thread dispatch
b TinyThreadSchedulerP.nc:89

dis


# 5 debug_break
b PanicP.nc:62

# 6 panic
b PanicP.nc:77
comm
printf "pcode: 0d%d (0x%0x)  where: 0d%d  0x%04x 0x%04x 0x%04x 0x%04x\n",_p,_p, _w, _a0, _a1, _a2, _a3
end

# 7
b mmC.nc:50

# 7 Msg Collect too big
#b GPSMsgP.nc:538

# 8 Msg checksum fail
#b GPSMsgP.nc:561

# GPSP.nc
#  9 finish      502
# 10 signal surface mmControlP.nc:107
# 11 start       669
# 12 SerialDefOwner.requested 1134
# 13 SerialDefOwner.granted    787
# 14 msgBoundary 1102
# 15 SerialDemuxResource.granted 766

# 9 finish
#b GPSP.nc:502
#b mmControlP.nc:107
#b GPSP.nc:669
#b GPSP.nc:1134
#b *GPSP__SerialDefOwner__granted
#b GPSP.nc:1102
#b GPSP.nc:766

#dis 7-15
#ena 10
#comm 10
#ena 11-14
#dis 10
#end

# 11 12
#b mmSerialCommP.nc:52
#b mmSerialCommP.nc:84


# 7 SSWrite
#b StreamStorageP.nc:628

# 8 SSRead
#b StreamStorageP.nc:798

# 9 process_geodetic got over determined
# b GPSMsgP.nc:209

# b sig_TIMERA0_VECTOR
# b sig_TIMERA1_VECTOR
# b sig_TIMERB0_VECTOR
# b sig_TIMERB1_VECTOR

# b AdcP.nc:219
# comm
# printf "PUD: owner: %d  req: %d  adc_state: %02x\n", AdcP__adc_owner, AdcP__req_client, AdcP__adc_state
# end
# b AdcP.nc:372
# comm
# printf "PowerAlarm: owner: %d\n", AdcP__adc_owner
# end
# b AdcP.nc:412
# comm
# printf "reqConf: id: %d\n",client_id
# end
# b AdcP.nc:453
# comm
# printf "reconfig: %d\n",AdcP__adc_owner
# end
# b AdcP.nc:492
# comm
# printf "release: %d %d\n",AdcP__adc_owner,client_id
# end

# display trace buffer
define trace
printf "trace buffer:  nxt: %d\n", trace_nxt
print trace_buf
end

# gps msg data display
define gmd
printf "gpsc_state: "
print gpsc_state
printf "gpsc_release_state: "
print gpsc_release_state
printf "msg_collect_state: "
print GPSMsgP__collect_state
printf "left: %d, collect_length 0x%x,  cur_chksum: 0x%04x\n", GPSMsgP__collect_left, GPSMsgP__collect_length, GPSMsgP__collect_cur_chksum
printf "collect_nxt:  0x%02x  on_overflow: %d\n", GPSMsgP__collect_nxt, GPSMsgP__on_overflow
printf "Msg State: "
print gpsm_state
printf "\nbuffer:\n"
x/32xb GPSMsgP__collect_msg
printf "overflow:\n"
x/16xb GPSMsgP__collect_overflow
printf "\nerrors: ovrfull: %d  ovrmax: %d  too_big: %d  chk fail: %d  proto fail: %d\n", GPSMsgP__collect_overflow_full, GPSMsgP__collect_overflow_max, GPSMsgP__collect_too_big, GPSMsgP__collect_chksum_fail, GPSMsgP__collect_proto_fail
end

define erase
ena 2
mon reset
c
set do_erase=1
printf "do_erase: %d\n", do_erase
dis 2
end

define timers
printf "Timer Block 0:\n  n       trip        t0        dt  shot  run\n"
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 0, VirtualizeTimerC__0__m_timers[0].t0 + VirtualizeTimerC__0__m_timers[0].dt, VirtualizeTimerC__0__m_timers[0].t0, \
	VirtualizeTimerC__0__m_timers[0].dt, VirtualizeTimerC__0__m_timers[0].isoneshot, VirtualizeTimerC__0__m_timers[0].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 1, VirtualizeTimerC__0__m_timers[1].t0 + VirtualizeTimerC__0__m_timers[1].dt, VirtualizeTimerC__0__m_timers[1].t0, \
	VirtualizeTimerC__0__m_timers[1].dt, VirtualizeTimerC__0__m_timers[1].isoneshot, VirtualizeTimerC__0__m_timers[1].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 2, VirtualizeTimerC__0__m_timers[2].t0 + VirtualizeTimerC__0__m_timers[2].dt, VirtualizeTimerC__0__m_timers[2].t0, \
	VirtualizeTimerC__0__m_timers[2].dt, VirtualizeTimerC__0__m_timers[2].isoneshot, VirtualizeTimerC__0__m_timers[2].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 3, VirtualizeTimerC__0__m_timers[3].t0 + VirtualizeTimerC__0__m_timers[3].dt, VirtualizeTimerC__0__m_timers[3].t0, \
	VirtualizeTimerC__0__m_timers[3].dt, VirtualizeTimerC__0__m_timers[3].isoneshot, VirtualizeTimerC__0__m_timers[3].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 4, VirtualizeTimerC__0__m_timers[4].t0 + VirtualizeTimerC__0__m_timers[4].dt, VirtualizeTimerC__0__m_timers[4].t0, \
	VirtualizeTimerC__0__m_timers[4].dt, VirtualizeTimerC__0__m_timers[4].isoneshot, VirtualizeTimerC__0__m_timers[4].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 5, VirtualizeTimerC__0__m_timers[5].t0 + VirtualizeTimerC__0__m_timers[5].dt, VirtualizeTimerC__0__m_timers[5].t0, \
	VirtualizeTimerC__0__m_timers[5].dt, VirtualizeTimerC__0__m_timers[5].isoneshot, VirtualizeTimerC__0__m_timers[5].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 6, VirtualizeTimerC__0__m_timers[6].t0 + VirtualizeTimerC__0__m_timers[6].dt, VirtualizeTimerC__0__m_timers[6].t0, \
	VirtualizeTimerC__0__m_timers[6].dt, VirtualizeTimerC__0__m_timers[6].isoneshot, VirtualizeTimerC__0__m_timers[6].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 7, VirtualizeTimerC__0__m_timers[7].t0 + VirtualizeTimerC__0__m_timers[7].dt, VirtualizeTimerC__0__m_timers[7].t0, \
	VirtualizeTimerC__0__m_timers[7].dt, VirtualizeTimerC__0__m_timers[7].isoneshot, VirtualizeTimerC__0__m_timers[7].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 8, VirtualizeTimerC__0__m_timers[8].t0 + VirtualizeTimerC__0__m_timers[8].dt, VirtualizeTimerC__0__m_timers[8].t0, \
	VirtualizeTimerC__0__m_timers[8].dt, VirtualizeTimerC__0__m_timers[8].isoneshot, VirtualizeTimerC__0__m_timers[8].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 9, VirtualizeTimerC__0__m_timers[9].t0 + VirtualizeTimerC__0__m_timers[9].dt, VirtualizeTimerC__0__m_timers[9].t0, \
	VirtualizeTimerC__0__m_timers[9].dt, VirtualizeTimerC__0__m_timers[9].isoneshot, VirtualizeTimerC__0__m_timers[9].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 0d10, VirtualizeTimerC__0__m_timers[0d10].t0 + VirtualizeTimerC__0__m_timers[0d10].dt, VirtualizeTimerC__0__m_timers[0d10].t0, \
	VirtualizeTimerC__0__m_timers[0d10].dt, VirtualizeTimerC__0__m_timers[0d10].isoneshot, VirtualizeTimerC__0__m_timers[0d10].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 0d11, VirtualizeTimerC__0__m_timers[0d11].t0 + VirtualizeTimerC__0__m_timers[0d11].dt, VirtualizeTimerC__0__m_timers[0d11].t0, \
	VirtualizeTimerC__0__m_timers[0d11].dt, VirtualizeTimerC__0__m_timers[0d11].isoneshot, VirtualizeTimerC__0__m_timers[0d11].isrunning
printf " %2d:  %8lx  %8lx  %8lx     %d    %d\n", 0d12, VirtualizeTimerC__0__m_timers[0d12].t0 + VirtualizeTimerC__0__m_timers[0d12].dt, VirtualizeTimerC__0__m_timers[0d12].t0, \
	VirtualizeTimerC__0__m_timers[0d12].dt, VirtualizeTimerC__0__m_timers[0d12].isoneshot, VirtualizeTimerC__0__m_timers[0d12].isrunning
end
document timers
display virtualized timers block 0
end

#show adc arbritration queue
define sa
printf "resQ:  %02x%02x\n", RoundRobinResourceQueueC__0__resQ[1], RoundRobinResourceQueueC__0__resQ[0]
printf "adc: state: %02x, req: %02x, owner: %02x\n", AdcP__adc_state, AdcP__req_client, AdcP__adc_owner
end
document sa
show adc arbritration queue
end

define rq
printf "rq: %02x%02x  last: %d\n",RoundRobinResourceQueueC__0__resQ[1],RoundRobinResourceQueueC__0__resQ[0],RoundRobinResourceQueueC__0__last
end
document rq
RoundRobin Resource Queue (ADC arbiter)
end

define ss
printf "SS: state: \n"
print StreamStorageP__ss_state
printf "  control struct: "
print StreamStorageP__ssc
printf "    alloc: %02x  in: %02x  out: %02x\n", StreamStorageP__ssc.ssw_alloc, StreamStorageP__ssc.ssw_in, StreamStorageP__ssc.ssw_out
printf "  buffers: [%04x] %04x  ts: %04lx ", StreamStorageP__ssw_p[0]->buf, StreamStorageP__ssw_p[0]->majik, StreamStorageP__ssw_p[0]->stamp
print StreamStorageP__ssw_p[0]->req_state
printf "           [%04x] %04x  ts: %04lx ", StreamStorageP__ssw_p[1]->buf, StreamStorageP__ssw_p[1]->majik, StreamStorageP__ssw_p[1]->stamp
print StreamStorageP__ssw_p[1]->req_state
printf "           [%04x] %04x  ts: %04lx ", StreamStorageP__ssw_p[2]->buf, StreamStorageP__ssw_p[2]->majik, StreamStorageP__ssw_p[2]->stamp
print StreamStorageP__ssw_p[2]->req_state
printf "           [%04x] %04x  ts: %04lx ", StreamStorageP__ssw_p[3]->buf, StreamStorageP__ssw_p[3]->majik, StreamStorageP__ssw_p[3]->stamp
print StreamStorageP__ssw_p[3]->req_state
printf "     read:  in: %02x  out: %02x\n", StreamStorageP__ssc.ssr_in, StreamStorageP__ssc.ssr_out
printf "           %04x  ts: %04lx  blk: %04u  buf: %04x  ", StreamStorageP__ssr_reqs[0].majik, StreamStorageP__ssr_reqs[0].stamp,\
    StreamStorageP__ssr_reqs[0].blk, StreamStorageP__ssr_reqs[0].buf
print StreamStorageP__ssr_reqs[0]->req_state
printf "           %04x  ts: %04lx  blk: %04u  buf: %04x  ", StreamStorageP__ssr_reqs[1].majik, StreamStorageP__ssr_reqs[1].stamp,\
    StreamStorageP__ssr_reqs[1].blk, StreamStorageP__ssr_reqs[1].buf
print StreamStorageP__ssr_reqs[1]->req_state
printf "           %04x  ts: %04lx  blk: %04u  buf: %04x  ", StreamStorageP__ssr_reqs[2].majik, StreamStorageP__ssr_reqs[2].stamp,\
    StreamStorageP__ssr_reqs[2].blk, StreamStorageP__ssr_reqs[2].buf
print StreamStorageP__ssr_reqs[2]->req_state
printf "           %04x  ts: %04lx  blk: %04u  buf: %04x  ", StreamStorageP__ssr_reqs[3].majik, StreamStorageP__ssr_reqs[3].stamp,\
    StreamStorageP__ssr_reqs[3].blk, StreamStorageP__ssr_reqs[3].buf
print StreamStorageP__ssr_reqs[3]->req_state
end
document ss
StreamStorage state
end


define sd
printf "sd:  pwr: %d  csn: %d/%c  p3d/s: %d/%d  rx: %02x  tx: %02x\n", \
    (((*(uint8_t *)0x31) & 1) ? 0 : 1), \
    (((*(uint8_t *)0x31) & 0x10) ? 1 : 0), (((*(uint8_t *)0x32) & 0x10) ? 'o' : 'i'), \
    (((*(uint8_t *)0x1A) >> 1) & 7), (((*(uint8_t *)0x1B) >> 1) & 7), \
    (*(uint8_t *)0x6e), (*(uint8_t *)0x6f)
p/x SDP__sd_cmd
end
document sd
display SD state
end


define th
printf "current_thread: %04x  num_runnable: %d\n",TinyThreadSchedulerP__current_thread,TinyThreadSchedulerP__num_runnable_threads
print *TinyThreadSchedulerP__current_thread
printf "\ntos_thread: %04x\n",TinyThreadSchedulerP__tos_thread
print *TinyThreadSchedulerP__tos_thread
end
document th
display thread state
end

define tq
printf "taskq: head: %d  tail %d\n", (uint8_t) SchedulerBasicP__m_head, (uint8_t) SchedulerBasicP__m_tail
x/25bu SchedulerBasicP__m_next
end
document tq
display task queue
end

define usq
printf "ArbiterP__0: resId: %d, reqResId: %d,  state: %d\n", ArbiterP__0__resId, ArbiterP__0__reqResId, ArbiterP__0__state
printf "usartQ (FcfsResourceQueueC__0): head: %d  tail %d\n", FcfsResourceQueueC__0__qHead, FcfsResourceQueueC__0__qTail
x/4ub FcfsResourceQueueC__0__resQ
end
document usq
display usart arbritration queue
end

define sdq
printf "ArbiterP__1: resId: %d, reqResId: %d,  state: %d\n", ArbiterP__1__resId, ArbiterP__1__reqResId, ArbiterP__1__state
printf "serialDemuxQ (FcfsResourceQueueC__1): head: %d  tail %d\n", FcfsResourceQueueC__1__qHead, FcfsResourceQueueC__1__qTail
x/4ub FcfsResourceQueueC__1__resQ
end
document usq
display usart arbritration queue
end

define nx
fini
ni 3
si 2
end

define noint
printf "cur sr: %02x\n", $r2
set $r2=0
end
